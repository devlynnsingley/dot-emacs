\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename monitor.info
@settitle Monitor 0.3.0
@documentencoding UTF-8
@documentlanguage en
@syncodeindex pg cp
@c %**end of header

@copying

This is the manual for Monitor (version 0.3.0), which
provides an API for defining Monitors; abstract hooks with highly
customizable behaviour.

Copyright @copyright{} 2016 Ben Moon

@quotation
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Monitor: (monitor).   Monitor arbitrary aspects of Emacs.
@end direntry

@finalout
@titlepage
@title Monitor
@subtitle for version 0.3.0
@author Ben Moon (@email{software@@guiltydolphin.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Monitor 0.3.0
@insertcopying
@end ifnottex

@menu
* Introduction::
* Monitors::
* Monitor Instances::
* Examples::
* GNU Free Documentation License::
* Index::

@detailmenu
--- The Detailed Node Listing ---

Monitors

* Defining Monitors::
* Monitor Functions::
* Predefined Monitors::

Predefined Monitors

* base::
* trigger::
* hook::
* expression-value::
Monitor Instances

* Defining Instances::
* Instance Functions::

Examples

* Using Instance Variables::
@end detailmenu
@end menu



@node Introduction
@chapter Introduction

@node Monitors
@chapter Monitors

@menu
* Defining Monitors::
* Monitor Functions::
* Predefined Monitors::
@end menu

@node Defining Monitors
@section Defining Monitors

To define a new monitor, use the @code{define-monitor} function. This function
has three mandatory arguments: the monitor name; the parent; and the
documentation string, and then takes an arbitrary amount of arguments in
the form of @code{:keyword} @code{value} pairs.

@node Monitor Functions
@section Monitor Functions

@findex define-monitor

@itemize
@item
Function: define-monitor name parent doc &rest args

Define a new monitor (@ref{Defining Monitors,Defining Monitors}).
@end itemize

@findex monitor-run-monitor-option

@itemize
@item
Function: monitor-run-monitor-option monitor prop &rest args

Run MONITOR's PROP option with ARGS as arguments.
@end itemize

@findex monitor-enable

@itemize
@item
Function: monitor-enable monitor

Globally enable a monitor.
@end itemize

@findex monitor-disable

@itemize
@item
Function: monitor-disable monitor

Globally disable a monitor.
@end itemize

@node Predefined Monitors
@section Predefined Monitors

@menu
* base::
* trigger::
* hook::
* expression-value::
@end menu

@node base
@subsection The `base' Monitor


Base monitor that should generally be used as the parent for other low-level
monitors.

@node trigger
@subsection The `trigger' Monitor


Monitor for instantaneous triggering.

Monitor options:

@table @samp
@item :trigger:
use @code{monitor-run-option monitor :trigger instance args...} to
trigger INSTANCE.
@end table

Instance options:

@table @samp
@item :trigger
functions to be run when the instance triggers.
@end table

@node hook
@subsection The `hook' Monitor


Monitor for hooks.
Instances trigger when a hook is run.

Monitor options:

@table @samp
@item :hook-ivar
name of variable to use for storing hook meta information.
@end table

Instance options:

@table @samp
@item :hook
the hook to be monitored.
@end table

@node expression-value
@subsection The `expression-value' Monitor


Monitor for watching the values of expressions.

Monitor options:

@table @samp
@item :check
use @code{monitor-run-monitor-option monitor :check instance} to check a
watched expression.
@end table

Instance options:

@table @samp
@item :expr
the expression to be monitored.
@item :pred
predicate passed the old and new values of @code{:expr} and triggers the
instance upon returning a non-NIL value.
@end table

@node Monitor Instances
@chapter Monitor Instances

@menu
* Defining Instances::
* Instance Functions::
@end menu

@node Defining Instances
@section Defining Instances

To define a monitor instance, use the @code{monitor} function. This function takes
a single required argument (a symbol) specifying the monitor to attach the
instance to, and a series of key-value arguments that are used to configure
the instance and whose meaning may vary depending on which monitor is being
used.

@node Instance Functions
@section Instance Functions

@findex monitor

@itemize
@item
Function: monitor monitor &rest args

Define a new monitor instance for the monitor MONITOR.
Use ARGS to configure the behaviour of the instance.
@end itemize

@node Examples
@chapter Examples

@menu
* Using Instance Variables::
@end menu

@node Using Instance Variables
@section Using Instance Variables

@lisp
;; We must declare the instance variable independently of the monitor.
(defvar hook-ivar nil)

;; We can now use the instance variable to create a derived instance of
;; 'hook, which we can modify without changing any other 'hook monitors.
(define-monitor 'my-hook-monitor 'hook
  "My monitor for hooks."
  :hook-ivar 'hook-ivar)

;; Every time the 'post-command-hook is run, check to see if the value of
;; (point) has changed.
(defvar my-post-command-instance
  (monitor 'my-hook-monitor
    :hook 'post-command-hook
    :trigger 'my-check-point))

;; Whenever this instance is run, if the value of point has changed then
;; 'my-run-stuff will be run.
(defvar my-point-check-instance
  (monitor 'expression-value
    :expr '(point)
    :pred '/=
    :trigger 'my-run-stuff

;; Run the monitor instance for checking the value of point.
(defun my-check-point ()
  "Check the current point for region change."
  (monitor-run-monitor-option 'expression-value :check my-point-check-instance))

(defun my-run-stuff ()
  "Go wild."
  (print "Rainbow!"))
@end lisp

@node GNU Free Documentation License
@appendix GNU Free Documentation License


@include fdl-1.3.texi

@node Index
@unnumbered Index

@printindex cp

@c Emacs 24.5.4 (Org mode 8.2.10)
@bye
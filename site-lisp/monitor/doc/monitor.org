#+MACRO: version 0.3.0
#+MACRO: name Monitor
#+MACRO: repo https://github.com/GuiltyDolphin/monitor

#+OPTIONS: ':t toc:t author:t email:t
#+TITLE: {{{name}}} {{{version}}}
#+AUTHOR: Ben Moon
#+EMAIL: software@guiltydolphin.com
#+LANGUAGE: en

#+TEXINFO_FILENAME: monitor.info
#+TEXINFO_HEADER: @syncodeindex pg cp

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Monitor: (monitor).
#+TEXINFO_DIR_DESC: Monitor arbitrary aspects of Emacs.

#+TEXINFO_PRINTED_TITLE: Monitor
#+SUBTITLE: for version 0.3.0

* Copying
:PROPERTIES:
:COPYING:  t
:END:

This is the manual for {{{name}}} (version {{{version}}}), which
provides an API for defining Monitors; abstract hooks with highly
customizable behaviour.

Copyright @@texinfo:@copyright{}@@ 2016 Ben Moon

#+BEGIN_QUOTE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_QUOTE

* Introduction

* Monitors

** Defining Monitors

To define a new monitor, use the ~define-monitor~ function. This function
has three mandatory arguments: the monitor name; the parent; and the
documentation string, and then takes an arbitrary amount of arguments in
the form of ~:keyword~ ~value~ pairs.

** Monitor Functions

#+FINDEX: define-monitor

- Function: define-monitor name parent doc &rest args

  Define a new monitor ([[*Defining Monitors]]).

#+FINDEX: monitor-run-monitor-option

- Function: monitor-run-monitor-option monitor prop &rest args

  Run MONITOR's PROP option with ARGS as arguments.

#+FINDEX: monitor-enable

- Function: monitor-enable monitor

  Globally enable a monitor.

#+FINDEX: monitor-disable

- Function: monitor-disable monitor

  Globally disable a monitor.

** Predefined Monitors

*** The 'base' Monitor

:PROPERTIES:
:ALT_TITLE: base
:END:

Base monitor that should generally be used as the parent for other low-level
monitors.

*** The 'trigger' Monitor

:PROPERTIES:
:ALT_TITLE: trigger
:END:

Monitor for instantaneous triggering.

Monitor options:

- :trigger: :: use ~monitor-run-option monitor :trigger instance args...~ to
               trigger INSTANCE.

Instance options:

- :trigger :: functions to be run when the instance triggers.

*** The 'hook' Monitor

:PROPERTIES:
:ALT_TITLE: hook
:END:

Monitor for hooks.
Instances trigger when a hook is run.

Monitor options:

- :hook-ivar :: name of variable to use for storing hook meta information.

Instance options:

- :hook :: the hook to be monitored.

*** The 'expression-value' Monitor

:PROPERTIES:
:ALT_TITLE: expression-value
:END:

Monitor for watching the values of expressions.

Monitor options:

- :check :: use ~monitor-run-monitor-option monitor :check instance~ to check a
            watched expression.

Instance options:

- :expr :: the expression to be monitored.
- :pred :: predicate passed the old and new values of ~:expr~ and triggers the
           instance upon returning a non-NIL value.

* Monitor Instances

** Defining Instances

To define a monitor instance, use the ~monitor~ function. This function takes
a single required argument (a symbol) specifying the monitor to attach the
instance to, and a series of key-value arguments that are used to configure
the instance and whose meaning may vary depending on which monitor is being
used.

** Instance Functions

#+FINDEX: monitor

- Function: monitor monitor &rest args

  Define a new monitor instance for the monitor MONITOR.
  Use ARGS to configure the behaviour of the instance.

* Examples

** Using Instance Variables

#+BEGIN_SRC emacs-lisp
;; We must declare the instance variable independently of the monitor.
(defvar hook-ivar nil)

;; We can now use the instance variable to create a derived instance of
;; 'hook, which we can modify without changing any other 'hook monitors.
(define-monitor 'my-hook-monitor 'hook
  "My monitor for hooks."
  :hook-ivar 'hook-ivar)

;; Every time the 'post-command-hook is run, check to see if the value of
;; (point) has changed.
(defvar my-post-command-instance
  (monitor 'my-hook-monitor
    :hook 'post-command-hook
    :trigger 'my-check-point))

;; Whenever this instance is run, if the value of point has changed then
;; 'my-run-stuff will be run.
(defvar my-point-check-instance
  (monitor 'expression-value
    :expr '(point)
    :pred '/=
    :trigger 'my-run-stuff

;; Run the monitor instance for checking the value of point.
(defun my-check-point ()
  "Check the current point for region change."
  (monitor-run-monitor-option 'expression-value :check my-point-check-instance))

(defun my-run-stuff ()
  "Go wild."
  (print "Rainbow!"))
#+END_SRC

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:END:

#+TEXINFO: @include fdl-1.3.texi

* Index
:PROPERTIES:
:INDEX:    cp
:END:

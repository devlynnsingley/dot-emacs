#+TITLE: John Wiegley's .emacs file

* Preface

#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-

(defvar dot-emacs-use-eglot nil)
(eval-when-compile
  (defvar gnus-home-directory))

(defconst emacs-start-time (current-time))

(defvar file-name-handler-alist-old file-name-handler-alist)

(setq package-enable-at-startup nil
      gnus-home-directory "~/Messages/Gnus/")

(add-to-list 'load-path "~/.emacs.d/lisp/org-mode/lisp")

#+end_src

* Functions

#+begin_src emacs-lisp
(eval-and-compile
  (defun emacs-path (path)
    (expand-file-name path user-emacs-directory))

  (defun lookup-password (host user port)
    (require 'auth-source)
    (require 'auth-source-pass)
    (let ((auth (auth-source-search :host host :user user :port port)))
      (if auth
          (let ((secretf (plist-get (car auth) :secret)))
            (if secretf
                (funcall secretf)
              (error "Auth entry for %s@%s:%s has no secret!"
                     user host port)))
        (error "No auth entry found for %s@%s:%s" user host port))))

  (defvar saved-window-configuration nil)

  (defun push-window-configuration ()
    (interactive)
    (push (current-window-configuration) saved-window-configuration))

  (defun pop-window-configuration ()
    (interactive)
    (let ((config (pop saved-window-configuration)))
      (if config
          (set-window-configuration config)
        (if (> (length (window-list)) 1)
            (delete-window)
          (bury-buffer)))))

  (defmacro atomic-modify-buffer (&rest body)
    `(let ((buf (current-buffer)))
       (save-window-excursion
         (with-temp-buffer
           (insert-buffer buf)
           ,@body
           (let ((temp-buf (current-buffer))
                 (inhibit-redisplay t))
             (with-current-buffer buf
               (let ((here (point)))
                 (save-excursion
                   (delete-region (point-min) (point-max))
                   (insert-buffer temp-buf))
                 (goto-char here))))))))

  (defun quickping (host)
    (= 0 (call-process "ping" nil nil nil "-c1" "-W50" "-q" host))))
#+end_src

* Environment

#+begin_src emacs-lisp
(eval-and-compile
  (defconst emacs-environment (getenv "NIX_MYENV_NAME"))

  (setq load-path
        (append '("~/.emacs.d")
                (delete-dups load-path)
                '("~/.emacs.d/lisp")))

  (defun filter (f args)
    (let (result)
      (dolist (arg args)
        (when (funcall f arg)
          (setq result (cons arg result))))
      (nreverse result)))

  (defun nix-read-environment (name)
    (ignore-errors
      (with-temp-buffer
        (insert-file-contents-literally
         (with-temp-buffer
           (insert-file-contents-literally
            (executable-find (concat "load-env-" name)))
           (and (re-search-forward "^source \\(.+\\)$" nil t)
                (match-string 1))))
        (and (or (re-search-forward "^  nativeBuildInputs=\"\\(.+?\\)\"" nil t)
                 (re-search-forward "^  buildInputs=\"\\(.+?\\)\"" nil t))
             (split-string (match-string 1))))))

  (add-to-list 'load-path "~/.emacs.d/lisp/use-package")
  (require 'use-package)

  (defconst load-path-reject-re "/\\.emacs\\.d/\\(lib\\|site-lisp\\)/"
    "Regexp matching `:load-path' values to be rejected.")

  (defun load-path-handler-override (_ name _ args rest state)
    (if (cl-some (apply-partially #'string-match load-path-reject-re) args)
        (use-package-process-keywords name rest state)
      (let ((body (use-package-process-keywords name rest state)))
        (use-package-concat
         (mapcar #'(lambda (path)
                     `(eval-and-compile (add-to-list 'load-path ,path t)))
                 args)
         body))))

  (advice-add 'use-package-handler/:load-path
              :around #'load-path-handler-override)

  (if init-file-debug
      (setq use-package-verbose t
            use-package-expand-minimally nil
            use-package-compute-statistics t
            debug-on-error t)
    (setq use-package-verbose nil
          use-package-expand-minimally t)))
#+end_src

* Settings

#+begin_src emacs-lisp
(eval-and-compile
  (defconst emacs-data-suffix
    (cond ((string= "emacsERC" emacs-environment) "alt")
          ((string-match "emacs2[6789]\\(.+\\)$" emacs-environment)
           (match-string 1 emacs-environment))))

  (defconst alternate-emacs (string= emacs-data-suffix "alt"))

  (defconst user-data-directory
    (emacs-path (if emacs-data-suffix
                    (format "data-%s" emacs-data-suffix)
                  "data")))

  (defun user-data (dir)
    (expand-file-name dir user-data-directory)))

(defvar Info-directory-list
  (mapcar 'expand-file-name
          (append
           (mapcar (apply-partially #'expand-file-name "share/info")
                   (nix-read-environment emacs-environment))
           '("~/.local/share/info"
             "~/.nix-profile/share/info"))))

(setq disabled-command-function nil) ;; enable all commands

(eval-when-compile
  ;; Disable all warnings about obsolete functions here.
  (dolist (sym '(flet lisp-complete-symbol))
    (setplist sym (use-package-plist-delete (symbol-plist sym)
                                            'byte-obsolete-info))))
#+end_src

** emacs

#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;; C source code
  (auto-hscroll-mode 'current-line)
  (auto-save-interval 64)
  (auto-save-timeout 2)
  (enable-recursive-minibuffers t)
  (file-name-handler-alist nil)
  (fill-column 78)
  (gc-cons-percentage 0.5)
  (gc-cons-threshold (* 128 1024 1024))
  (history-delete-duplicates t)
  (history-length 200)
  (load-prefer-newer t)
  (menu-bar-mode nil)
  (message-log-max 16384)
  (read-buffer-function 'ido-read-buffer)
  (redisplay-dont-pause t)
  (tool-bar-mode nil)
  (undo-limit 800000)
  (user-full-name "John Wiegley")
  (visible-bell t)
  (x-stretch-cursor t)

  (ns-alternate-modifier 'alt)
  (ns-command-modifier 'meta)
  (ns-function-modifier 'hyper)
  (ns-right-alternate-modifier 'alt)

  (frame-title-format
   '(:eval
     (concat
      (if buffer-file-name default-directory "%b")
      "    "
      (number-to-string
       (cdr
        (assq 'width
              (frame-parameters))))
      "x"
      (number-to-string
       (cdr
        (assq 'height
              (frame-parameters)))))))

  (completion-ignored-extensions
   '(".glob"
     ".vio"
     ".vo"
     ".vok"
     ".vos"
     ".v.d"
     ".o"
     "~"
     ".bin"
     ".lbin"
     ".so"
     ".a"
     ".ln"
     ".blg"
     ".bbl"
     ".elc"
     ".lof"
     ".glo"
     ".idx"
     ".lot"
     ".svn/"
     ".hg/"
     ".git/"
     ".bzr/"
     "CVS/"
     "_darcs/"
     "_MTN/"
     ".fmt"
     ".tfm"
     ".class"
     ".fas"
     ".lib"
     ".mem"
     ".x86f"
     ".sparcf"
     ".dfsl"
     ".pfsl"
     ".d64fsl"
     ".p64fsl"
     ".lx64fsl"
     ".lx32fsl"
     ".dx64fsl"
     ".dx32fsl"
     ".fx64fsl"
     ".fx32fsl"
     ".sx64fsl"
     ".sx32fsl"
     ".wx64fsl"
     ".wx32fsl"
     ".fasl"
     ".ufsl"
     ".fsl"
     ".dxl"
     ".lo"
     ".la"
     ".gmo"
     ".mo"
     ".toc"
     ".aux"
     ".cp"
     ".fn"
     ".ky"
     ".pg"
     ".tp"
     ".vr"
     ".cps"
     ".fns"
     ".kys"
     ".pgs"
     ".tps"
     ".vrs"
     ".pyc"
     ".pyo"))

  ;; startup.el
  (auto-save-list-file-prefix (user-data "auto-save-list/.saves-"))
  (inhibit-startup-echo-area-message "johnw")
  (inhibit-startup-screen t)
  (initial-buffer-choice t)
  (initial-major-mode 'fundamental-mode)
  (initial-scratch-message "")
  (user-mail-address "johnw@newartisans.com")

  ;; advice.el
  (ad-redefinition-action 'accept)

  ;; files.el
  (auto-save-file-name-transforms '(("\\`/[^/]*:.*" "/tmp" t)))
  (delete-old-versions t)
  (directory-abbrev-alist
   '(("\\`/org" . "/Users/johnw/doc/org")))
  (directory-free-space-args "-kh")
  (large-file-warning-threshold nil)
  (save-abbrevs 'silently)
  (trash-directory "~/.Trash")
  (version-control t)

  (safe-local-variable-values
   '((haskell-indent-spaces . 4)
     (haskell-indent-spaces . 2)
     (haskell-indentation-ifte-offset . 2)
     (haskell-indentation-layout-offset . 2)
     (haskell-indentation-left-offset . 2)
     (haskell-indentation-starter-offset . 2)
     (haskell-indentation-where-post-offset . 2)
     (haskell-indentation-where-pre-offset . 2)
     (after-save-hook check-parens quietly-read-abbrev-file)))
  (safe-local-eval-forms
   '((add-hook 'write-file-hooks 'time-stamp)
     (add-hook 'write-file-functions 'time-stamp)
     (add-hook 'before-save-hook 'time-stamp nil t)
     (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)
     (progn
       (let
           ((coq-root-directory
             (when buffer-file-name
               (locate-dominating-file buffer-file-name ".dir-locals.el")))
            (coq-project-find-file
             (and
              (boundp 'coq-project-find-file)
              coq-project-find-file)))
         (set
          (make-local-variable 'tags-file-name)
          (concat coq-root-directory "TAGS"))
         (setq camldebug-command-name
               (concat coq-root-directory "dev/ocamldebug-coq"))
         (unless coq-project-find-file
           (set
            (make-local-variable 'compile-command)
            (concat "make -C " coq-root-directory))
           (set
            (make-local-variable 'compilation-search-path)
            (cons coq-root-directory nil)))
         (when coq-project-find-file
           (setq default-directory coq-root-directory))))))

  ;; simple.el
  (backward-delete-char-untabify-method 'untabify)
  (column-number-mode t)
  (indent-tabs-mode nil)
  (kill-do-not-save-duplicates t)
  (kill-ring-max 500)
  (kill-whole-line t)
  (line-number-mode t)
  (next-line-add-newlines nil)
  (save-interprogram-paste-before-kill t)

  ;; bytecomp.el
  (byte-compile-verbose nil)

  ;; mule-cmds.el
  (current-language-environment "UTF-8")

  ;; (custom-buffer-done-function 'kill-buffer)
  ;; (default-major-mode 'text-mode)

  ;; prog-mode.el
  (prettify-symbols-unprettify-at-point 'right-edge)

  ;; scroll-bar.el
  (scroll-bar-mode nil)

  ;; paragraphs.el
  (sentence-end-double-space nil)

  ;; paren.el
  (show-paren-delay 0)

  ;; window.el
  (same-window-buffer-names
   '("*eshell*"
     "*shell*"
     "*mail*"
     "*inferior-lisp*"
     "*ielm*"
     "*scheme*"))
  (switch-to-buffer-preserve-window-point t)

  ;; warnings.el
  (warning-minimum-log-level :error)

  ;; frame.el
  (window-divider-default-bottom-width 1)
  (window-divider-default-places 'bottom-only)

  ;; nsm.el
  (nsm-settings-file (user-data "network-security.data"))

  ;; (cc-other-file-alist
  ;;  '(("\\.hs\\'"
  ;;     (".hs-boot"))
  ;;    ("\\.cc\\'"
  ;;     (".hh" ".h"))
  ;;    ("\\.hh\\'"
  ;;     (".cc" ".C"))
  ;;    ("\\.c\\'"
  ;;     (".h"))
  ;;    ("\\.h\\'"
  ;;     (".c" ".cc" ".C" ".CC" ".cxx" ".cpp"))
  ;;    ("\\.C\\'"
  ;;     (".H" ".hh" ".h"))
  ;;    ("\\.H\\'"
  ;;     (".C" ".CC"))
  ;;    ("\\.CC\\'"
  ;;     (".HH" ".H" ".hh" ".h"))
  ;;    ("\\.HH\\'"
  ;;     (".CC"))
  ;;    ("\\.c\\+\\+\\'"
  ;;     (".h++" ".hh" ".h"))
  ;;    ("\\.h\\+\\+\\'"
  ;;     (".c++"))
  ;;    ("\\.cpp\\'"
  ;;     (".hpp" ".hh" ".h"))
  ;;    ("\\.hpp\\'"
  ;;     (".cpp"))
  ;;    ("\\.cxx\\'"
  ;;     (".hxx" ".hh" ".h"))
  ;;    ("\\.hxx\\'"
  ;;     (".cxx"))))

  :custom-face
  (cursor ((t (:background "hotpink"))))
  (highlight ((t (:background "blue4"))))
  (minibuffer-prompt ((t (:foreground "grey80"))))
  (mode-line-inactive ((t (:background "grey95"))))
  (nobreak-space ((t nil)))
  (variable-pitch ((t (:height 1 :family "Bookerly"))))

  :config
  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p)

  (define-key input-decode-map [?\C-m] [C-m])

  (eval-and-compile
    (mapc #'(lambda (entry)
              (define-prefix-command (cdr entry))
              (bind-key (car entry) (cdr entry)))
          '(("C-,"   . my-ctrl-comma-map)
            ("<C-m>" . my-ctrl-m-map)

            ("C-h e" . my-ctrl-h-e-map)
            ("C-h x" . my-ctrl-h-x-map)

            ("C-c b" . my-ctrl-c-b-map)
            ("C-c e" . my-ctrl-c-e-map)
            ("C-c m" . my-ctrl-c-m-map)
            ("C-c n" . my-ctrl-c-m-map)
            ("C-c w" . my-ctrl-c-w-map)
            ("C-c y" . my-ctrl-c-y-map)
            ("C-c H" . my-ctrl-c-H-map)
            ("C-c N" . my-ctrl-c-N-map)
            ("C-c (" . my-ctrl-c-open-paren-map)
            ("C-c -" . my-ctrl-c-minus-map)
            ("C-c =" . my-ctrl-c-equals-map)
            ("C-c ." . my-ctrl-c-r-map)
            )))

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))

  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p))
#+end_src

* Libraries

#+begin_src emacs-lisp
(use-package anaphora      :defer t)
(use-package apiwrap       :defer t)
(use-package asoc          :defer t)
(use-package async         :defer t :load-path "lisp/async")
(use-package button-lock   :defer t)
(use-package ctable        :defer t)
(use-package dash          :defer t)
(use-package deferred      :defer t)
(use-package diminish      :demand t)
(use-package el-mock       :defer t)
(use-package elisp-refs    :defer t)
(use-package epc           :defer t)
(use-package epl           :defer t)
(use-package esxml         :defer t)
(use-package f             :defer t)
(use-package fn            :defer t)
(use-package fringe-helper :defer t)
(use-package fuzzy         :defer t)
(use-package ht            :defer t)
(use-package kv            :defer t)
(use-package list-utils    :defer t)
(use-package logito        :defer t)
(use-package loop          :defer t)
(use-package m-buffer      :defer t)
(use-package makey         :defer t)
(use-package marshal       :defer t)
(use-package names         :defer t)
(use-package noflet        :defer t)
(use-package oauth2        :defer t)
(use-package ov            :defer t)
(use-package packed        :defer t)
(use-package parent-mode   :defer t)
(use-package parsebib      :defer t)
(use-package parsec        :defer t)
(use-package peval         :defer t)
(use-package pfuture       :defer t)
(use-package pkg-info      :defer t)
(use-package popup         :defer t)
(use-package popup-pos-tip :defer t)
(use-package popwin        :defer t)
(use-package pos-tip       :defer t)
(use-package request       :defer t)
(use-package rich-minority :defer t)
(use-package s             :defer t)
(use-package simple-httpd  :defer t)
(use-package spinner       :defer t)
(use-package tablist       :defer t)
(use-package uuidgen       :defer t)
(use-package web           :defer t)
(use-package web-server    :defer t)
(use-package websocket     :defer t)
(use-package with-editor   :defer t)
(use-package xml-rpc       :defer t)
(use-package zoutline      :defer t)
#+end_src

** alert

#+begin_src emacs-lisp
(use-package alert
  :defer t
  :load-path "lisp/alert"
  :custom
  (alert-default-style 'fringe)
  (alert-notifier-command
   "~/Applications/Home Manager Apps/terminal-notifier.app/Contents/MacOS/terminal-notifier"))
#+end_src

** ghub

#+begin_src emacs-lisp
(use-package ghub
  :defer t
  :config
  (require 'auth-source-pass)
  (defvar my-ghub-token-cache nil)
  (advice-add
   'ghub--token :around
   #'(lambda (orig-func host username package &optional nocreate forge)
       (or my-ghub-token-cache
           (setq my-ghub-token-cache
                 (funcall orig-func host username package nocreate forge))))))
#+end_src

* Packages

** abbrev

#+begin_src emacs-lisp
(use-package abbrev
  :defer 5
  :diminish
  :hook
  ((text-mode prog-mode erc-mode LaTeX-mode) . abbrev-mode)
  (expand-load
   . (lambda ()
       (add-hook 'expand-expand-hook #'indent-according-to-mode)
       (add-hook 'expand-jump-hook #'indent-according-to-mode)))
  :custom
  (abbrev-file-name "~/.emacs.d/abbrevs.el")
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+end_src

** ace-jump-mode

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :defer t)
#+end_src

** ace-link

Currently, to jump to a link in an =Info-mode= or =help-mode= or =woman-mode= or
=org-mode= or =eww-mode= or =compilation-mode= or =goto-address-mode= buffer, you can
tab through the links to select the one you want. This is an O(N) operation,
where the N is the amount of links. This package turns this into an O(1)
operation, or at least O(log(N)) if you manage to squeeze thousands of links
in one screen. It does so by assigning a letter to each link using =avy=.

#+begin_src emacs-lisp
(use-package ace-link
  :disabled t
  :defer 10
  :bind ("C-c M-o" . ace-link-addr)
  :config
  (ace-link-setup-default)

  (add-hook 'org-mode-hook
            #'(lambda () (bind-key "C-c C-o" #'ace-link-org org-mode-map)))
  (add-hook 'gnus-summary-mode-hook
            #'(lambda () (bind-key "M-o" #'ace-link-gnus gnus-summary-mode-map)))
  (add-hook 'gnus-article-mode-hook
            #'(lambda () (bind-key "M-o" #'ace-link-gnus gnus-article-mode-map)))
  (add-hook 'ert-results-mode-hook
            #'(lambda () (bind-key "o" #'ace-link-help ert-results-mode-map)))
  (add-hook 'eww-mode-hook
            #'(lambda () (bind-key "f" #'ace-link-eww eww-mode-map))))
#+end_src

** ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :bind* ("<C-return>" . ace-window)
  :custom
  (aw-dispatch-when-more-than 6)
  (aw-scope 'frame))
#+end_src

** adoc-mode

#+begin_src emacs-lisp
(use-package adoc-mode
  :mode "\\.adoc\\'"
  :config
  (add-hook 'adoc-mode-hook
            #'(lambda ()
                (auto-fill-mode 1)
                ;; (visual-line-mode 1)
                ;; (visual-fill-column-mode 1)
                )))
#+end_src

** agda-input

#+begin_src emacs-lisp
(use-package agda-input
  :demand t
  :custom
  (default-input-method "Agda")
  (agda-input-tweak-all
   '(agda-input-compose (agda-input-prepend "\\") (agda-input-nonempty)))
  (agda-input-user-translations
   '(("^" "^")
     ("nat" "⟹")
     ("next" "◯")
     ("always" "□")
     ("aly" "□")
     ("even" "◇")
     ("evn" "◇")
     ("for" "△")
     ("mer" "▽")
     ("iso" "≅")
     ("miso" "≃")
     ("diag" "∆")
     ("whl" "⊳")
     ("whr" "⊲")))
  ;; :config
  ;; (setq-default default-input-method "Agda")
  ;; ;; (dolist (hook '(minibuffer-setup-hook
  ;; ;;                 fundamental-mode-hook
  ;; ;;                 text-mode-hook
  ;; ;;                 prog-mode-hook))
  ;; ;;   (add-hook hook #'(lambda () (set-input-method "Agda"))))
  )
#+end_src

** agda2-mode

#+begin_src emacs-lisp
(use-package agda2-mode
  :mode ("\\.agda\\'" "\\.lagda.md\\'")
  :bind (:map agda2-mode-map
              ("C-c C-i" . agda2-insert-helper-function))
  :custom
  (agda2-backend "MAlonzo")
  (agda2-include-dirs
   '("." "~/.nix-profile/share/agda-prelude" "~/.nix-profile/share/agda"))
  :preface
  (defun agda2-insert-helper-function (&optional prefix)
    (interactive "P")
    (let ((func-def (with-current-buffer "*Agda information*"
                      (buffer-string))))
      (save-excursion
        (forward-paragraph)
        (let ((name (car (split-string func-def " "))))
          (insert "  where\n    " func-def "    " name " x = ?\n")))))
  :init
  (advice-add 'agda2-mode
              :before #'direnv-update-directory-environment))
#+end_src

** aggressive-indent

#+begin_src emacs-lisp
(use-package aggressive-indent
  :diminish
  :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src

** align

#+begin_src emacs-lisp
(use-package align
  :bind (("M-["   . align-code)
         ("C-c [" . align-regexp))
  :commands align
  :custom
  (align-c++-modes '(csharp-mode c++-mode c-mode java-mode groovy-mode))
  (align-to-tab-stop nil)
  :preface
  (defun align-code (beg end &optional arg)
    (interactive "rP")
    (if (null arg)
        (align beg end)
      (let ((end-mark (copy-marker end)))
        (indent-region beg end-mark nil)
        (align beg end-mark)))))
#+end_src

** anki-editor

#+begin_src emacs-lisp
(use-package anki-editor
  :commands anki-editor-submit)
#+end_src

** ansi-color

#+begin_src emacs-lisp
(use-package ansi-color
  :defer t
  :custom
  (ansi-color-names-vector
   ["black" "red" "green" "brown" "blue" "magenta" "blue" "white"]))
#+end_src

** aria2

#+begin_src emacs-lisp
(use-package aria2
  :commands aria2-downloads-list)
#+end_src

** ascii

#+begin_src emacs-lisp
(use-package ascii
  :bind ("C-c e A" . ascii-toggle)
  :commands (ascii-on ascii-off)
  :preface
  (defun ascii-toggle ()
    (interactive)
    (if ascii-display
        (ascii-off)
      (ascii-on))))
#+end_src

** auctex

#+begin_src emacs-lisp
(use-package latex
  :mode ("\\.tex\\'" . TeX-latex-mode)
  :custom
  (TeX-PDF-mode t)
  (TeX-auto-save t)
  (TeX-auto-untabify t)
  (TeX-electric-escape t)
  (TeX-engine 'xetex)
  (TeX-parse-self t)
  (TeX-view-program-list
   '(("Skim"
      ("osascript" " ~/bin/skim-gotopage.script" " %O"
       (mode-io-correlate " %(outpage)")))))
  (TeX-view-program-selection
   '(((output-dvi style-pstricks)
      "dvips and gv")
     (output-dvi "xdvi")
     (output-pdf "Skim")
     (output-html "xdg-open")))
  :config
  (require 'preview)

  (info-lookup-add-help :mode 'LaTeX-mode
                        :regexp ".*"
                        :parse-rule "\\\\?[a-zA-Z]+\\|\\\\[^a-zA-Z]"
                        :doc-spec '(("(latex2e)Concept Index")
                                    ("(latex2e)Command Index")))

  (defvar latex-prettify-symbols-alist
    '(("\N{THIN SPACE}" . ?\⟷)))

  (bind-key "C-x SPC"
            #'(lambda ()
                (interactive)
                (insert "\N{THIN SPACE}"))
            LaTeX-mode-map)
  (bind-key "C-x A"
            #'(lambda ()
                (interactive)
                (insert "ٰ"))
            LaTeX-mode-map)
  (bind-key "A-َ"
            #'(lambda ()
                (interactive)
                (insert "ٰ"))
            LaTeX-mode-map)
  (bind-key "A-ه"
            #'(lambda ()
                (interactive)
                (insert "ۀ"))
            LaTeX-mode-map)
  (bind-key "A-د"
            #'(lambda ()
                (interactive)
                (insert "ذ"))
            LaTeX-mode-map)
  (bind-key "A-ت"
            #'(lambda ()
                (interactive)
                (insert "ة"))
            LaTeX-mode-map)

  (add-hook 'LaTeX-mode-hook
            #'(lambda
                ()
                (setq-local prettify-symbols-alist latex-prettify-symbols-alist)
                (prettify-symbols-mode 1)))

  (defun latex-help-get-cmd-alist ()    ;corrected version:
    "Scoop up the commands in the index of the latex info manual.
   The values are saved in `latex-help-cmd-alist' for speed."
    ;; mm, does it contain any cached entries
    (if (not (assoc "\\begin" latex-help-cmd-alist))
        (save-window-excursion
          (setq latex-help-cmd-alist nil)
          (Info-goto-node (concat latex-help-file "Command Index"))
          (goto-char (point-max))
          (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
            (let ((key (buffer-substring (match-beginning 1) (match-end 1)))
                  (value (buffer-substring (match-beginning 2)
                                           (match-end 2))))
              (add-to-list 'latex-help-cmd-alist (cons key value))))))
    latex-help-cmd-alist)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer))
#+end_src

** auth-source-pass

#+begin_src emacs-lisp
(use-package auth-source-pass
  :config
  (auth-source-pass-enable)

  (defvar auth-source-pass--cache (make-hash-table :test #'equal))

  (defun auth-source-pass--reset-cache ()
    (setq auth-source-pass--cache (make-hash-table :test #'equal)))

  (defun auth-source-pass--read-entry (entry)
    "Return a string with the file content of ENTRY."
    (run-at-time 45 nil #'auth-source-pass--reset-cache)
    (let ((cached (gethash entry auth-source-pass--cache)))
      (or cached
          (puthash
           entry
           (with-temp-buffer
             (insert-file-contents (expand-file-name
                                    (format "%s.gpg" entry)
                                    (getenv "PASSWORD_STORE_DIR")))
             (buffer-substring-no-properties (point-min) (point-max)))
           auth-source-pass--cache))))

  (defun auth-source-pass-entries ()
    "Return a list of all password store entries."
    (let ((store-dir (getenv "PASSWORD_STORE_DIR")))
      (mapcar
       (lambda (file) (file-name-sans-extension (file-relative-name file store-dir)))
       (directory-files-recursively store-dir "\.gpg$")))))
#+end_src

** autorevert

#+begin_src emacs-lisp
(use-package autorevert
  :defer 5
  :custom
  (global-auto-revert-mode t)
  (auto-revert-use-notify nil))
#+end_src

** auto-yasnippet

#+begin_src emacs-lisp
(use-package auto-yasnippet
  :after yasnippet
  :bind (("C-c y a" . aya-create)
         ("C-c y e" . aya-expand)
         ("C-c y o" . aya-open-line)))
#+end_src

** avy

#+begin_src emacs-lisp
(use-package avy
  :bind* ("C-'" . avy-goto-char-timer)
  :custom
  (avy-case-fold-search t)
  (avy-keys '(97 111 101 117 105 100 104 116 110 115))
  (avy-timeout-seconds 0.3)
  :config
  (avy-setup-default))
#+end_src

*** avy-zap

#+begin_src emacs-lisp
(use-package avy-zap
  :bind (("M-z" . avy-zap-to-char-dwim)
         ("M-Z" . avy-zap-up-to-char-dwim)))
#+end_src

** backup-each-save

Ever wish to go back to an older saved version of a file? Then this package is
for you. This package copies every file you save in Emacs to a backup
directory tree (which mirrors the tree structure of the filesystem), with a
timestamp suffix to make multiple saves of the same file unique. Never lose
old saved versions again.

#+begin_src emacs-lisp
(use-package backup-each-save
  :disabled t
  :commands backup-each-save
  :custom
  (make-backup-file-name-function 'my-make-backup-file-name)
  :preface
  (defun my-make-backup-file-name (file)
    (make-backup-file-name-1 (expand-file-name (file-truename file))))

  (defun backup-each-save-filter (filename)
    (not (string-match
          (concat "\\(^/tmp\\|\\.emacs\\.d/data\\(-alt\\)?/"
                  "\\|\\.newsrc\\(\\.eld\\)?\\|"
                  "\\(archive/sent/\\|recentf\\`\\)\\)")
          filename)))

  (defun my-dont-backup-files-p (filename)
    (unless (string-match filename "\\(archive/sent/\\|recentf\\`\\)")
      (normal-backup-enable-predicate filename)))

  :hook (after-save . backup-each-save)
  :config
  (setq backup-each-save-filter-function 'backup-each-save-filter
        backup-enable-predicate 'my-dont-backup-files-p))
#+end_src

** backup-walker

#+begin_src emacs-lisp
(use-package backup-walker
  :commands backup-walker-start)
#+end_src

** beacon

#+begin_src emacs-lisp
(use-package beacon
  :diminish
  :commands beacon-mode)
#+end_src

** biblio

#+begin_src emacs-lisp
(use-package biblio
  :commands biblio-lookup)
#+end_src

** bind-key

#+begin_src emacs-lisp
(use-package bind-key
  :defer t
  :custom
  (bind-key-segregation-regexp
   "\\`\\(\\(C-[chx.] \\|M-[gso] \\)\\([CM]-\\)?\\|.+-\\)"))
#+end_src

** bm

#+begin_src emacs-lisp
(use-package bm
  :unless alternate-emacs
  :bind (("C-c b b" . bm-toggle)
         ("C-c b n" . bm-next)
         ("C-c b p" . bm-previous))
  :commands (bm-repository-load
             bm-buffer-save
             bm-buffer-save-all
             bm-buffer-restore)
  :custom
  (bm-buffer-persistence t)
  (bm-cycle-all-buffers t)
  (bm-highlight-style 'bm-highlight-only-fringe)
  (bm-in-lifo-order t)
  (bm-repository-file (user-data "bm-repository"))
  :init
  (add-hook 'after-init-hook #'bm-repository-load)
  (add-hook 'find-file-hooks #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)
  (add-hook 'kill-buffer-hook #'bm-buffer-save)
  (add-hook 'after-save-hook #'bm-buffer-save)
  (add-hook 'vc-before-checkin-hook #'bm-buffer-save)
  (add-hook 'kill-emacs-hook #'(lambda nil
                                 (bm-buffer-save-all)
                                 (bm-repository-save))))
#+end_src

** bookmark

#+begin_src emacs-lisp
(use-package bookmark
  :defer 5
  :custom
  (bookmark-default-file "~/doc/bookmarks"))
#+end_src

*** bookmark+

#+begin_src emacs-lisp
(use-package bookmark+
  :after bookmark
  :bind ("M-B" . bookmark-bmenu-list)
  :commands bmkp-jump-dired
  :custom
  (bmkp-bmenu-commands-file (user-data "bmk-bmenu-commands.el"))
  (bmkp-bmenu-state-file (user-data "bmk-bmenu-state.el"))
  (bmkp-crosshairs-flag nil)
  (bmkp-last-as-first-bookmark-file "~/Documents/bookmarks"))
#+end_src

** boogie-friends

#+begin_src emacs-lisp
(use-package boogie-friends)
#+end_src

** browse-at-remote

#+begin_src emacs-lisp
(use-package browse-at-remote
  :bind ("C-c B" . browse-at-remote))
#+end_src

** browse-kill-ring

#+begin_src emacs-lisp
(use-package browse-kill-ring
  :defer 5
  :commands browse-kill-ring)
#+end_src

*** browse-kill-ring+

#+begin_src emacs-lisp
(use-package browse-kill-ring+
  :disabled t
  :after browse-kill-ring
  :config (browse-kill-ring-default-keybindings))
#+end_src

** browse-url

#+begin_src emacs-lisp
(use-package browse-url
  :defer 5
  :custom
  (browse-url-browser-function 'browse-url-default-macosx-browser))
#+end_src

** bytecomp-simplify

#+begin_src emacs-lisp
(use-package bytecomp-simplify
  :defer 15)
#+end_src

** c-includes

#+begin_src emacs-lisp
(use-package c-includes
  :disabled t
  :commands c-includes
  :after cc-mode
  :bind (:map c-mode-base-map
              ("C-c C-i"  . c-includes-current-file)))
#+end_src

** calc

#+begin_src emacs-lisp
(use-package calc
  :defer t
  :custom
  (math-additional-units
   '((GiB "1024 * MiB" "Giga Byte")
     (MiB "1024 * KiB" "Mega Byte")
     (KiB "1024 * B" "Kilo Byte")
     (B nil "Byte")
     (Gib "1024 * Mib" "Giga Bit")
     (Mib "1024 * Kib" "Mega Bit")
     (Kib "1024 * b" "Kilo Bit")
     (b "B / 8" "Bit")))
  :config
  (setq math-units-table nil))
#+end_src

** calendar

#+begin_src emacs-lisp
(use-package calendar
  :defer t
  :custom
  (calendar-daylight-time-zone-name "PDT")
  (calendar-latitude 38.5474883)
  (calendar-longitude -121.5262693)
  (calendar-mark-holidays-flag t)
  (calendar-standard-time-zone-name "PST")
  (calendar-time-zone -480)
  (diary-file "~/doc/diary")
  :init
  (setenv "TZ" "PST8PDT"))
#+end_src

*** holidays

#+begin_src emacs-lisp
(use-package holidays
  :defer t
  :custom
  (holiday-bahai-holidays nil))
#+end_src

** cargo

#+begin_src emacs-lisp
(use-package cargo
  :commands cargo-minor-mode
  :bind (:map cargo-mode-map
              ("C-c C-c C-y" . cargo-process-clippy))
  :custom
  (cargo-process--command-clippy "clippy")
  :config
  (defadvice cargo-process-clippy
      (around my-cargo-process-clippy activate)
    (let ((cargo-process--command-flags
           (concat cargo-process--command-flags
                   "--all-targets "
                   "--all-features "
                   "-- "
                   "-D warnings "
                   "-D clippy::all "
                   "-D clippy::mem_forget "
                   "-C debug-assertions=off")))
      ad-do-it))

  (defun cargo-fix ()
    (interactive)
    (async-shell-command
     (concat "cargo fix"
             " --clippy --tests --benches --allow-dirty --allow-staged"))))
#+end_src

** cc-mode

#+begin_src emacs-lisp
(use-package cc-mode
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'" . c-mode)
         ("\\.mm\\'" . c++-mode))
  :bind (:map c++-mode-map
              ("<" . self-insert-command)
              (">" . self-insert-command))
  :bind (:map c-mode-base-map
              ("#" . self-insert-command)
              ("{" . self-insert-command)
              ("}" . self-insert-command)
              ("/" . self-insert-command)
              ("*" . self-insert-command)
              (";" . self-insert-command)
              ("," . self-insert-command)
              (":" . self-insert-command)
              ("(" . self-insert-command)
              (")" . self-insert-command)
              ("<return>" . newline-and-indent)
              ("M-q" . c-fill-paragraph)
              ("M-j"))
  :custom
  (c-default-style '((java-mode . "gnu") (awk-mode . "awk") (other . "gnu")))
  :preface
  (defun my-c-mode-common-hook ()
    (require 'flycheck)
    (flycheck-mode 1)

    (setq-local flycheck-check-syntax-automatically nil)
    (setq-local flycheck-highlighting-mode nil)

    (set (make-local-variable 'parens-require-spaces) nil)

    (let ((bufname (buffer-file-name)))
      (when bufname
        (cond
         ((string-match "/ledger/" bufname)
          (c-set-style "ledger"))
         ((string-match "/edg/" bufname)
          (c-set-style "edg"))
         (t
          (c-set-style "clang")))))

    (font-lock-add-keywords
     'c++-mode '(("\\<\\(assert\\|DEBUG\\)(" 1 font-lock-warning-face t))))

  :hook (c-mode-common . my-c-mode-common-hook)
  :config
  (add-to-list
   'c-style-alist
   '("edg"
     (indent-tabs-mode . nil)
     (c-basic-offset . 2)
     (c-comment-only-line-offset . (0 . 0))
     (c-hanging-braces-alist
      . ((substatement-open before after)
         (arglist-cont-nonempty)))
     (c-offsets-alist
      . ((statement-block-intro . +)
         (knr-argdecl-intro . 5)
         (substatement-open . 0)
         (substatement-label . 0)
         (label . 0)
         (case-label . +)
         (statement-case-open . 0)
         (statement-cont . +)
         (arglist-intro . +)
         (arglist-close . +)
         (inline-open . 0)
         (brace-list-open . 0)
         (topmost-intro-cont
          . (first c-lineup-topmost-intro-cont
                   c-lineup-gnu-DEFUN-intro-cont))))
     (c-special-indent-hook . c-gnu-impose-minimum)
     (c-block-comment-prefix . "")))

  (add-to-list
   'c-style-alist
   '("ledger"
     (indent-tabs-mode . nil)
     (c-basic-offset . 2)
     (c-comment-only-line-offset . (0 . 0))
     (c-hanging-braces-alist
      . ((substatement-open before after)
         (arglist-cont-nonempty)))
     (c-offsets-alist
      . ((statement-block-intro . +)
         (knr-argdecl-intro . 5)
         (substatement-open . 0)
         (substatement-label . 0)
         (label . 0)
         (case-label . 0)
         (statement-case-open . 0)
         (statement-cont . +)
         (arglist-intro . +)
         (arglist-close . +)
         (inline-open . 0)
         (brace-list-open . 0)
         (topmost-intro-cont
          . (first c-lineup-topmost-intro-cont
                   c-lineup-gnu-DEFUN-intro-cont))))
     (c-special-indent-hook . c-gnu-impose-minimum)
     (c-block-comment-prefix . "")))

  (add-to-list
   'c-style-alist
   '("clang"
     (indent-tabs-mode . nil)
     (c-basic-offset . 2)
     (c-comment-only-line-offset . (0 . 0))
     (c-hanging-braces-alist
      . ((substatement-open before after)
         (arglist-cont-nonempty)))
     (c-offsets-alist
      . ((statement-block-intro . +)
         (knr-argdecl-intro . 5)
         (substatement-open . 0)
         (substatement-label . 0)
         (label . 0)
         (case-label . 0)
         (statement-case-open . 0)
         (statement-cont . +)
         (arglist-intro . +)
         (arglist-close . +)
         (inline-open . 0)
         (brace-list-open . 0)
         (topmost-intro-cont
          . (first c-lineup-topmost-intro-cont
                   c-lineup-gnu-DEFUN-intro-cont))))
     (c-special-indent-hook . c-gnu-impose-minimum)
     (c-block-comment-prefix . ""))))
#+end_src

** centered-cursor-mode

#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :commands centered-cursor-mode)
#+end_src

** change-inner

#+begin_src emacs-lisp
(use-package change-inner
  :bind (("M-i"     . change-inner)
         ("M-o M-o" . change-outer)))
#+end_src

** chess

#+begin_src emacs-lisp
(use-package chess
  :load-path "lisp/chess"
  :commands chess)
#+end_src

*** chess-ics

#+begin_src emacs-lisp
(use-package chess-ics
  :after chess
  :commands chess-ics
  :config
  (defun chess ()
    (interactive)
    (chess-ics "freechess.org" 5000 "jwiegley"
               (lookup-password "freechess.org" "jwiegley" 80))))
#+end_src

** cl-info

#+begin_src emacs-lisp
(use-package cl-info
  ;; jww (2017-12-10): Need to configure.
  :disabled t)
#+end_src

** cmake-mode

#+begin_src emacs-lisp
(use-package cmake-mode
  :mode ("CMakeLists.txt" "\\.cmake\\'"))
#+end_src

*** cmake-font-lock

#+begin_src emacs-lisp
(use-package cmake-font-lock
  :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

** col-highlight

#+begin_src emacs-lisp
(use-package col-highlight
  :commands col-highlight-mode)
#+end_src

** color-moccur

#+begin_src emacs-lisp
(use-package color-moccur
  :commands (isearch-moccur isearch-all isearch-moccur-all)
  :bind (("M-s O" . moccur)
         :map isearch-mode-map
         ("M-o" . isearch-moccur)
         ("M-O" . isearch-moccur-all))
  :custom
  (moccur-following-mode-toggle nil))
#+end_src

** command-log-mode

#+begin_src emacs-lisp
(use-package command-log-mode
  :bind (("C-c e M" . command-log-mode)
         ("C-c e L" . clm/open-command-log-buffer)))
#+end_src

** compile

#+begin_src emacs-lisp
(use-package compile
  :no-require
  :bind (("C-c c" . compile)
         ("M-O"   . show-compilation))
  :bind (:map compilation-mode-map
              ("z" . delete-window))
  :custom
  (compilation-always-kill t)
  (compilation-ask-about-save nil)
  (compilation-context-lines 10)
  (compilation-scroll-output 'first-error)
  (compilation-skip-threshold 2)
  (compilation-window-height 100)
  :preface
  (defun show-compilation ()
    (interactive)
    (let ((it
           (catch 'found
             (dolist (buf (buffer-list))
               (when (string-match "\\*compilation\\*" (buffer-name buf))
                 (throw 'found buf))))))
      (if it
          (display-buffer it)
        (call-interactively 'compile))))

  (defun compilation-ansi-color-process-output ()
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker)))

  :hook (compilation-filter . compilation-ansi-color-process-output))
#+end_src

** copy-as-format

#+begin_src emacs-lisp
(use-package copy-as-format
  :bind (("C-c w m" . copy-as-format-markdown)
         ("C-c w g" . copy-as-format-slack)
         ("C-c w o" . copy-as-format-org-mode)
         ("C-c w r" . copy-as-format-rst)
         ("C-c w s" . copy-as-format-github)
         ("C-c w w" . copy-as-format))
  :init
  (setq copy-as-format-default "github"))
#+end_src

** crosshairs

#+begin_src emacs-lisp
(use-package crosshairs
  :bind ("M-o c" . crosshairs-mode))
#+end_src

** crux

#+begin_src emacs-lisp
(use-package crux
  :bind ("C-c e i" . crux-find-user-init-file))
#+end_src

** css-mode

#+begin_src emacs-lisp
(use-package css-mode
  :mode "\\.css\\'")
#+end_src

** csv-mode

#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (defun csv-remove-commas ()
    (interactive)
    (goto-char (point-min))
    (while (re-search-forward "\"\\([^\"]+\\)\"" nil t)
      (replace-match (replace-regexp-in-string "," "" (match-string 1)))))

  (defun maybe-add (x y)
    (if (equal x "")
        (if (equal y "")
            ""
          y)
      (if (equal y "")
          x
        (format "%0.2f" (+ (string-to-number x) (string-to-number y))))))

  (defun parse-desc (desc)
    (cond
     ((string-match "\\(BOT \\+\\|SOLD -\\)\\([0-9]+\\) \\(.+\\) @\\([0-9.]+\\)\\( .+\\)?" desc)
      (list (match-string 1 desc)
            (match-string 2 desc)
            (match-string 3 desc)
            (match-string 4 desc)
            (match-string 5 desc)))))

  (defun maybe-add-descs (x y)
    (let ((x-info (parse-desc x))
          (y-info (parse-desc y)))
      (and (string= (nth 0 x-info) (nth 0 y-info))
           (string= (nth 2 x-info) (nth 2 y-info))
           (string= (nth 3 x-info) (nth 3 y-info))
           (format "%s%d %s @%s%s"
                   (nth 0 y-info)
                   (+ (string-to-number (nth 1 x-info))
                      (string-to-number (nth 1 y-info)))
                   (nth 2 y-info)
                   (nth 3 y-info)
                   (or (nth 4 y-info) "")))))

  (defun csv-merge-lines ()
    (interactive)
    (goto-char (line-beginning-position))
    (let ((start (point-marker))
          (fields-a (csv--collect-fields (line-end-position))))
      (forward-line 1)
      (let ((fields-b (csv--collect-fields (line-end-position))))
        (when (string= (nth 3 fields-a) (nth 3 fields-b))
          (let ((desc (maybe-add-descs (nth 4 fields-a) (nth 4 fields-b))))
            (when desc
              (delete-region start (line-end-position))
              (setcar (nthcdr 4 fields-b) desc)
              (setcar (nthcdr 5 fields-b)
                      (maybe-add (nth 5 fields-a) (nth 5 fields-b)))
              (setcar (nthcdr 6 fields-b)
                      (maybe-add (nth 6 fields-a) (nth 6 fields-b)))
              (setcar (nthcdr 7 fields-b)
                      (maybe-add (nth 7 fields-a) (nth 7 fields-b)))
              (insert (mapconcat #'identity fields-b ","))
              (forward-char 1)
              (forward-line -1))))))))
#+end_src

** cursor-chg

#+begin_src emacs-lisp
(use-package cursor-chg
  :commands change-cursor-mode
  :config
  (change-cursor-mode 1)
  (toggle-cursor-type-when-idle 1))
#+end_src

** cus-edit

#+begin_src emacs-lisp
(use-package cus-edit
  :bind (("C-c o" . customize-option)
         ("C-c O" . customize-group)
         ("C-c F" . customize-face))
  :custom
  (custom-file "~/.emacs.d/settings.el")
  (custom-raised-buttons nil)
  (custom-safe-themes
   '("644e23f289dcd3548c3f054785c72cf1fd81fcee07875ac7fed311985a67a0dc"
     "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223"
     "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa"
     "b9e9ba5aeedcc5ba8be99f1cc9301f6679912910ff92fdf7980929c2fc83ab4d"
     "84d2f9eeb3f82d619ca4bfffe5f157282f4779732f48a5ac1484d94d5ff5b279"
     "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e"
     default)))
#+end_src

** dabbrev

#+begin_src emacs-lisp
;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/"   . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-case-fold-search nil)
  (dabbrev-case-replace nil)
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** dafny-mode

#+begin_src emacs-lisp
(use-package dafny-mode
  :bind (:map dafny-mode-map
              ("M-n" . flycheck-next-error)
              ("M-p" . flycheck-previous-error))
  :custom
  (dafny-prover-args '("/compile:0" "/vcsCores:4"))
  (dafny-prover-background-args
   '("/timeLimit:20" "/autoTriggers:1" "/printTooltips" "/vcsCores:4")))
#+end_src

** debbugs-gnu

#+begin_src emacs-lisp
(use-package debbugs-gnu
  :disabled t
  :commands (debbugs-gnu debbugs-gnu-search)
  :bind ("C-c #" . gnus-read-ephemeral-emacs-bug-group))
#+end_src

** deadgrep

#+begin_src emacs-lisp
(use-package deadgrep
  :bind ("M-s R" . deadgrep))
#+end_src

** dedicated

#+begin_src emacs-lisp
(use-package dedicated
  :bind ("C-c W" . dedicated-mode))
#+end_src

** diff-hl

[[https://github.com/dgutov/diff-hl][diff-hl]] highlights uncommitted changes on the left side of the window (area
also known as the "gutter"), and allows you to jump between and revert them
selectively.

In buffers controlled by Git, you can also stage and unstage the changes.

#+begin_src emacs-lisp
(use-package diff-hl
  :commands (diff-hl-mode diff-hl-dired-mode)
  :hook (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src

*** diff-hl-flydiff

This mode enables diffing on-the-fly (i.e. without saving the buffer first)
Toggle in all buffers with =M-x diff-hl-flydiff-mode=. This is part of the
diff-hl package.

#+begin_src emacs-lisp
(use-package diff-hl-flydiff
  :commands diff-hl-flydiff-mode)
#+end_src

** diff-mode

#+begin_src emacs-lisp
(use-package diff-mode
  :commands diff-mode
  :custom
  (diff-mode-hook '(diff-delete-empty-files diff-make-unified smerge-mode))
  :custom-face
  (diff-added ((((background dark)) (:foreground "#FFFF9B9BFFFF"))
               (t (:foreground "DarkGreen"))))
  (diff-changed ((((background dark)) (:foreground "Yellow"))
                 (t (:foreground "MediumBlue"))))
  (diff-context ((((background dark)) (:foreground "White"))
                 (t (:foreground "Black"))))
  (diff-file-header ((((background dark)) (:foreground "Cyan" :background "Black"))
                     (t (:foreground "Red" :background "White"))))
  (diff-header ((((background dark)) (:foreground "Cyan"))
                (t (:foreground "Red"))))
  (diff-index ((((background dark)) (:foreground "Magenta"))
               (t (:foreground "Green"))))
  (diff-nonexistent ((((background dark)) (:foreground "#FFFFFFFF7474"))
                     (t (:foreground "DarkBlue")))))
#+end_src

** diffview

#+begin_src emacs-lisp
(use-package diffview
  :commands (diffview-current diffview-region diffview-message))
#+end_src

** dired

#+begin_src emacs-lisp
(use-package dired
  :bind ("C-c j" . dired-two-pane)
  :bind (:map dired-mode-map
              ("j"     . dired)
              ("z"     . pop-window-configuration)
              ("e"     . ora-ediff-files)
              ("l"     . dired-up-directory)
              ("q"     . pop-window-configuration)
              ("Y"     . ora-dired-rsync)
              ("M-!"   . shell-command)
              ("<tab>" . dired-next-window)
              ("M-G")
              ("M-s f"))
  :diminish dired-omit-mode
  :hook (dired-mode . dired-hide-details-mode)
  :custom
  (dired-clean-up-buffers-too nil)
  (dired-dwim-target t)
  (dired-hide-details-hide-information-lines nil)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "--group-directories-first -lah")
  (dired-no-confirm
   '(byte-compile chgrp chmod chown copy hardlink symlink touch))
  (dired-omit-mode nil t)
  (dired-omit-size-limit 60000)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  :preface
  (defun dired-two-pane ()
    (interactive)
    (push-window-configuration)
    (let ((here default-directory))
      (delete-other-windows)
      (dired "~/dl")
      (split-window-horizontally)
      (dired here)))

  (defun dired-next-window ()
    (interactive)
    (let ((next (car (cl-remove-if-not #'(lambda (wind)
                                           (with-current-buffer (window-buffer wind)
                                             (eq major-mode 'dired-mode)))
                                       (cdr (window-list))))))
      (when next
        (select-window next))))

  (defvar mark-files-cache (make-hash-table :test #'equal))

  (defun mark-similar-versions (name)
    (let ((pat name))
      (if (string-match "^\\(.+?\\)-[0-9._-]+$" pat)
          (setq pat (match-string 1 pat)))
      (or (gethash pat mark-files-cache)
          (ignore (puthash pat t mark-files-cache)))))

  (defun dired-mark-similar-version ()
    (interactive)
    (setq mark-files-cache (make-hash-table :test #'equal))
    (dired-mark-sexp '(mark-similar-versions name)))

  (defun ora-dired-rsync (dest)
    (interactive
     (list
      (expand-file-name
       (read-file-name "Rsync to: " (dired-dwim-target-directory)))))
    (let ((files (dired-get-marked-files
                  nil current-prefix-arg))
          (tmtxt/rsync-command "rsync -aP "))
      (dolist (file files)
        (setq tmtxt/rsync-command
              (concat tmtxt/rsync-command
                      (shell-quote-argument file)
                      " ")))
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument dest)))
      (async-shell-command tmtxt/rsync-command "*rsync*")
      (other-window 1)))

  (defun ora-ediff-files ()
    (interactive)
    (let ((files (dired-get-marked-files))
          (wnd (current-window-configuration)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "file: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (ediff-files file2 file1)
              (ediff-files file1 file2))
            (add-hook 'ediff-after-quit-hook-internal
                      `(lambda ()
                         (setq ediff-after-quit-hook-internal nil)
                         (set-window-configuration ,wnd))))
        (error "no more than 2 files should be marked"))))

  :config
  (add-hook 'dired-mode-hook
            #'(lambda () (bind-key "M-G" #'switch-to-gnus dired-mode-map))))
#+end_src

*** dired-toggle

#+begin_src emacs-lisp
(use-package dired-toggle
  :bind ("C-c ~" . dired-toggle)
  :preface
  (defun my-dired-toggle-mode-hook ()
    (interactive)
    (visual-line-mode 1)
    (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
    (setq-local word-wrap nil))
  :hook (dired-toggle-mode . my-dired-toggle-mode-hook))
#+end_src

*** dired-x

#+begin_src emacs-lisp
(use-package dired-x
  :after dired
  :config
  ;; (defvar dired-omit-regexp-orig (symbol-function 'dired-omit-regexp))

  ;; ;; Omit files that Git would ignore
  ;; (defun dired-omit-regexp ()
  ;;   (let ((file (expand-file-name ".git"))
  ;;         parent-dir)
  ;;     (while (and (not (file-exists-p file))
  ;;                 (progn
  ;;                   (setq parent-dir
  ;;                         (file-name-directory
  ;;                          (directory-file-name
  ;;                           (file-name-directory file))))
  ;;                   ;; Give up if we are already at the root dir.
  ;;                   (not (string= (file-name-directory file)
  ;;                                 parent-dir))))
  ;;       ;; Move up to the parent dir and try again.
  ;;       (setq file (expand-file-name ".git" parent-dir)))
  ;;     ;; If we found a change log in a parent, use that.
  ;;     (if (file-exists-p file)
  ;;         (let ((regexp (funcall dired-omit-regexp-orig))
  ;;               (omitted-files
  ;;                (shell-command-to-string "git clean -d -x -n")))
  ;;           (if (= 0 (length omitted-files))
  ;;               regexp
  ;;             (concat
  ;;              regexp
  ;;              (if (> (length regexp) 0)
  ;;                  "\\|" "")
  ;;              "\\("
  ;;              (mapconcat
  ;;               #'(lambda (str)
  ;;                   (concat
  ;;                    "^"
  ;;                    (regexp-quote
  ;;                     (substring str 13
  ;;                                (if (= ?/ (aref str (1- (length str))))
  ;;                                    (1- (length str))
  ;;                                  nil)))
  ;;                    "$"))
  ;;               (split-string omitted-files "\n" t)
  ;;               "\\|")
  ;;              "\\)")))
  ;;       (funcall dired-omit-regexp-orig))))
  )
#+end_src

*** dired+

#+begin_src emacs-lisp
(use-package dired+
  :after dired-x
  :custom-face
  (diredp-dir-name ((t (:foreground "blue"))))
  (diredp-file-name ((t nil)))
  (diredp-file-suffix ((t (:foreground "lightgreen"))))
  :config
  (defun dired-do-delete (&optional arg)  ; Bound to `D'
    "Delete all marked (or next ARG) files.
NOTE: This deletes the marked (`*'), not the flagged (`D'), files.

User option `dired-recursive-deletes' controls whether deletion of
non-empty directories is allowed.

ARG is the prefix argument.

As an exception, if ARG is zero then delete the marked files, but with
the behavior specified by option `delete-by-moving-to-trash' flipped."
    (interactive "P")
    (let* ((flip                       (zerop (prefix-numeric-value arg)))
           (delete-by-moving-to-trash  (and (boundp 'delete-by-moving-to-trash)  (if flip
                                                                                     (not delete-by-moving-to-trash)
                                                                                   delete-by-moving-to-trash)))
           (markers                    ()))
      (when flip (setq arg  nil))
      (diredp-internal-do-deletions
       (nreverse
        ;; This can move point if ARG is an integer.
        (dired-map-over-marks (cons (dired-get-filename) (let ((mk  (point-marker)))
                                                           (push mk markers)
                                                           mk))
                              arg))
       arg
       t)          ; Gets ANDed anyway with `delete-by-moving-to-trash'.
      (dolist (mk  markers) (set-marker mk nil))))

  (defun dired-do-flagged-delete (&optional no-msg) ; Bound to `x'
    "In Dired, delete the files flagged for deletion.
NOTE: This deletes flagged, not marked, files.
If arg NO-MSG is non-nil, no message is displayed.

User option `dired-recursive-deletes' controls whether deletion of
non-empty directories is allowed."
    (interactive)
    (let* ((dired-marker-char  dired-del-marker)
           (regexp             (dired-marker-regexp))
           (case-fold-search   nil)
           (markers            ()))
      (if (save-excursion (goto-char (point-min)) (re-search-forward regexp nil t))
          (diredp-internal-do-deletions
           (nreverse
            ;; This cannot move point since last arg is nil.
            (dired-map-over-marks (cons (dired-get-filename) (let ((mk  (point-marker)))
                                                               (push mk markers)
                                                               mk))
                                  nil))
           nil
           'USE-TRASH-CAN)             ; This arg is for Emacs 24+ only.
        (dolist (mk  markers) (set-marker mk nil))
        (unless no-msg (message "(No deletions requested.)"))))))
#+end_src

*** dired-rsync

#+begin_src emacs-lisp
(use-package dired-rsync
  :after dired+
  :config
  (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+end_src

** direnv

#+begin_src emacs-lisp
(use-package direnv
  :demand t
  :preface
  (defun patch-direnv-environment (&rest _args)
    (setenv "PATH" (concat emacs-binary-path ":" (getenv "PATH")))
    (setq exec-path (cons (file-name-as-directory emacs-binary-path)
                          exec-path)))
  :init
  (defconst emacs-binary-path (directory-file-name
                               (file-name-directory
                                (executable-find "emacsclient"))))
  :config
  (defvar flycheck-executable-for-buffer (make-hash-table :test #'equal))
  (defun locate-flycheck-executable (cmd)
    ;; (add-hook 'post-command-hook #'direnv--maybe-update-environment)
    (let ((exe (gethash (cons cmd (buffer-name))
                        flycheck-executable-for-buffer)))
      (if exe
          exe
        (direnv-update-environment default-directory)
        (let ((exe (executable-find cmd)))
          (puthash (cons cmd (buffer-name)) exe
                   flycheck-executable-for-buffer)))))
  (eval-after-load 'flycheck
    '(setq flycheck-executable-find #'locate-flycheck-executable))
  (add-hook 'coq-mode-hook
            #'(lambda ()
                ;; (add-hook 'post-command-hook #'direnv--maybe-update-environment)
                (direnv-update-environment default-directory)))
  (advice-add 'direnv-update-directory-environment
              :after #'patch-direnv-environment)
  (add-hook 'git-commit-mode-hook #'patch-direnv-environment)
  (add-hook 'magit-status-mode-hook #'patch-direnv-environment)
  (defvar my-direnv-last-buffer nil)
  (defun update-on-buffer-change ()
    (unless (eq (current-buffer) my-direnv-last-buffer)
      (setq my-direnv-last-buffer (current-buffer))
      (direnv-update-environment default-directory)))
  (add-hook 'post-command-hook #'update-on-buffer-change))
#+end_src

** discover-my-major

#+begin_src emacs-lisp
(use-package discover-my-major
  :bind (("C-h <C-m>" . discover-my-major)
         ("C-h M-m"   . discover-my-mode)))
#+end_src

** docker

#+begin_src emacs-lisp
(use-package docker
  :bind ("C-c d" . docker)
  :diminish
  :init
  (use-package docker-image     :commands docker-images)
  (use-package docker-volume    :commands docker-volumes)
  (use-package docker-network   :commands docker-containers)
  (use-package docker-machine   :commands docker-machines)
  (use-package docker-compose   :commands docker-compose)

  (use-package docker-container
    :commands docker-containers
    :custom
    (docker-containers-shell-file-name "/bin/bash")
    (docker-containers-show-all nil)))
#+end_src

*** docker-compose-mode

#+begin_src emacs-lisp
(use-package docker-compose-mode
  :mode "docker-compose.*\.yml\\'")
#+end_src

*** docker-tramp

#+begin_src emacs-lisp
(use-package docker-tramp
  :after tramp
  :defer 5)
#+end_src

*** dockerfile-mode

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile[a-zA-Z.-]*\\'")
#+end_src

** doc-view

#+begin_src emacs-lisp
(use-package doc-view
  :defer 5
  :custom
  (doc-view-resolution 300))
#+end_src

** doxymacs

#+begin_src emacs-lisp
(use-package doxymacs
  :disabled t
  :commands (doxymacs-mode doxymacs-font-lock)
  :config
  (doxymacs-mode 1)
  (doxymacs-font-lock))
#+end_src

** dumb-jump

#+begin_src emacs-lisp
(use-package dumb-jump
  :hook ((coq-mode haskell-mode) . dumb-jump-mode))
#+end_src

** ebdb-com

#+begin_src emacs-lisp
(use-package ebdb-com
  :commands ebdb)
#+end_src

** edbi

#+begin_src emacs-lisp
(use-package edbi
  :commands edbi:sql-mode)
#+end_src

** ediff

#+begin_src emacs-lisp
(use-package ediff
  :bind (("C-c = b" . ediff-buffers)
         ("C-c = B" . ediff-buffers3)
         ("C-c = c" . compare-windows)
         ("C-c = =" . ediff-files)
         ("C-c = f" . ediff-files)
         ("C-c = F" . ediff-files3)
         ("C-c = m" . count-matches)
         ("C-c = r" . ediff-revision)
         ("C-c = p" . ediff-patch-file)
         ("C-c = P" . ediff-patch-buffer)
         ("C-c = l" . ediff-regions-linewise)
         ("C-c = w" . ediff-regions-wordwise))
  :custom
  (ediff-combination-pattern
   '("<<<<<<< A: HEAD" A "||||||| Ancestor" Ancestor "=======" B ">>>>>>> B: Incoming"))
  (ediff-diff-options "-w")
  (ediff-highlight-all-diffs nil)
  (ediff-show-clashes-only t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  :custom-face
  (ediff-current-diff-C ((t (:extend t :background "#222200"))))
  :init
  (defun test-compare ()
    (interactive)
    (delete-other-windows)
    (let ((here (point)))
      (search-forward "got:")
      (split-window-below)
      (goto-char here))
    (search-forward "expected:")
    (call-interactively #'compare-windows))

  (defun test-ediff ()
    (interactive)
    (goto-char (point-min))
    (search-forward "expected:")
    (forward-line 1)
    (goto-char (line-beginning-position))
    (let ((begin (point)))
      (search-forward "(")
      (goto-char (match-beginning 0))
      (forward-sexp)
      (let ((text (buffer-substring begin (point)))
            (expected (get-buffer-create "*expected*")))
        (with-current-buffer expected
          (erase-buffer)
          (insert text))
        (let ((here (point)))
          (search-forward "got:")
          (forward-line 1)
          (goto-char (line-beginning-position))
          (setq begin (point))
          (search-forward "(")
          (goto-char (match-beginning 0))
          (forward-sexp)
          (setq text (buffer-substring begin (point)))
          (let ((got (get-buffer-create "*got*")))
            (with-current-buffer got
              (erase-buffer)
              (insert text))
            (ediff-buffers expected got)))))))
#+end_src

*** ediff-keep

#+begin_src emacs-lisp
(use-package ediff-keep
  :after ediff)
#+end_src

** edit-env

#+begin_src emacs-lisp
(use-package edit-env
  :commands edit-env)
#+end_src

** edit-indirect

#+begin_src emacs-lisp
(use-package edit-indirect
  :bind (("C-c '" . edit-indirect-region)))
#+end_src

** edit-rectangle

#+begin_src emacs-lisp
(use-package edit-rectangle
  :bind ("C-x r e" . edit-rectangle))
#+end_src

** edit-server

#+begin_src emacs-lisp
(use-package edit-server
  :if (and window-system
           (not alternate-emacs))
  :defer 5
  :custom
  (edit-server-new-frame nil)
  :config
  (edit-server-start))
#+end_src

** edit-var

#+begin_src emacs-lisp
(use-package edit-var
  :bind ("C-c e v" . edit-variable))
#+end_src

** eglot

#+begin_src emacs-lisp
(use-package eglot
  :if dot-emacs-use-eglot
  :commands eglot
  :custom
  (eglot-autoshutdown t)
  :config
  ;; (add-to-list 'eglot-server-programs '(rust-mode "rust-analyzer"))
  (defvar flymake-list-only-diagnostics nil)
  (defun project-root (project)
    (car (project-roots project))))
#+end_src

** eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :diminish
  :hook ((c-mode-common emacs-lisp-mode) . eldoc-mode)
  :custom
  (eldoc-echo-area-use-multiline-p 3))
#+end_src

** electric

#+begin_src emacs-lisp
(use-package electric
  :defer t
  :custom
  (electric-indent-mode nil))
#+end_src

** elint

#+begin_src emacs-lisp
(use-package elint
  :commands (elint-initialize elint-current-buffer)
  :bind ("C-c e E" . my-elint-current-buffer)
  :preface
  (defun my-elint-current-buffer ()
    (interactive)
    (elint-initialize)
    (elint-current-buffer))
  :config
  (add-to-list 'elint-standard-variables 'current-prefix-arg)
  (add-to-list 'elint-standard-variables 'command-line-args-left)
  (add-to-list 'elint-standard-variables 'buffer-file-coding-system)
  (add-to-list 'elint-standard-variables 'emacs-major-version)
  (add-to-list 'elint-standard-variables 'window-system))
#+end_src

** elisp-depend

#+begin_src emacs-lisp
(use-package elisp-depend
  :commands elisp-depend-print-dependencies)
#+end_src

** elisp-docstring-mode

#+begin_src emacs-lisp
(use-package elisp-docstring-mode
  :commands elisp-docstring-mode)
#+end_src

** elisp-slime-nav

#+begin_src emacs-lisp
(use-package elisp-slime-nav
  :diminish
  :commands (elisp-slime-nav-mode
             elisp-slime-nav-find-elisp-thing-at-point))
#+end_src

** elmacro

#+begin_src emacs-lisp
(use-package elmacro
  :bind (("C-c m e" . elmacro-mode)
         ("C-x C-)" . elmacro-show-last-macro)))
#+end_src

** emamux

#+begin_src emacs-lisp
(use-package emamux
  :commands emamux:send-command)
#+end_src

** emojify

#+begin_src emacs-lisp
(use-package emojify
  :after erc
  :defer 15
  :config
  (global-emojify-mode))
#+end_src

** engine-mode

#+begin_src emacs-lisp
(use-package engine-mode
  :defer 5
  :config
  (defengine google "https://www.google.com/search?q=%s"
             :keybinding "/")
  (engine-mode 1))
#+end_src

** epa

#+begin_src emacs-lisp
(use-package epa
  :config
  (epa-file-enable))
#+end_src

** erc

#+begin_src emacs-lisp
(use-package erc
  :commands (erc erc-tls)
  :bind (:map erc-mode-map
              ("C-c r" . reset-erc-track-mode))
  :custom
  (erc-fill-function 'erc-fill-variable)
  (erc-fill-static-center 12)
  (erc-foolish-content
   '("travis-ci.*ekmett" "analystics.*ekmett" "rudybot:"))
  (erc-format-nick-function 'erc-format-@nick)
  (erc-generate-log-file-name-function 'erc-generate-log-file-name-short)
  (erc-header-line-format nil)
  (erc-hide-list '("JOIN" "NICK" "PART" "QUIT"))
  (erc-ignore-list '("lensbot" "rudybot" "johnwilkins"))
  (erc-ignore-reply-list '("JordiGH"))
  (erc-keywords '("wiegley" "ledger" "eshell" "use-package"))
  (erc-log-channels-directory "~/Messages/ERC")
  (erc-log-write-after-send t)
  (erc-lurker-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE"))
  (erc-modules
   '(autojoin button completion dcc fill identd irccontrols list match menu move-to-prompt netsplit networks noncommands readonly replace ring services smiley stamp track truncate highlight-nicknames))
  (erc-nick "johnw")
  (erc-port 6667)
  (erc-priority-people-regexp "\\`[^#].+")
  (erc-prompt-for-nickserv-password nil)
  (erc-rename-buffers t)
  (erc-replace-alist '(("</?FONT>" . "")))
  (erc-server "irc.libera.chat")
  (erc-services-mode t)
  (erc-text-matched-hook '(erc-hide-fools))
  (erc-track-enable-keybindings t)
  (erc-track-exclude '("#idris" "#agda" "#twitter_jwiegley"))
  (erc-track-exclude-types '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353"))
  (erc-track-faces-priority-list
   '(erc-error-face
     (erc-nick-default-face erc-current-nick-face)
     erc-current-nick-face erc-keyword-face
     (erc-nick-default-face erc-pal-face)
     erc-pal-face erc-nick-msg-face erc-direct-msg-face))
  (erc-track-score-mode t)
  (erc-track-showcount t)
  (erc-user-full-name 'user-full-name)
  (erc-auto-query 'window-noselect)
  (erc-autoaway-message "I'm away (after %i seconds of idle-time)")
  (erc-autojoin-channels-alist
   '(("#nixos" "#nix-darwin" "#hnix" "#haskell-overflow" "#haskell-ops"
      "#haskell-infrastructure" "#haskell" "#coq-blah" "#coq"
      "##categorytheory" "#use-package/Lobby" "#ledger"
      "#haskell-nix/Lobby" "#coq/coq" "#hs-to-coq" "#org-mode")
     ("libera" "#haskell" "#coq" "#ledger" "#haskell-ops" "#nix-darwin"
      "#haskell-infrastructure" "##categorytheory" "#nixos" "#org-mode")
     ("gitter" "#use-package/Lobby" "#haskell-nix/Lobby")))
  :preface
  (defun irc (&optional arg)
    (interactive "P")
    (if arg
        (pcase-dolist (`(,server . ,nick)
                       '(("irc.libera.chat"  . "johnw")
                         ("irc.gitter.im"    . "jwiegley")))
          (erc-tls :server server :port 6697 :nick (concat nick "_")
                   :password (lookup-password server nick 6697)))
      (let ((pass (lookup-password "irc.libera.chat" "johnw" 6697)))
        (when (> (length pass) 32)
          (error "Failed to read ZNC password"))
        (erc :server "127.0.0.1" :port 6697 :nick "johnw"
             :password (concat "johnw/gitter:" pass))
        (sleep-for 5)
        (erc :server "127.0.0.1" :port 6697 :nick "johnw"
             :password (concat "johnw/libera:" pass)))))

  (defun reset-erc-track-mode ()
    (interactive)
    (setq erc-modified-channels-alist nil)
    (erc-modified-channels-update)
    (erc-modified-channels-display)
    (force-mode-line-update))

  (defun setup-irc-environment ()
    (set (make-local-variable 'scroll-conservatively) 100)
    (setq erc-timestamp-only-if-changed-flag nil
          erc-timestamp-format "%H:%M "
          erc-fill-prefix "          "
          erc-fill-column 78
          erc-insert-timestamp-function 'erc-insert-timestamp-left
          ivy-use-virtual-buffers nil
          line-spacing 4))

  (defun accept-certificate ()
    (interactive)
    (when (re-search-backward "/znc[\n ]+AddTrustedServerFingerprint[\n ]+\\(.+\\)" nil t)
      (goto-char (point-max))
      (erc-send-input (concat "/znc AddTrustedServerFingerprint " (match-string 1)))))

  (defcustom erc-foolish-content '()
    "Regular expressions to identify foolish content.
    Usually what happens is that you add the bots to
    `erc-ignore-list' and the bot commands to this list."
    :group 'erc
    :type '(repeat regexp))

  (defun erc-foolish-content (msg)
    "Check whether MSG is foolish."
    (erc-list-match erc-foolish-content msg))

  :init
  (add-hook 'erc-mode-hook #'setup-irc-environment)
  (when alternate-emacs
    (add-hook 'emacs-startup-hook #'irc))

  (eval-after-load 'erc-identd
    '(defun erc-identd-start (&optional port)
       "Start an identd server listening to port 8113.
  Port 113 (auth) will need to be redirected to port 8113 on your
  machine -- using iptables, or a program like redir which can be
  run from inetd. The idea is to provide a simple identd server
  when you need one, without having to install one globally on
  your system."
       (interactive (list (read-string "Serve identd requests on port: " "8113")))
       (unless port (setq port erc-identd-port))
       (when (stringp port)
         (setq port (string-to-number port)))
       (when erc-identd-process
         (delete-process erc-identd-process))
       (setq erc-identd-process
	     (make-network-process :name "identd"
			           :buffer nil
			           :host 'local :service port
			           :server t :noquery t
			           :filter 'erc-identd-filter))
       (set-process-query-on-exit-flag erc-identd-process nil)))

  :config
  (erc-track-minor-mode 1)
  (erc-track-mode 1)

  (add-hook 'erc-insert-pre-hook
            #'(lambda (s)
                (when (erc-foolish-content s)
                  (setq erc-insert-this nil))))

  (bind-key "<f5>" #'accept-certificate))
#+end_src

*** erc-alert

#+begin_src emacs-lisp
(use-package erc-alert
  :disabled t
  :after erc)
#+end_src

*** erc-highlight-nicknames

#+begin_src emacs-lisp
(use-package erc-highlight-nicknames
  :after erc)
#+end_src

*** erc-macros

#+begin_src emacs-lisp
(use-package erc-macros
  :after erc)
#+end_src

*** erc-yank

#+begin_src emacs-lisp
(use-package erc-yank
  :load-path "lisp/erc-yank"
  :after erc
  :bind (:map erc-mode-map
              ("C-y" . erc-yank ))
  :custom
  (erc-yank-query-before-gisting nil))
#+end_src

** ert

#+begin_src emacs-lisp
(use-package ert
  :bind ("C-c e t" . ert-run-tests-interactively))
#+end_src

** esh-toggle

#+begin_src emacs-lisp
(use-package esh-toggle
  :bind ("C-x C-z" . eshell-toggle))
#+end_src

** eshell

#+begin_src emacs-lisp
(use-package eshell
  :commands (eshell eshell-command)
  :custom
  (eshell-directory-change-hook
   '(sml/generate-buffer-identification direnv-update-environment) t)
  (eshell-directory-name "~/.emacs.d/eshell/")
  (eshell-hist-ignoredups t)
  (eshell-history-size 50000)
  (eshell-ls-dired-initial-args '("-h"))
  (eshell-ls-exclude-regexp "~\\'")
  (eshell-ls-initial-args "-h")
  (eshell-modules-list
   '(eshell-alias eshell-basic eshell-cmpl eshell-dirs eshell-glob eshell-hist eshell-ls eshell-pred eshell-prompt eshell-rebind eshell-script eshell-smart eshell-term eshell-unix eshell-xtra))
  (eshell-prompt-function
   (lambda nil
     (concat
      (abbreviate-file-name
       (eshell/pwd))
      (if
          (=
           (user-uid)
           0)
          " # " " $ "))))
  (eshell-rebind-keys-alist
   '(([(control 97)]
      . eshell-bol)
     ([home]
      . eshell-bol)
     ([(control 100)]
      . eshell-delchar-or-maybe-eof)
     ([backspace]
      . eshell-delete-backward-char)
     ([delete]
      . eshell-delete-backward-char)))
  (eshell-save-history-on-exit t)
  (eshell-stringify-t nil)
  (eshell-term-name "ansi")
  (eshell-visual-commands '("vi" "top" "screen" "less" "lynx" "rlogin" "telnet"))
  :preface
  (defvar eshell-isearch-map
    (let ((map (copy-keymap isearch-mode-map)))
      (define-key map [(control ?m)] 'eshell-isearch-return)
      (define-key map [return]       'eshell-isearch-return)
      (define-key map [(control ?r)] 'eshell-isearch-repeat-backward)
      (define-key map [(control ?s)] 'eshell-isearch-repeat-forward)
      (define-key map [(control ?g)] 'eshell-isearch-abort)
      (define-key map [backspace]    'eshell-isearch-delete-char)
      (define-key map [delete]       'eshell-isearch-delete-char)
      map)
    "Keymap used in isearch in Eshell.")

  (defun eshell-initialize ()
    (defun eshell-spawn-external-command (beg end)
      "Parse and expand any history references in current input."
      (save-excursion
        (goto-char end)
        (when (looking-back "&!" beg)
          (delete-region (match-beginning 0) (match-end 0))
          (goto-char beg)
          (insert "spawn "))))

    (add-hook 'eshell-expand-input-functions #'eshell-spawn-external-command)

    (use-package em-unix
      :defer t
      :config
      (unintern 'eshell/su nil)
      (unintern 'eshell/sudo nil)))

  :init
  (add-hook 'eshell-first-time-mode-hook #'eshell-initialize))
#+end_src

*** eshell-bookmark

#+begin_src emacs-lisp
(use-package eshell-bookmark
  :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

*** eshell-up

#+begin_src emacs-lisp
(use-package eshell-up
  :commands eshell-up)
#+end_src

*** eshell-z

#+begin_src emacs-lisp
(use-package eshell-z
  :after eshell)
#+end_src

** etags

#+begin_src emacs-lisp
(use-package etags
  :bind ("M-T" . tags-search)
  :custom
  (tags-add-tables t)
  (tags-apropos-verbose t)
  (tags-case-fold-search nil)
  (tags-revert-without-query t))
#+end_src

** eval-expr

#+begin_src emacs-lisp
(use-package eval-expr
  :disabled t
  :bind ("M-:" . eval-expr)
  :custom
  (eval-expr-print-function 'pp)
  (eval-expr-print-length 100)
  (eval-expr-print-level 20)
  :config
  (defun eval-expr-minibuffer-setup ()
    (local-set-key (kbd "<tab>") #'lisp-complete-symbol)
    (set-syntax-table emacs-lisp-mode-syntax-table)
    (paredit-mode)))
#+end_src

** evil

#+begin_src emacs-lisp
(use-package evil
  :commands evil-mode)
#+end_src

** expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

** eyebrowse

#+begin_src emacs-lisp
(use-package eyebrowse
  :bind-keymap ("C-\\" . eyebrowse-mode-map)
  :bind (:map eyebrowse-mode-map
              ("C-\\ C-\\" . eyebrowse-last-window-config)
              ("A-1" . eyebrowse-switch-to-window-config-1)
              ("A-2" . eyebrowse-switch-to-window-config-2)
              ("A-3" . eyebrowse-switch-to-window-config-3)
              ("A-4" . eyebrowse-switch-to-window-config-4))
  :custom
  (eyebrowse-keymap-prefix "")
  (eyebrowse-mode-line-separator " ")
  (eyebrowse-new-workspace t)
  :config
  (eyebrowse-mode t))
#+end_src

** fancy-narrow

#+begin_src emacs-lisp
(use-package fancy-narrow
  :bind (("C-c N N" . fancy-narrow-to-region)
         ("C-c N W" . fancy-widen))
  :commands (fancy-narrow-to-region fancy-widen))
#+end_src

** feebleline

#+begin_src emacs-lisp
(use-package feebleline
  :bind (("M-o m" . feebleline-mode))
  :config
  (window-divider-mode t))
#+end_src

** fence-edit

#+begin_src emacs-lisp
(use-package fence-edit
  :commands fence-edit-code-at-point)
#+end_src

** fetchmail-mode

#+begin_src emacs-lisp
(use-package fetchmail-mode
  :commands fetchmail-mode)
#+end_src

** ffap

#+begin_src emacs-lisp
(use-package ffap
  :bind ("C-c v" . ffap))
#+end_src

** find-dired

#+begin_src emacs-lisp
(use-package find-dired
  :defer t
  :custom
  (find-ls-option '("-print0 | xargs -P4 -0 ls -ldN" . "-ldN"))
  (find-ls-subdir-switches "-ldN"))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :commands (flycheck-mode
             flycheck-next-error
             flycheck-previous-error)
  :custom
  (flycheck-coq-executable "ct-coqtop")
  (flycheck-display-errors-delay 0.0)
  (flycheck-haskell-hpack-preference 'prefer-cabal)
  (flycheck-standard-error-navigation nil)
  :init
  (dolist (where '((emacs-lisp-mode-hook . emacs-lisp-mode-map)
                   (haskell-mode-hook    . haskell-mode-map)
                   (js2-mode-hook        . js2-mode-map)
                   (c-mode-common-hook   . c-mode-base-map)
                   (rustic-mode-hook     . rustic-mode-map)))
    (add-hook (car where)
              `(lambda ()
                 (bind-key "M-n" #'flycheck-next-error ,(cdr where))
                 (bind-key "M-p" #'flycheck-previous-error ,(cdr where)))))
  :config
  (defalias 'show-error-at-point-soon
    'flycheck-show-error-at-point)

  (defun magnars/adjust-flycheck-automatic-syntax-eagerness ()
    "Adjust how often we check for errors based on if there are any.
  This lets us fix any errors as quickly as possible, but in a
  clean buffer we're an order of magnitude laxer about checking."
    (setq flycheck-idle-change-delay
          (if flycheck-current-errors 0.3 3.0)))

  ;; Each buffer gets its own idle-change-delay because of the
  ;; buffer-sensitive adjustment above.
  (make-variable-buffer-local 'flycheck-idle-change-delay)

  (add-hook 'flycheck-after-syntax-check-hook
            #'magnars/adjust-flycheck-automatic-syntax-eagerness)

  ;; Remove newline checks, since they would trigger an immediate check
  ;; when we want the idle-change-delay to be in effect while editing.
  (setq-default flycheck-check-syntax-automatically '(save
                                                      idle-change
                                                      mode-enabled))

  (defun flycheck-handle-idle-change ()
    "Handle an expired idle time since the last change.
  This is an overwritten version of the original
  flycheck-handle-idle-change, which removes the forced deferred.
  Timers should only trigger inbetween commands in a single
  threaded system and the forced deferred makes errors never show
  up before you execute another command."
    (flycheck-clear-idle-change-timer)
    (flycheck-buffer-automatically 'idle-change)))
#+end_src

*** flycheck-haskell

#+begin_src emacs-lisp
(use-package flycheck-haskell
  :commands flycheck-haskell-setup)
#+end_src

*** flycheck-package

#+begin_src emacs-lisp
(use-package flycheck-package
  :after flycheck)
#+end_src

** flymake

#+begin_src emacs-lisp
(use-package flymake
  :defer t
  :custom-face
  (flymake-note ((t nil))))
#+end_src

** flyspell

#+begin_src emacs-lisp
(use-package flyspell
  :bind (("C-c i b" . flyspell-buffer)
         ("C-c i f" . flyspell-mode))
  :custom
  (flyspell-abbrev-p nil)
  (flyspell-use-meta-tab nil)
  :config
  (defun my-flyspell-maybe-correct-transposition (beg end candidates)
    (unless (let (case-fold-search)
              (string-match "\\`[A-Z0-9]+\\'"
                            (buffer-substring-no-properties beg end)))
      (flyspell-maybe-correct-transposition beg end candidates))))
#+end_src

** focus

#+begin_src emacs-lisp
(use-package focus
  :commands focus-mode)
#+end_src

** font-lock

#+begin_src emacs-lisp
(use-package font-lock
  :defer 5
  :custom
  (global-font-lock-mode t)
  (font-lock-support-mode 'jit-lock-mode)
  (font-lock-verbose nil)
  :custom-face
  (font-lock-comment-face ((t (:foreground "grey50" :slant italic))))
  (font-lock-doc-face ((t (:foreground "cornflowerblue")))))
#+end_src

** font-lock-studio

#+begin_src emacs-lisp
(use-package font-lock-studio
  :commands (font-lock-studio
             font-lock-studio-region))
#+end_src

** forge

#+begin_src emacs-lisp
(use-package forge
  :after magit
  :custom
  (forge-alist
   '(("github.com" "api.github.com" "github.com" forge-github-repository)
     ("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository)
     ("salsa.debian.org" "salsa.debian.org/api/v4" "salsa.debian.org" forge-gitlab-repository)
     ("framagit.org" "framagit.org/api/v4" "framagit.org" forge-gitlab-repository)
     ("gitlab.gnome.org" "gitlab.gnome.org/api/v4" "gitlab.gnome.org" forge-gitlab-repository)
     ("codeberg.org" "codeberg.org/api/v1" "codeberg.org" forge-gitea-repository)
     ("code.orgmode.org" "code.orgmode.org/api/v1" "code.orgmode.org" forge-gogs-repository)
     ("bitbucket.org" "api.bitbucket.org/2.0" "bitbucket.org" forge-bitbucket-repository)
     ("git.savannah.gnu.org" nil "git.savannah.gnu.org" forge-cgit**-repository)
     ("git.kernel.org" nil "git.kernel.org" forge-cgit-repository)
     ("repo.or.cz" nil "repo.or.cz" forge-repoorcz-repository)
     ("git.suckless.org" nil "git.suckless.org" forge-stagit-repository)
     ("git.sr.ht" nil "git.sr.ht" forge-srht-repository)))
  (forge-database-file "~/.config/forge/database.sqlite")
  (forge-owned-accounts '(("jwiegley")))
  :preface
  (defun my-quick-create-pull-request (title branch)
    (interactive "sTitle: \nsBranch: ")
    (setq branch (concat "johnw/" branch))
    ;; Split this commit to another branch.
    (magit-branch-spinoff branch)
    ;; Push that branch to the remote.
    (call-interactively #'magit-push-current-to-pushremote)
    (sleep-for 3)
    ;; Create a pullreq using the same title.
    (forge-create-pullreq (concat "origin/" branch) "origin/master"))
  :config
  (transient-insert-suffix 'forge-dispatch "c i"
    '("p" "quick-pr" my-quick-create-pull-request))
  (remove-hook 'magit-status-sections-hook 'forge-insert-issues))
#+end_src

** format-all

#+begin_src emacs-lisp
(use-package format-all
  :commands (format-all-buffer
             format-all-mode)
  :config
  (defun format-all--resolve-system (choices)
    "Get first choice matching `format-all--system-type' from CHOICES."
    (cl-dolist (choice choices)
      (cond ((atom choice)
             (cl-return choice))
            ((eql format-all--system-type (car choice))
             (cl-return (cadr choice)))))))
#+end_src

** free-keys

#+begin_src emacs-lisp
(use-package free-keys
  :commands free-keys)
#+end_src

** fullframe

#+begin_src emacs-lisp
(use-package fullframe
  :defer t
  :init
  (autoload #'fullframe "fullframe"))
#+end_src

** gist

#+begin_src emacs-lisp
(use-package gist
  :no-require t
  :bind ("C-c G" . my-gist-region-or-buffer)
  :preface
  (defun my-gist-region-or-buffer (start end)
    (interactive "r")
    (copy-region-as-kill start end)
    (deactivate-mark)
    (let ((file-name buffer-file-name))
      (with-temp-buffer
        (if file-name
            (call-process "gist" nil t nil "-f" file-name "-P")
          (call-process "gist" nil t nil "-P"))
        (kill-ring-save (point-min) (1- (point-max)))
        (message (buffer-substring (point-min) (1- (point-max))))))))
#+end_src

** git-annex

#+begin_src emacs-lisp
(use-package git-annex
  :load-path "lisp/git-annex"
  :after dired
  :defer t)
#+end_src

** git-link

#+begin_src emacs-lisp
(use-package git-link
  :bind ("C-c Y" . git-link)
  :commands (git-link git-link-commit git-link-homepage))
#+end_src

** git-timemachine

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

** git-undo

#+begin_src emacs-lisp
(use-package git-undo
  :load-path "lisp/git-undo"
  :commands git-undo)
#+end_src

** github-review

#+begin_src emacs-lisp
(use-package github-review
  :after forge
  :commands github-review-start
  :custom
  (github-review-fetch-top-level-and-review-comments t)
  :config
  (transient-insert-suffix 'forge-dispatch "c p"
    '("c r" "github-review" github-review-forge-pr-at-point)))
#+end_src

** gitpatch

#+begin_src emacs-lisp
(use-package gitpatch
  :commands gitpatch-mail)
#+end_src

** google-this

#+begin_src emacs-lisp
(use-package google-this
  :bind-keymap ("C-c /" . google-this-mode-submap)
  :bind* ("M-SPC" . google-this-search)
  :bind (:map google-this-mode-map
              ("/" . google-this-search)))
#+end_src

** goto-last-change

#+begin_src emacs-lisp
(use-package goto-last-change
  :bind ("C-x C-/" . goto-last-change))
#+end_src

** goto-line-preview

#+begin_src emacs-lisp
(use-package goto-line-preview
  :config
  (global-set-key [remap goto-line] 'goto-line-preview))
#+end_src

** graphviz-dot-mode

#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :mode "\\.dot\\'")
#+end_src

** grep

#+begin_src emacs-lisp
(use-package grep
  :bind (("M-s n" . find-name-dired)
         ("M-s F" . find-grep)
         ("M-s D" . find-grep-dired))
  :custom
  (grep-command "egrep -nH -e ")
  (grep-find-command
   "find . -name '*' -type f -print0 | xargs -0 -P8 egrep -nH ")
  (grep-save-buffers t))
#+end_src

** gud

#+begin_src emacs-lisp
(use-package gud
  :commands gud-gdb
  :bind (("<f9>"    . gud-cont)
         ("<f10>"   . gud-next)
         ("<f11>"   . gud-step)
         ("S-<f11>" . gud-finish))
  :config
  (gdb-find-source-frame t)
  (gdb-same-frame nil)
  :init
  (defun show-debugger ()
    (interactive)
    (let ((gud-buf
           (catch 'found
             (dolist (buf (buffer-list))
               (if (string-match "\\*gud-" (buffer-name buf))
                   (throw 'found buf))))))
      (if gud-buf
          (switch-to-buffer-other-window gud-buf)
        (call-interactively 'gud-gdb)))))
#+end_src

** haskell-edit

#+begin_src emacs-lisp
(use-package haskell-edit
  :load-path "lisp/haskell-config"
  :after haskell-mode
  :bind (:map haskell-mode-map
              ("C-c M-q" . haskell-edit-reformat)))
#+end_src

** haskell-mode

#+begin_src emacs-lisp
(use-package haskell-mode
  :mode (("\\.hs\\(c\\|-boot\\)?\\'" . haskell-mode)
         ("\\.lhs\\'" . literate-haskell-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :bind (:map haskell-mode-map
              ("C-c C-h" . my-haskell-hoogle)
              ("C-c C-," . haskell-navigate-imports)
              ("C-c C-." . haskell-mode-format-imports)
              ("C-c C-u" . my-haskell-insert-undefined)
              ("M-s")
              ("M-t"))
  :custom
  (haskell-compile-cabal-build-command "cd %s && cabal new-build --ghc-option=-ferror-spans")
  (haskell-hasktags-arguments '("-e"))
  (haskell-hoogle-command nil)
  (haskell-indent-spaces 4)
  (haskell-indentation-ifte-offset 4)
  (haskell-indentation-layout-offset 4)
  (haskell-indentation-left-offset 2)
  (haskell-indentation-starter-offset 4)
  (haskell-indentation-where-post-offset 4)
  (haskell-indentation-where-pre-offset 4)
  (haskell-process-args-cabal-repl
   '("--ghc-option=-ferror-spans" "--repl-options=-Wno-missing-home-modules" "--repl-options=-ferror-spans"))
  (haskell-process-load-or-reload-prompt t)
  (haskell-tags-on-save t)
  :preface
  (defun my-haskell-insert-undefined ()
    (interactive) (insert "undefined"))

  (defun snippet (name)
    (interactive "sName: ")
    (find-file (expand-file-name (concat name ".hs") "~/src/notes"))
    (haskell-mode)
    (goto-char (point-min))
    (when (eobp)
      (insert "hdr")
      (yas-expand)))

  (defvar hoogle-server-process nil)
  (defun my-haskell-hoogle (query &optional arg)
    "Do a Hoogle search for QUERY."
    (interactive
     (let ((def (haskell-ident-at-point)))
       (if (and def (symbolp def)) (setq def (symbol-name def)))
       (list (read-string (if def
                              (format "Hoogle query (default %s): " def)
                            "Hoogle query: ")
                          nil nil def)
             current-prefix-arg)))
    (let ((pe process-environment)
          (ep exec-path)
          (default-hoo (expand-file-name
                        "default.hoo"
                        (locate-dominating-file "." "default.hoo"))))
      (unless (and hoogle-server-process
                   (process-live-p hoogle-server-process))
        (message "Starting local Hoogle server on port 8687...")
        (with-current-buffer (get-buffer-create " *hoogle-web*")
          (cd temporary-file-directory)
          (let ((process-environment pe)
                (exec-path ep))
            (setq hoogle-server-process
                  (start-process "hoogle-web" (current-buffer)
                                 (executable-find "hoogle")
                                 "server"
                                 ;; (concat "--database=" default-hoo)
                                 "--local" "--port=8687"))))
        (message "Starting local Hoogle server on port 8687...done")))
    (browse-url
     (format "http://127.0.0.1:8687/?hoogle=%s"
             (replace-regexp-in-string
              " " "+" (replace-regexp-in-string "\\+" "%2B" query)))))

  (defvar haskell-prettify-symbols-alist
    '(("::"     . ?∷)
      ("forall" . ?∀)
      ("exists" . ?∃)
      ("->"     . ?→)
      ("<-"     . ?←)
      ("=>"     . ?⇒)
      ("~>"     . ?⇝)
      ("<~"     . ?⇜)
      ("<>"     . ?⨂)
      ("msum"   . ?⨁)
      ("\\"     . ?λ)
      ("not"    . ?¬)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("/="     . ?≠)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("<<<"    . ?⋘)
      (">>>"    . ?⋙)

      ("`elem`"             . ?∈)
      ("`notElem`"          . ?∉)
      ("`member`"           . ?∈)
      ("`notMember`"        . ?∉)
      ("`union`"            . ?∪)
      ("`intersection`"     . ?∩)
      ("`isSubsetOf`"       . ?⊆)
      ("`isNotSubsetOf`"    . ?⊄)
      ("`isSubsequenceOf`"  . ?⊆)
      ("`isProperSubsetOf`" . ?⊂)
      ("undefined"          . ?⊥)))

  :config
  (require 'haskell)
  (require 'haskell-doc)
  (require 'haskell-commands)

  (defun my-update-cabal-repl (&rest _args)
    (aif (getenv "CABAL_REPL")
        (let ((args (nthcdr 2 (split-string it))))
          (setq-local haskell-process-args-cabal-repl
                      (delete-dups
                       (append haskell-process-args-cabal-repl args))))))

  (defun my-haskell-mode-hook ()
    (haskell-indentation-mode)
    (interactive-haskell-mode)
    (diminish 'interactive-haskell-mode)
    (when (and (boundp 'brittany-enabled)
               brittany-enabled)
      (let ((brittany (find-brittany)))
        (when brittany
          (setq-local haskell-stylish-on-save t)
          (setq-local haskell-mode-stylish-haskell-path brittany)
          (setq-local haskell-mode-stylish-haskell-args '("-")))))
    (advice-add 'direnv-update-directory-environment
                :after #'my-update-cabal-repl)
    (whitespace-mode 1)
    (flycheck-mode 1)
    (flycheck-haskell-setup)
    (add-hook 'hack-local-variables-hook
              #'(lambda ()
                  (when nil
                    (setq-local flycheck-ghc-search-path nil)
                    (setq-local flycheck-ghc-args nil)))
              t)
    (bind-key "M-n" #'haskell-goto-next-error haskell-mode-map)
    (bind-key "M-p" #'haskell-goto-prev-error haskell-mode-map)
    (setq-local prettify-symbols-alist haskell-prettify-symbols-alist)
    (prettify-symbols-mode 1)
    (bug-reference-prog-mode 1)
    (when (executable-find "ormolu")
      (require 'format-all)
      (define-format-all-formatter ormolu
        (:executable "ormolu")
        (:install "stack install ormolu")
        (:languages "Haskell" "Literate Haskell")
        (:features)
        (:format
         (format-all--buffer-easy
          executable
          (when (buffer-file-name)
            (list "--stdin-input-file" (buffer-file-name))))))
      (format-all--set-chain "Haskell" '(ormolu))
      ;; (format-all-mode 1)
      ))

  (add-hook 'haskell-mode-hook #'my-haskell-mode-hook)

  (eval-after-load 'align
    '(nconc
      align-rules-list
      (mapcar #'(lambda (x)
                  `(,(car x)
                    (regexp . ,(cdr x))
                    (modes quote (haskell-mode literate-haskell-mode))))
              '((haskell-types       . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                (haskell-assignment  . "\\(\\s-+\\)=\\s-+")
                (haskell-arrows      . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                (haskell-left-arrows . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")))))

  (defun haskell-process-load-complete
      (session process buffer reload module-buffer &optional cont)
    "Handle the complete loading response. BUFFER is the string of
  text being sent over the process pipe. MODULE-BUFFER is the
  actual Emacs buffer of the module being loaded."
    (when (get-buffer (format "*%s:splices*" (haskell-session-name session)))
      (with-current-buffer (haskell-interactive-mode-splices-buffer session)
        (erase-buffer)))
    (let* ((ok (cond
                ((haskell-process-consume
                  process
                  "Ok, \\(?:\\([0-9]+\\|one\\)\\) modules? loaded\\.$")
                 t)
                ((haskell-process-consume
                  process
                  "Failed, \\(?:[0-9]+\\) modules? loaded\\.$")
                 nil)
                ((haskell-process-consume
                  process
                  "Ok, modules loaded: \\(.+\\)\\.$")
                 t)
                ((haskell-process-consume
                  process
                  "Failed, modules loaded: \\(.+\\)\\.$")
                 nil)
                (t
                 (error (message "Unexpected response from haskell process.")))))
           (modules (haskell-process-extract-modules buffer))
           (cursor (haskell-process-response-cursor process))
           (warning-count 0))
      (haskell-process-set-response-cursor process 0)
      (haskell-check-remove-overlays module-buffer)
      (while
          (haskell-process-errors-warnings module-buffer session process buffer)
        (setq warning-count (1+ warning-count)))
      (haskell-process-set-response-cursor process cursor)
      (if (and (not reload)
               haskell-process-reload-with-fbytecode)
          (haskell-process-reload-with-fbytecode process module-buffer)
        (haskell-process-import-modules process (car modules)))
      (if ok
          (haskell-mode-message-line (if reload "Reloaded OK." "OK."))
        (haskell-interactive-mode-compile-error session "Compilation failed."))
      (when cont
        (condition-case-unless-debug e
            (funcall cont ok)
          (error (message "%S" e))
          (quit nil))))))
#+end_src

** hcl-mode

#+begin_src emacs-lisp
(use-package hcl-mode
  :mode "\.nomad\\'")
#+end_src

** help

#+begin_src emacs-lisp
(use-package help
  :defer 5
  :custom
  (temp-buffer-resize-mode t))
#+end_src

** helpful

#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h e F" . helpful-function)
         ("C-h e C" . helpful-command)
         ("C-h e M" . helpful-macro)
         ("C-h e L" . helpful-callable)
         ("C-h e S" . helpful-at-point)
         ("C-h e V" . helpful-variable)))
#+end_src

** hi-lock

#+begin_src emacs-lisp
(use-package hi-lock
  :bind (("M-o l" . highlight-lines-matching-regexp)
         ("M-o r" . highlight-regexp)
         ("M-o w" . highlight-phrase)))
#+end_src

** hideif

#+begin_src emacs-lisp
(use-package hideif
  :diminish hide-ifdef-mode
  :hook (c-mode-common . hide-ifdef-mode))
#+end_src

** hideshow

#+begin_src emacs-lisp
(use-package hideshow
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode)
  :bind (:map prog-mode-map
              ("C-c h" . hs-toggle-hiding)))
#+end_src

** highlight

#+begin_src emacs-lisp
(use-package highlight
  :bind (("C-c H H" . hlt-highlight-region)
         ("C-c H U" . hlt-unhighlight-region)))
#+end_src

** highlight-cl

#+begin_src emacs-lisp
(use-package highlight-cl
  :hook (emacs-lisp-mode . highlight-cl-add-font-lock-keywords))
#+end_src

** highlight-defined

#+begin_src emacs-lisp
(use-package highlight-defined
  :commands highlight-defined-mode)
#+end_src

** highlight-numbers

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+end_src

** hilit-chg

#+begin_src emacs-lisp
(use-package hilit-chg
  :bind ("M-o C" . highlight-changes-mode))
#+end_src

** hippie-exp

#+begin_src emacs-lisp
(use-package hippie-exp
  :disabled t
  :bind (("M-/"   . hippie-expand)
         ("C-M-/" . dabbrev-completion))
  :custom
  (hippie-expand-try-functions-list
   '(try-expand-dabbrev
     try-expand-dabbrev-all-buffers
     try-expand-dabbrev-from-kill
     try-complete-file-name-partially
     try-complete-file-name
     try-expand-all-abbrevs
     try-expand-list
     try-expand-line
     try-complete-lisp-symbol-partially
     try-complete-lisp-symbol)))
#+end_src

** hl-line

#+begin_src emacs-lisp
(use-package hl-line
  :commands hl-line-mode
  :bind ("M-o h" . hl-line-mode))
#+end_src

*** hl-line+

#+begin_src emacs-lisp
(use-package hl-line+
  :after hl-line)
#+end_src

** hydra

#+begin_src emacs-lisp
(use-package hydra
  :defer t
  :config
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")))
#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-formats
   '((mark modified read-only " "
           (name 16 -1)
           " "
           (size 6 -1 :right)
           " "
           (mode 16 16)
           " " filename)
     (mark " "
           (name 16 -1)
           " " filename)))
  (ibuffer-maybe-show-regexps nil)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Coq"
       (or
        (mode . coq-mode)
        (name . "\\<coq\\>")
        (name . "_CoqProject")))
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Haskell"
       (or
        (mode . haskell-mode)
        (mode . haskell-cabal-mode)
        (mode . literate-haskell-mode)))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("Nix"
       (mode . nix-mode))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Dired"
       (mode . dired-mode))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)"))))))
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window t)
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))
#+end_src

** iedit

#+begin_src emacs-lisp
(use-package iedit
  :defer t)
#+end_src

** ielm

#+begin_src emacs-lisp
(use-package ielm
  :commands ielm
  :bind (:map ielm-map ("<return>" . my-ielm-return))
  :config
  (defun my-ielm-return ()
    (interactive)
    (let ((end-of-sexp (save-excursion
                         (goto-char (point-max))
                         (skip-chars-backward " \t\n\r")
                         (point))))
      (if (>= (point) end-of-sexp)
          (progn
            (goto-char (point-max))
            (skip-chars-backward " \t\n\r")
            (delete-region (point) (point-max))
            (call-interactively #'ielm-return))
        (call-interactively #'paredit-newline)))))
#+end_src

** iflipb

#+begin_src emacs-lisp
(use-package iflipb
  :disabled t
  :bind* ("<S-return>" . my-iflipb-next-buffer)
  :commands (iflipb-next-buffer iflipb-previous-buffer)
  :preface
  (defvar my-iflipb-auto-off-timeout-sec 1)
  (defvar my-iflipb-auto-off-timer nil)
  (defvar my-iflipb-auto-off-timer-canceler-internal nil)
  (defvar my-iflipb-ing-internal nil)

  (defun my-iflipb-auto-off ()
    (setq my-iflipb-auto-off-timer-canceler-internal nil
          my-iflipb-ing-internal nil)
    (when my-iflipb-auto-off-timer
      (message nil)
      (cancel-timer my-iflipb-auto-off-timer)
      (setq my-iflipb-auto-off-timer nil)))

  (defun my-iflipb-next-buffer (arg)
    (interactive "P")
    (iflipb-next-buffer arg)
    (if my-iflipb-auto-off-timer-canceler-internal
        (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
    (setq my-iflipb-auto-off-timer
          (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0
                               'my-iflipb-auto-off)
          my-iflipb-ing-internal t))

  (defun my-iflipb-previous-buffer ()
    (interactive)
    (iflipb-previous-buffer)
    (if my-iflipb-auto-off-timer-canceler-internal
        (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
    (setq my-iflipb-auto-off-timer
          (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0
                               'my-iflipb-auto-off)
          my-iflipb-ing-internal t))

  :config
  (setq iflipb-always-ignore-buffers
        "\\`\\( \\|diary\\|\\.newsrc-dribble\\'\\)"
        iflipb-wrap-around t)

  (defun iflipb-first-iflipb-buffer-switch-command ()
    (not (and (or (eq last-command 'my-iflipb-next-buffer)
                  (eq last-command 'my-iflipb-previous-buffer))
              my-iflipb-ing-internal))))
#+end_src

** image-file

#+begin_src emacs-lisp
(use-package image-file
  :defer 5
  :config
  (auto-image-file-mode 1)
  (add-hook 'image-mode-hook #'image-transform-reset))
#+end_src

** imenu-list

#+begin_src emacs-lisp
(use-package imenu-list
  :commands imenu-list-minor-mode)
#+end_src

** indent

#+begin_src emacs-lisp
(use-package indent
  :commands indent-according-to-mode
  :custom
  (tab-always-indent 'complete))
#+end_src

** indent-shift

#+begin_src emacs-lisp
(use-package indent-shift
  :bind (("C-c <" . indent-shift-left)
         ("C-c >" . indent-shift-right)))
#+end_src

** info

#+begin_src emacs-lisp
(use-package info
  :bind ("C-h C-i" . info-lookup-symbol)
  :custom
  (Info-default-directory-list '("~/.emacs.d/lisp/org-mode/doc"))
  (Info-fit-frame-flag nil)
  :config
  (add-hook 'Info-mode-hook
            #'(lambda ()
                (setq buffer-face-mode-face '(:family "Bookerly"))
                (buffer-face-mode)
                (text-scale-adjust 1))))
#+end_src

*** info-look

#+begin_src emacs-lisp
(use-package info-look
  :defer t
  :init
  (autoload 'info-lookup-add-help "info-look"))
#+end_src

*** info-lookmore

#+begin_src emacs-lisp
(use-package info-lookmore
  :after info-look
  :config
  (info-lookmore-elisp-cl)
  (info-lookmore-elisp-userlast)
  (info-lookmore-elisp-gnus)
  (info-lookmore-apropos-elisp))
#+end_src

** ialign

#+begin_src emacs-lisp
(use-package ialign
  :bind ("C-c {" . ialign-interactive-align))
#+end_src

** inventory

#+begin_src emacs-lisp
(use-package inventory
  :commands (inventory sort-package-declarations))
#+end_src

** ipcalc

#+begin_src emacs-lisp
(use-package ipcalc
  :commands ipcalc)
#+end_src

** isearch

#+begin_src emacs-lisp
(use-package isearch
  :no-require t
  :bind (("C-M-r" . isearch-backward-other-window)
         ("C-M-s" . isearch-forward-other-window))
  :bind (:map isearch-mode-map
              ("C-c" . isearch-toggle-case-fold)
              ("C-t" . isearch-toggle-regexp)
              ("C-^" . isearch-edit-string)
              ("C-i" . isearch-complete))
  :preface
  (defun isearch-backward-other-window ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (call-interactively 'isearch-backward))

  (defun isearch-forward-other-window ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (call-interactively 'isearch-forward)))
#+end_src

** ispell

#+begin_src emacs-lisp
(use-package ispell
  :no-require t
  :bind (("C-c i c" . ispell-comments-and-strings)
         ("C-c i d" . ispell-change-dictionary)
         ("C-c i k" . ispell-kill-ispell)
         ("C-c i m" . ispell-message)
         ("C-c i r" . ispell-region))
  :custom
  (ispell-extra-args '("--sug-mode=fast" "--keyboard=dvorak")))
#+end_src

** jka-compr

#+begin_src emacs-lisp
(use-package jka-compr
  :defer 5
  :custom
  (auto-compression-mode t))
#+end_src

** jobhours

#+begin_src emacs-lisp
(use-package jobhours
  :disabled t
  :demand t
  :bind ("M-o j" . jobhours-update-string)
  :config
  (defun my-org-insert-jobhours-string ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (goto-char (line-end-position))
      (let* ((width (- (window-width) (current-column)))
             (jobhours (jobhours-get-string t))
             (spacer (- width (length jobhours)))
             (inhibit-read-only t))
        (when (> spacer 0)
          (insert (make-string spacer ? ) jobhours)))))

  (defun my-org-delayed-update ()
    (run-with-idle-timer
     1 nil
     `(lambda ()
        (with-current-buffer ,(current-buffer)
          (org-save-all-org-buffers)
          (my-org-insert-jobhours-string)))))

  (add-hook 'org-agenda-finalize-hook #'my-org-delayed-update t))
#+end_src

** jq-mode

#+begin_src emacs-lisp
(use-package jq-mode
  :mode "\\.jq\\'")
#+end_src

** js2-mode

#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :config
  (add-to-list 'flycheck-disabled-checkers #'javascript-jshint)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-mode 1))
#+end_src

** js3-mode

#+begin_src emacs-lisp
(use-package js3-mode
  ;; jww (2017-12-10): Need to configure.
  :disabled t)
#+end_src

** json-mode

#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src

** json-reformat

#+begin_src emacs-lisp
(use-package json-reformat
  :after json-mode)
#+end_src

** json-snatcher

#+begin_src emacs-lisp
(use-package json-snatcher
  :after json-mode)
#+end_src

** key-chord

#+begin_src emacs-lisp
(use-package key-chord
  :commands key-chord-mode)
#+end_src

** keypression

#+begin_src emacs-lisp
(use-package keypression
  :commands key-chord-mode)
#+end_src

** know-your-http-well

#+begin_src emacs-lisp
(use-package know-your-http-well
  :commands (http-header
             http-method
             http-relation
             http-status-code
             media-type))
#+end_src

** kotl-mode

#+begin_src emacs-lisp
(use-package kotl-mode
  :disabled t
  :mode "\\.kotl\\'")
#+end_src

** ledger-mode

#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.ledger\\'"
  :load-path "~/src/ledger/lisp"
  :commands ledger-mode
  :bind ("C-c L" . my-ledger-start-entry)
  :custom
  (ledger-binary-path "ledger")
  (ledger-file "/Volumes/Files/Accounts/ledger.dat")
  (ledger-post-use-ido t)
  :preface
  (defun my-ledger-start-entry (&optional arg)
    (interactive "p")
    (find-file-other-window "/Volumes/Files/Accounts/ledger.dat")
    (goto-char (point-max))
    (skip-syntax-backward " ")
    (if (looking-at "\n\n")
        (goto-char (point-max))
      (delete-region (point) (point-max))
      (insert ?\n)
      (insert ?\n))
    (insert (format-time-string "%Y/%m/%d ")))

  (defun ledger-matchup ()
    (interactive)
    (while (re-search-forward "\\(\\S-+Unknown\\)\\s-+\\$\\([-,0-9.]+\\)"
                              nil t)
      (let ((account-beg (match-beginning 1))
            (account-end (match-end 1))
            (amount (match-string 2))
            account answer)
        (goto-char account-beg)
        (set-window-point (get-buffer-window) (point))
        (recenter)
        (redraw-display)
        (with-current-buffer (get-buffer "nrl-mastercard-old.dat")
          (goto-char (point-min))
          (when (re-search-forward (concat "\\(\\S-+\\)\\s-+\\$" amount)
                                   nil t)
            (setq account (match-string 1))
            (goto-char (match-beginning 1))
            (set-window-point (get-buffer-window) (point))
            (recenter)
            (redraw-display)
            (setq answer
                  (read-char (format "Is this a match for %s (y/n)? "
                                     account)))))
        (when (eq answer ?y)
          (goto-char account-beg)
          (delete-region account-beg account-end)
          (insert account))
        (forward-line))))

  (defun my-ledger-add-symbols ()
    (interactive)
    (while (re-search-forward " \\(BOT\\|SOLD\\) [+-][0-9,]+ \\(\\S-+\\) " nil t)
      (forward-line 2)
      (goto-char (line-beginning-position))
      (insert "    ; Symbol: " (match-string 2) ?\n)))
  :config
  (add-hook 'ledger-mode-hook
            #'(lambda ()
                (auto-fill-mode -1))))
#+end_src

** link-hint

#+begin_src emacs-lisp
(use-package link-hint
  :defer 10
  :bind ("C-c C-o" . link-hint-open-link)
  :config
  (add-hook 'eww-mode-hook
            #'(lambda () (bind-key "f" #'link-hint-open-link eww-mode-map)))
  (add-hook 'w3m-mode-hook
            #'(lambda () (bind-key "f" #'link-hint-open-link w3m-mode-map))))
#+end_src

** lively

#+begin_src emacs-lisp
(use-package lively
  :bind ("C-x C-E" . lively))
#+end_src

** lisp-mode

#+begin_src emacs-lisp
(use-package lisp-mode
  :defer t
  :hook ((emacs-lisp-mode lisp-mode)
         . (lambda () (add-hook 'after-save-hook #'check-parens nil t)))
  :custom
  (parens-require-spaces t)
  :init
  (dolist (mode '(ielm-mode
                  inferior-emacs-lisp-mode
                  inferior-lisp-mode
                  lisp-interaction-mode
                  lisp-mode
                  emacs-lisp-mode))
    (font-lock-add-keywords
     mode
     '(("(\\(lambda\\)\\>"
        (0 (ignore
            (compose-region (match-beginning 1)
                            (match-end 1) ?λ))))
       ("(\\(ert-deftest\\)\\>[         '(]*\\(setf[    ]+\\sw+\\|\\sw+\\)?"
        (1 font-lock-keyword-face)
        (2 font-lock-function-name-face
           nil t))))))
#+end_src

** lispy

#+begin_src emacs-lisp
(use-package lispy
  :commands lispy-mode
  :bind (:map lispy-mode-map
              ("M-j"))
  :bind (:map emacs-lisp-mode-map
              ("C-1"     . lispy-describe-inline)
              ("C-2"     . lispy-arglist-inline)
              ("C-c C-j" . lispy-goto)))
#+end_src

** llvm-mode

#+begin_src emacs-lisp
(use-package llvm-mode
  :disabled t
  :mode "\\.ll\\'")
#+end_src

** lsp-haskell

#+begin_src emacs-lisp
(use-package lsp-haskell
  :after lsp-mode
  :config
  (setq lsp-haskell-server-path "haskell-language-server-wrapper"))
#+end_src

** lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-completion-enable t)
  (lsp-completion-provider :capf)
  (lsp-eldoc-enable-hover nil)
  (lsp-eldoc-render-all t)
  (lsp-enable-eldoc nil)
  (lsp-haskell-process-args-hie '("-l" "/tmp/hie.log"))
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-highlight-symbol-at-point nil)
  (lsp-idle-delay 0.6)
  (lsp-inhibit-message t)
  (lsp-prefer-capf t)
  (lsp-prefer-flymake nil)
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-clippy-preference "on")
  (lsp-rust-features ["test"])
  (lsp-server-install-dir (user-data ".cache/lsp"))
  (lsp-session-file (user-data ".lsp-session-v1"))
  :config
  (use-package lsp-lens)
  (use-package lsp-headerline)
  (setq read-process-output-max 16384))
#+end_src

** lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-max-height 60)
  (lsp-ui-doc-text-scale-level 4)
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-show-diagnostics nil)
  (lsp-ui-sideline-show-hover t)
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions]
    #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references]
    #'lsp-ui-peek-find-references))
#+end_src

** lua-mode

#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+end_src

** macrostep

#+begin_src emacs-lisp
(use-package macrostep
  :bind ("C-c e m" . macrostep-expand))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-status-with-prefix))
  :bind (:map magit-mode-map
              ("U" . magit-unstage-all)
              ("M-h") ("M-s") ("M-m") ("M-w"))
  :bind (:map magit-file-section-map ("<C-return>"))
  :bind (:map magit-hunk-section-map ("<C-return>"))
  :custom
  (magit-auto-revert-mode nil)
  (magit-completing-read-function 'my-ivy-completing-read)
  (magit-diff-options nil)
  (magit-diff-refine-hunk t)
  (magit-fetch-arguments nil)
  (magit-git-executable "~/.nix-profile/bin/git")
  (magit-highlight-trailing-whitespace nil)
  (magit-highlight-whitespace nil)
  (magit-log-section-commit-count 10)
  (magit-pre-refresh-hook nil)
  (magit-process-popup-time 15)
  (magit-push-always-verify nil)
  (magit-refresh-status-buffer nil)
  (magit-section-initial-visibility-alist '((untracked . hide)))
  (magit-stage-all-confirm nil)
  (magit-unstage-all-confirm nil)
  (magit-use-overlays nil)
  :preface
  ;; History can be viewed with:
  ;; git log refs/snapshots/$(git symbolic-ref HEAD)
  (defun magit-monitor (&optional no-display)
    "Start git-monitor in the current directory."
    (interactive)
    (let* ((path (file-truename
                  (directory-file-name
                   (expand-file-name default-directory))))
           (name (format "*git-monitor: %s*"
                         (file-name-nondirectory path))))
      (unless (and (get-buffer name)
                   (with-current-buffer (get-buffer name)
                     (string= path (directory-file-name default-directory))))
        (with-current-buffer (get-buffer-create name)
          (cd path)
          (if (file-regular-p ".git")
              (let ((branch (string-chop-newline
                             (shell-command-to-string
                              "git branch --show-current")))
                    (repo
                     (with-temp-buffer
                       (insert-file-contents-literally ".git")
                       (goto-char (point-min))
                       (and (looking-at "^gitdir: \\(.+?/\\.git/\\)")
                            (match-string 1)))))
                (when repo
                  (ignore-errors
                    (start-process "*git-monitor*" (current-buffer)
                                   "git-monitor"
                                   "--git-dir" repo
                                   "--work-dir" path
                                   "-r" (concat "refs/heads/" branch)))))
            (ignore-errors
              (start-process "*git-monitor*" (current-buffer)
                             "git-monitor" "--work-dir" path)))))))

  (defun magit-status-with-prefix ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'magit-status)))

  (defun endless/visit-pull-request-url ()
    "Visit the current branch's PR on Github."
    (interactive)
    (browse-url
     (format "https://github.com/%s/pull/new/%s"
             (replace-regexp-in-string
              "\\`.+github\\.com:\\(.+?\\)\\(\\.git\\)?\\'" "\\1"
              (magit-get "remote" (magit-get-remote) "url"))
             (magit-get-current-branch))))

  :hook (magit-mode . hl-line-mode)
  :config
  (use-package magit-commit
    :config
    (use-package git-commit
      :custom
      (git-commit-mode-hook
       '(turn-on-auto-fill flyspell-mode git-commit-save-message))))

  (use-package magit-files
    :config
    ;;(global-magit-file-mode)
    )

  (add-hook 'magit-status-mode-hook #'(lambda () (magit-monitor t)))

  (define-key magit-mode-map "G" #'endless/visit-pull-request-url)

  (eval-after-load 'magit-pull
    '(transient-insert-suffix 'magit-pull "p"
       '("F" "default" magit-fetch-from-upstream)))

  (eval-after-load 'magit-push
    '(transient-insert-suffix 'magit-push "p"
       '("P" "default" magit-push-current-to-upstream)))

  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-status-headers)
  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)
  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote)
  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent)
  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-pushremote)
  ;; (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-upstream)
  )
#+end_src

*** magit-popup

#+begin_src emacs-lisp
(use-package magit-popup
  :defer t)
#+end_src

*** magit-imerge

#+begin_src emacs-lisp
(use-package magit-imerge
  ;; jww (2017-12-10): Need to configure.
  :disabled t
  :after magit)
#+end_src

** malyon

#+begin_src emacs-lisp
(use-package malyon
  :commands malyon
  :custom
  (malyon-stories-directory "~/doc/games")
  :config
  (defun replace-invisiclues ()
    (interactive)
    (query-replace-regexp
     "^\\( +\\)\\(\\([A-Z]\\)\\. \\)?\\(.+\\)"
     (quote (replace-eval-replacement
             concat "\\1\\2" (replace-quote (rot13 (match-string 4)))))
     nil (if (use-region-p) (region-beginning))
     (if (use-region-p) (region-end)) nil nil)))
#+end_src

** markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\`README\\.md\\'" . gfm-mode)
         ("\\.md\\'"          . markdown-mode)
         ("\\.markdown\\'"    . markdown-mode))
  :custom
  (markdown-command "pandoc -f markdown_github+smart")
  (markdown-command-needs-filename t)
  (markdown-enable-math t)
  (markdown-open-command "marked")
  :custom-face
  (markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.0))))
  (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
  (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
  (markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.2))))
  :init
  (setq markdown-command "multimarkdown"))
#+end_src

** markdown-preview-mode

#+begin_src emacs-lisp
(use-package markdown-preview-mode
  :after markdown-mode
  :config
  (setq markdown-preview-stylesheets
        (list (concat "https://github.com/dmarcotte/github-markdown-preview/"
                      "blob/master/data/css/github.css"))))
#+end_src

** math-symbol-lists

#+begin_src emacs-lisp
(use-package math-symbol-lists
  :defer t)
#+end_src

** mediawiki

#+begin_src emacs-lisp
(use-package mediawiki
  :commands mediawiki-open
  :custom
  (mediawiki-site-alist
   '(("Wikipedia" "https://en.wikipedia.org/w/" "jwiegley" "" nil "Main Page"))))
#+end_src

** memory-usage

#+begin_src emacs-lisp
(use-package memory-usage
  :commands memory-usage)
#+end_src

** mhtml-mode

#+begin_src emacs-lisp
(use-package mhtml-mode
  :bind (:map html-mode-map
              ("<return>" . newline-and-indent)))
#+end_src

** mic-paren

Activate [[https://github.com/emacsattic/mic-paren/blob/master/mic-paren.el][mic-paren.el]] and Emacs will display highlighting on whatever
parenthesis (and paired delimiter if you like this) matches the one before or
after point. This is an extension to the paren.el file distributed with Emacs.
The default behaviour is similar to =paren.el= but more sophisticated. Normally
you can try all default settings to enjoy =mic-paren=.

#+begin_src emacs-lisp
(use-package mic-paren
  :disabled t
  :defer 5
  :config
  (paren-activate))
#+end_src

** midnight

#+begin_src emacs-lisp
(use-package midnight
  :defer 5
  :bind ("C-c z" . clean-buffer-list)
  :custom
  (midnight-delay 18000)
  (midnight-mode t)
  (clean-buffer-list-kill-never-buffer-names
   '("*scratch*"
     "*Messages*"
     "*server*"
     "*Group*"
     "*Org Agenda*"
     "todo.txt"
     "habits.txt"
     "Bahai.txt"
     "OSS.txt"
     "diary"
     "notes.txt"
     "&bitlbee"))
  (clean-buffer-list-kill-never-regexps
   '("^ \\*Minibuf-.*\\*$"
     "^\\*Summary"
     "^\\*Article" "^#"))
  (clean-buffer-list-kill-regexps '(".*")))
#+end_src

** minimap

#+begin_src emacs-lisp
(use-package minimap
  :commands minimap-mode)
#+end_src

** mmm-mode

#+begin_src emacs-lisp
(use-package mmm-mode
  :defer t)
#+end_src

** moccur-edit

#+begin_src emacs-lisp
(use-package moccur-edit
  :after color-moccur)
#+end_src

** monitor

#+begin_src emacs-lisp
(use-package monitor
  :defer t
  :init
  (autoload #'define-monitor "monitor"))
#+end_src

** mule

#+begin_src emacs-lisp
(use-package mule
  :no-require t
  :config
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** multi-term

#+begin_src emacs-lisp
(use-package multi-term
  :bind (("C-c t" . multi-term-next)
         ("C-c T" . multi-term))
  :custom
  (multi-term-program "screen")
  (multi-term-program-switches "-DR")
  (multi-term-scroll-show-maximum-output t)
  (term-bind-key-alist
   '(("C-c C-c" . term-interrupt-subjob)
     ("C-b" . my-term-send-raw-at-prompt)
     ("C-f" . my-term-send-raw-at-prompt)
     ("C-a" . my-term-send-raw-at-prompt)
     ("C-e" . my-term-send-raw-at-prompt)
     ("C-p" . previous-line)
     ("C-n" . next-line)
     ("C-s" . isearch-forward)
     ("C-r" . isearch-backward)
     ("C-m" . term-send-raw)
     ("M-f" . term-send-forward-word)
     ("M-b" . term-send-backward-word)
     ("M->" . my-term-end-of-buffer)
     ("M-o" . term-send-backspace)
     ("M-p" . term-send-up)
     ("M-n" . term-send-down)
     ("M-d" . term-send-forward-kill-word)
     ("M-DEL" . term-send-backward-kill-word)
     ("M-r" . term-send-reverse-search-history)
     ("M-," . term-send-input)
     ("M-." . comint-dynamic-complete)
     ("C-y" . term-paste)))
  :init
  (defun screen ()
    (interactive)
    (let (term-buffer)
      (setq term-buffer
            (let ((multi-term-program (executable-find "screen"))
                  (multi-term-program-switches "-DR"))
              (multi-term-get-buffer)))
      (set-buffer term-buffer)
      (multi-term-internal)
      (switch-to-buffer term-buffer)))

  :config
  (require 'term)

  (defalias 'my-term-send-raw-at-prompt 'term-send-raw)

  (defun my-term-end-of-buffer ()
    (interactive)
    (call-interactively #'end-of-buffer)
    (if (and (eobp) (bolp))
        (delete-char -1)))

  (defadvice term-process-pager (after term-process-rebind-keys activate)
    (define-key term-pager-break-map  "\177" 'term-pager-back-page)))
#+end_src

** multifiles

#+begin_src emacs-lisp
(use-package multifiles
  :bind ("C-c m f" . mf/mirror-region-in-multifile))
#+end_src

** multiple-cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :after phi-search
  :defer 5

  ;; - Sometimes you end up with cursors outside of your view. You can scroll
  ;;   the screen to center on each cursor with `C-v` and `M-v`.
  ;;
  ;; - If you get out of multiple-cursors-mode and yank - it will yank only
  ;;   from the kill-ring of main cursor. To yank from the kill-rings of every
  ;;   cursor use yank-rectangle, normally found at C-x r y.

  :bind (("<C-m> ^"     . mc/edit-beginnings-of-lines)
         ("<C-m> `"     . mc/edit-beginnings-of-lines)
         ("<C-m> $"     . mc/edit-ends-of-lines)
         ("<C-m> '"     . mc/edit-ends-of-lines)
         ("<C-m> R"     . mc/reverse-regions)
         ("<C-m> S"     . mc/sort-regions)
         ("<C-m> W"     . mc/mark-all-words-like-this)
         ("<C-m> Y"     . mc/mark-all-symbols-like-this)
         ("<C-m> a"     . mc/mark-all-like-this-dwim)
         ("<C-m> c"     . mc/mark-all-dwim)
         ("<C-m> l"     . mc/insert-letters)
         ("<C-m> n"     . mc/insert-numbers)
         ("<C-m> r"     . mc/mark-all-in-region)
         ("<C-m> s"     . set-rectangular-region-anchor)
         ("<C-m> %"     . mc/mark-all-in-region-regexp)
         ("<C-m> t"     . mc/mark-sgml-tag-pair)
         ("<C-m> w"     . mc/mark-next-like-this-word)
         ("<C-m> x"     . mc/mark-more-like-this-extended)
         ("<C-m> y"     . mc/mark-next-like-this-symbol)
         ("<C-m> C-x"   . reactivate-mark)
         ("<C-m> C-SPC" . mc/mark-pop)
         ("<C-m> ("     . mc/mark-all-symbols-like-this-in-defun)
         ("<C-m> C-("   . mc/mark-all-words-like-this-in-defun)
         ("<C-m> M-("   . mc/mark-all-like-this-in-defun)
         ("<C-m> ["     . mc/vertical-align-with-space)
         ("<C-m> {"     . mc/vertical-align)

         ("S-<down-mouse-1>")
         ("S-<mouse-1>" . mc/add-cursor-on-click))

  :bind (:map selected-keymap
              ("c"   . mc/edit-lines)
              ("."   . mc/mark-next-like-this)
              ("<"   . mc/unmark-next-like-this)
              ("C->" . mc/skip-to-next-like-this)
              (","   . mc/mark-previous-like-this)
              (">"   . mc/unmark-previous-like-this)
              ("C-<" . mc/skip-to-previous-like-this)
              ("y"   . mc/mark-next-symbol-like-this)
              ("Y"   . mc/mark-previous-symbol-like-this)
              ("w"   . mc/mark-next-word-like-this)
              ("W"   . mc/mark-previous-word-like-this))
  :custom
  (mc/list-file (user-data "mc-lists.el"))
  :preface
  (defun reactivate-mark ()
    (interactive)
    (activate-mark)))
#+end_src

*** mc-calc

#+begin_src emacs-lisp
(use-package mc-calc
  :after multiple-cursors
  :bind (("<C-m> = c" . mc-calc)
         ("<C-m> = =" . mc-calc-eval)
         ("<C-m> = g" . mc-calc-grab)
         ("<C-m> = b" . mc-calc-copy-to-buffer)))
#+end_src

*** mc-extras

#+begin_src emacs-lisp
(use-package mc-extras
  :after multiple-cursors
  :bind (("<C-m> M-C-f" . mc/mark-next-sexps)
         ("<C-m> M-C-b" . mc/mark-previous-sexps)
         ("<C-m> <"     . mc/mark-all-above)
         ("<C-m> >"     . mc/mark-all-below)
         ("<C-m> C-d"   . mc/remove-current-cursor)
         ("<C-m> C-k"   . mc/remove-cursors-at-eol)
         ("<C-m> M-d"   . mc/remove-duplicated-cursors)
         ("<C-m> |"     . mc/move-to-column)
         ("<C-m> ~"     . mc/compare-chars)))
#+end_src

*** mc-freeze

#+begin_src emacs-lisp
(use-package mc-freeze
  :after multiple-cursors
  :bind ("<C-m> f" . mc/freeze-fake-cursors-dwim))
#+end_src

*** mc-rect

#+begin_src emacs-lisp
(use-package mc-rect
  :after multiple-cursors
  :bind ("<C-m> ]" . mc/rect-rectangle-to-multiple-cursors))
#+end_src

*** phi-search

#+begin_src emacs-lisp
(use-package phi-search
  :defer 5
  :custom
  (phi-search-limit 100000))
#+end_src

**** phi-search-mc

#+begin_src emacs-lisp
(use-package phi-search-mc
  :after (phi-search multiple-cursors)
  :config
  (phi-search-mc/setup-keys)
  (add-hook 'isearch-mode-mode #'phi-search-from-isearch-mc/setup-keys))
#+end_src

*** ace-mc

#+begin_src emacs-lisp
(use-package ace-mc
  :bind (("<C-m> h"   . ace-mc-add-multiple-cursors)
         ("<C-m> M-h" . ace-mc-add-single-cursor)))
#+end_src

** nginx-mode

#+begin_src emacs-lisp
(use-package nginx-mode
  :commands nginx-mode)
#+end_src

** nix-shell

#+begin_src emacs-lisp
(use-package nix-shell
  :no-require t
  :init
  (defun nix-shell ()
    (interactive)
    (let ((explicit-shell-file-name "shell")
          (explicit-shell-args nil))
      (call-interactively 'shell))))
#+end_src

** nix-mode

#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'"
  :custom
  (nix-indent-function 'nix-indent-line))
#+end_src

** nix-update

#+begin_src emacs-lisp
(use-package nix-update
  :load-path "lisp/nix-update"
  :bind ("C-c U" . nix-update-fetch))
#+end_src

** nov

#+begin_src emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :custom
  (nov-save-place-file (user-data "nov-places")))
#+end_src

** nroff-mode

#+begin_src emacs-lisp
(use-package nroff-mode
  :commands nroff-mode
  :config
  (defun update-nroff-timestamp ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^\\.Dd " nil t)
        (let ((stamp (format-time-string "%B %e, %Y")))
          (unless (looking-at stamp)
            (delete-region (point) (line-end-position))
            (insert stamp)
            (let (after-save-hook)
              (save-buffer)))))))

  (add-hook 'nroff-mode-hook
            #'(lambda () (add-hook 'after-save-hook #'update-nroff-timestamp nil t))))
#+end_src

** nxml-mode

#+begin_src emacs-lisp
(use-package nxml-mode
  :commands nxml-mode
  :bind (:map nxml-mode-map
              ("<return>" . newline-and-indent)
              ("C-c M-h"  . tidy-xml-buffer))
  :custom
  (nxml-sexp-element-flag t)
  (nxml-slash-auto-complete-flag t)
  :preface
  (defun tidy-xml-buffer ()
    (interactive)
    (save-excursion
      (call-process-region (point-min) (point-max) "tidy" t t nil
                           "-xml" "-i" "-wrap" "0" "-omit" "-q" "-utf8")))
  :init
  (defalias 'xml-mode 'nxml-mode)
  :config
  (autoload 'sgml-skip-tag-forward "sgml-mode")
  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"
                 "<!--"
                 sgml-skip-tag-forward
                 nil)))
#+end_src

** olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :commands olivetti-mode
  :custom
  (olivetti-hide-mode-line t))
#+end_src

** operate-on-number

#+begin_src emacs-lisp
(use-package operate-on-number
  :bind ("C-c N" . operate-on-number-at-point))
#+end_src

** origami

#+begin_src emacs-lisp
(use-package origami
  :hook (rust-mode . origami-mode)
  :bind (:map origami-mode-map
              ("C-, C-h" . origami-toggle-node))
  :init
  ;; We need to tell origami how to work under rust mode
  (with-eval-after-load "origami"
    (add-to-list 'origami-parser-alist '(rust-mode . origami-c-style-parser)))
  :custom
  ;; Highlights the line the fold starts on
  (origami-show-fold-header t)
  :config
  (defun origami-header-overlay-range (fold-overlay)
    "Given a `fold-overlay', return the range that the corresponding
header overlay should cover. Result is a cons cell of (begin . end)."
    (with-current-buffer (overlay-buffer fold-overlay)
      (let ((fold-begin
             (save-excursion
               (goto-char (overlay-start fold-overlay))
               (line-beginning-position)))
            (fold-end
             ;; Find the end of the folded region -- include the following
             ;; newline if possible. The header will span the entire fold.
             (save-excursion
               (save-match-data
                 (goto-char (overlay-end fold-overlay))
                 (when (looking-at ".")
                   (forward-char 1)
                   (when (looking-at "\n")
                     (forward-char 1)))
                 (point)))))
        (cons fold-begin fold-end)))))
#+end_src

** outline

#+begin_src emacs-lisp
(use-package outline
  :diminish outline-minor-mode
  :hook ((emacs-lisp-mode LaTeX-mode) . outline-minor-mode))
#+end_src

** ovpn-mode

#+begin_src emacs-lisp
(use-package ovpn-mode
  :commands ovpn
  :custom
  (ovpn-mode-base-directory "~/.config/openvpn")
  :config
  (advice-add
   'ovpn-mode-pull-authinfo :around
   #'(lambda (ad-do-it config)
       (if (string= config "OpenVPN_PoC_2019_johnwiegley.ovpn")
           (list "johnwiegley"
                 (concat (lookup-password "demonet OpenVPN" "johnwiegley" 80)
                         (password-store--run "otp" "demonet OpenVPN")))
         (funcall ad-do-it config)))))
#+end_src

** package-lint

#+begin_src emacs-lisp
(use-package package-lint
  :commands package-lint-current-buffer)
#+end_src

** pact-mode

#+begin_src emacs-lisp
(use-package pact-mode
  :mode "\\.pact\\'"
  :config
  (add-hook 'pact-mode-hook
            #'(lambda ()
                (bind-key "C-c C-c"
                          #'(lambda () (interactive)
                              (save-excursion
                                (call-interactively 'pact-compile)))
                          'slime-mode-map))))
#+end_src

** pandoc-mode

#+begin_src emacs-lisp
(use-package pandoc-mode
  :hook (markdown-mode
         (pandoc-mode   . pandoc-load-default-settings)))
#+end_src

** paradox

#+begin_src emacs-lisp
(use-package paradox
  :commands paradox-list-packages)
#+end_src

** paredit

#+begin_src emacs-lisp
(use-package paredit
  :diminish
  :hook ((lisp-mode emacs-lisp-mode) . paredit-mode)
  :bind (:map paredit-mode-map
              ("[")
              ("M-k"   . paredit-raise-sexp)
              ("M-I"   . paredit-splice-sexp)
              ("C-M-l" . paredit-recentre-on-sexp)
              ("C-c ( n"   . paredit-add-to-next-list)
              ("C-c ( p"   . paredit-add-to-previous-list)
              ("C-c ( j"   . paredit-join-with-next-list)
              ("C-c ( J"   . paredit-join-with-previous-list))
  :bind (:map lisp-mode-map       ("<return>" . paredit-newline))
  :bind (:map emacs-lisp-mode-map ("<return>" . paredit-newline))
  :hook (paredit-mode
         . (lambda ()
             (unbind-key "M-r" paredit-mode-map)
             (unbind-key "M-s" paredit-mode-map)))
  :config
  (require 'eldoc)
  (eldoc-add-command 'paredit-backward-delete
                     'paredit-close-round))
#+end_src

*** paredit-ext

#+begin_src emacs-lisp
(use-package paredit-ext
  :after paredit)
#+end_src

** pass

#+begin_src emacs-lisp
(use-package pass
  :commands (pass pass-view-mode)
  :mode ("\\.passwords/.*\\.gpg\\'" . pass-view-mode)
  :preface
  (defun insert-password ()
    (interactive)
    (shell-command "apg -m24 -x24 -a1 -n1" t))

  (add-hook 'pass-view-mode-hook #'pass-view--prepare-otp))
#+end_src

** password-store

#+begin_src emacs-lisp
(use-package password-store
  :defer 5
  :commands (password-store-insert
             password-store-copy
             password-store-get)
  :custom
  (password-store-password-length 24)
  :config
  (defun password-store--run-edit (entry)
    (require 'pass)
    (find-file (concat (expand-file-name entry (password-store-dir)) ".gpg")))

  (defun password-store-insert (entry login password)
    "Insert a new ENTRY containing PASSWORD."
    (interactive (list (read-string "Password entry: ")
                       (read-string "Login: ")
                       (read-passwd "Password: " t)))
    (message "%s" (shell-command-to-string
                   (if (string= "" login)
                       (format "echo %s | %s insert -m -f %s"
                               (shell-quote-argument password)
                               password-store-executable
                               (shell-quote-argument entry))
                     (format "echo -e '%s\nlogin: %s' | %s insert -m -f %s"
                             password login password-store-executable
                             (shell-quote-argument entry)))))))
#+end_src

** password-store-otp

#+begin_src emacs-lisp
(use-package password-store-otp
  :defer t
  :config
  (defun password-store-otp-append-from-image (entry)
    "Check clipboard for an image and scan it to get an OTP URI,
append it to ENTRY."
    (interactive (list (read-string "Password entry: ")))
    (let ((qr-image-filename (password-store-otp--get-qr-image-filename entry)))
      (when (not (zerop (call-process "screencapture" nil nil nil
                                      "-T5" qr-image-filename)))
        (error "Couldn't get image from clipboard"))
      (with-temp-buffer
        (condition-case nil
            (call-process "zbarimg" nil t nil "-q" "--raw"
                          qr-image-filename)
          (error
           (error "It seems you don't have `zbar-tools' installed")))
        (password-store-otp-append
         entry
         (buffer-substring (point-min) (point-max))))
      (when (not password-store-otp-screenshots-path)
        (delete-file qr-image-filename)))))
#+end_src

** pcomplete

#+begin_src emacs-lisp
(use-package pcomplete
  :defer t
  :custom
  (pcomplete-compare-entry-function 'file-newer-than-file-p))
#+end_src

** pcre2el

#+begin_src emacs-lisp
(use-package pcre2el
  :commands (rxt-mode rxt-global-mode))
#+end_src

** pdf-tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer 15
  :magic ("%PDF" . pdf-view-mode)
  :custom
  (pdf-tools-handle-upgrades nil)
  :config
  (dolist
      (pkg
       '(pdf-annot pdf-cache pdf-dev pdf-history pdf-info pdf-isearch
                   pdf-links pdf-misc pdf-occur pdf-outline pdf-sync
                   pdf-util pdf-view pdf-virtual))
    (require pkg))
  (pdf-tools-install))
#+end_src

** per-window-point

#+begin_src emacs-lisp
(use-package per-window-point
  :defer 5
  :commands pwp-mode
  :config
  (pwp-mode 1))
#+end_src

** persistent-scratch

#+begin_src emacs-lisp
(use-package persistent-scratch
  :unless (or (null window-system)
              alternate-emacs
              noninteractive)
  :defer 5
  :custom
  (persistent-scratch-autosave-interval 30)
  (persistent-scratch-backup-directory nil)
  (persistent-scratch-save-file (user-data "persistent-scratch"))
  :config
  (persistent-scratch-autosave-mode)
  (with-demoted-errors "Error: %S"
    (persistent-scratch-setup-default))
  :commands persistent-scratch-setup-default)
#+end_src

** personal

#+begin_src emacs-lisp
(use-package personal
  :init
  (define-key key-translation-map (kbd "A-TAB") (kbd "C-TAB"))

  :commands unfill-region
  :bind (("M-L"  . mark-line)
         ("M-S"  . mark-sentence)
         ("M-j"  . delete-indentation-forward)

         ("M-D"  . my-open-Messages)
         ("M-R"  . my-open-PathFinder)
         ("M-K"  . my-open-KeyboardMaestro)

         ("C-c )"   . close-all-parentheses)
         ("C-c 0"   . recursive-edit-preserving-window-config-pop)
         ("C-c 1"   . recursive-edit-preserving-window-config)
         ("C-c C-0" . copy-current-buffer-name)
         ("C-c C-z" . delete-to-end-of-buffer)
         ("C-c M-q" . unfill-paragraph)
         ("C-c e P" . check-papers)
         ("C-c e b" . do-eval-buffer)
         ("C-c e r" . do-eval-region)
         ("C-c e s" . scratch)
         ("C-c n u" . insert-user-timestamp)
         ("C-x D"   . duplicate-line)
         ("C-x C-v" . find-alternate-file-with-sudo)
         ("C-x K"   . delete-current-buffer-file)
         ("C-x M-q" . refill-paragraph)
         ("C-x C-n" . next-line)
         ("C-x C-p" . previous-line))
  :custom
  (user-initials "jww")
  :preface
  (defun my-open-Messages ()
    (interactive)
    (call-process "/usr/bin/open" nil nil nil
                  "/Applications/Messages.app"))

  (defun my-open-PathFinder ()
    (interactive)
    (call-process "/usr/bin/open" nil nil nil
                  (expand-file-name
                   "~/Applications/Path Finder.app")))

  (defun my-open-KeyboardMaestro ()
    (interactive)
    (call-process "/usr/bin/open" nil nil nil
                  (expand-file-name
                   "~/Applications/Keyboard Maestro.app")))

  :init
  (bind-keys ("<C-M-backspace>" . backward-kill-sexp)

             ("M-'"   . insert-pair)
             ("M-J"   . delete-indentation)
             ("M-\""  . insert-pair)
             ("M-`"   . other-frame)
             ("M-g c" . goto-char)

             ("C-c SPC" . just-one-space)
             ("C-c M-;" . comment-and-copy)
             ("C-c e c" . cancel-debug-on-entry)
             ("C-c e d" . debug-on-entry)
             ("C-c e e" . toggle-debug-on-error)
             ("C-c e f" . emacs-lisp-byte-compile-and-load)
             ("C-c e j" . emacs-lisp-mode)
             ("C-c e z" . byte-recompile-directory)
             ("C-c e 0" . profiler-start)
             ("C-c e 1" . profiler-stop)
             ("C-c e 2" . profiler-report)
             ("C-c f"   . flush-lines)
             ("C-c g"   . goto-line)
             ("C-c k"   . keep-lines)
             ("C-c m k" . kmacro-keymap)
             ("C-c m m" . emacs-toggle-size)
             ("C-c q"   . fill-region)
             ("C-c s"   . replace-string)
             ("C-c u"   . rename-uniquely)
             ("C-h e a" . apropos-value)
             ("C-h e e" . view-echo-area-messages)
             ("C-h e f" . find-function)
             ("C-h e k" . find-function-on-key)
             ("C-h e v" . find-variable)
             ("C-h h")
             ("C-h v"   . describe-variable)
             ("C-x C-e" . pp-eval-last-sexp)
             ("C-x d"   . delete-whitespace-rectangle)
             ("C-x t"   . toggle-truncate-lines)
             ("C-z"     . delete-other-windows))

  :init
  (defun my-adjust-created-frame ()
    (set-frame-font
     "-*-DejaVu Sans Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
    (set-frame-size (selected-frame) 75 50)
    (set-frame-position (selected-frame) 10 35))

  (advice-add 'make-frame-command :after #'my-adjust-created-frame))
#+end_src

** plantuml-mode

#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :custom
  (plantuml-default-exec-mode 'executable)
  (plantuml-jar-path "~/.nix-profile/lib/plantuml.jar"))
#+end_src

** po-mode

#+begin_src emacs-lisp
(use-package po-mode
  :disabled t
  :mode "\\.\\(po\\'\\|po\\.\\)")
#+end_src

** popup-ruler

#+begin_src emacs-lisp
(use-package popup-ruler
  :disabled t
  :bind ("C-c R" . popup-ruler))
#+end_src

** pp-c-l

#+begin_src emacs-lisp
(use-package pp-c-l
  :hook (prog-mode . pretty-control-l-mode)
  :custom
  (pp^L-^L-string "                                            "))
#+end_src

** prodigy

#+begin_src emacs-lisp
(use-package prodigy
  :commands prodigy)
#+end_src

** projectile

#+begin_src emacs-lisp
(use-package projectile
  :defer 5
  :diminish
  :bind* (("C-c TAB" . projectile-find-other-file)
          ("C-c P" . (lambda () (interactive)
                       (projectile-cleanup-known-projects)
                       (projectile-discover-projects-in-search-path))))
  :bind-keymap ("C-c p" . projectile-command-map)
  :custom
  (projectile-cache-file (user-data "projectile.cache"))
  (projectile-completion-system 'ivy)
  (projectile-enable-caching t)
  (projectile-file-exists-local-cache-expire 300)
  (projectile-globally-ignored-directories
   '(".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "dist" "\\`/nix/.+" ".*/\\..*"))
  (projectile-globally-ignored-files '("TAGS"))
  (projectile-ignored-project-function
   (lambda
     (path)
     (string-match "\\(:?\\`/\\(:?nix\\|tmp\\)\\|/\\.nix-profile\\)" path)))
  (projectile-keymap-prefix "p")
  (projectile-known-projects-file (user-data "projectile-bookmarks.eld"))
  (projectile-other-file-alist
   '(("cpp" "h" "hpp" "ipp")
     ("ipp" "h" "hpp" "cpp")
     ("hpp" "h" "ipp" "cpp" "cc")
     ("cxx" "h" "hxx" "ixx")
     ("ixx" "h" "hxx" "cxx")
     ("hxx" "h" "ixx" "cxx")
     ("c" "h")
     ("m" "h")
     ("mm" "h")
     ("h" "c" "cc" "cpp" "ipp" "hpp" "cxx" "ixx" "hxx" "m" "mm")
     ("cc" "h" "hh" "hpp")
     ("hh" "cc")
     ("vert" "frag")
     ("frag" "vert")
     (nil "lock" "gpg")
     ("lock" "")
     ("gpg" "")
     ("mli" "ml")
     ("ml" "mli")
     ("hs-boot" "hs")
     ("hs" "hs-boot")
     ("nix" "exp")
     ("exp" "nix")))
  (projectile-project-search-path '("~/src"))
  (projectile-sort-order 'recentf)
  :config
  (projectile-global-mode)

  (defun my-projectile-invalidate-cache (&rest _args)
    (projectile-invalidate-cache nil))

  (eval-after-load 'magit-branch
    '(progn
       (advice-add 'magit-checkout
                   :after #'my-projectile-invalidate-cache)
       (advice-add 'magit-branch-and-checkout
                   :after #'my-projectile-invalidate-cache))))
#+end_src

** proof-general

#+begin_src emacs-lisp
(use-package proof-site
  :custom
  (proof-auto-action-when-deactivating-scripting 'retract)
  (proof-autosend-enable nil)
  (proof-electric-terminator-enable t)
  (proof-fast-process-buffer nil)
  (proof-script-fly-past-comments t)
  (proof-shell-fiddle-frames nil)
  (proof-splash-enable nil)
  (proof-sticky-errors t)
  (proof-tidy-response t)
  :custom-face
  (proof-eager-annotation-face ((t nil)))
  (proof-locked-face ((t (:background "#180526"))))
  (proof-omitted-proof-face ((t (:extend t :background "#23103c"))))
  (proof-queue-face ((t (:background "#431807"))))
  (proof-script-sticky-error-face ((t (:background "#50110e"))))
  (proof-warning-face ((t (:background "orange4"))))
  :preface
  (defun my-layout-proof-windows ()
    (interactive)
    (proof-layout-windows)
    (proof-prf))
  :config
  (use-package coq
    :defer t
    :custom
    (coq-compile-auto-save 'save-coq)
    (coq-compile-before-require t)
    (coq-compile-parallel-in-background t)
    (coq-holes-minor-mode nil)
    (coq-maths-menu-enable t)
    (coq-one-command-per-line nil)
    (coq-prefer-top-of-conclusion t)
    (coq-prog-args '("-emacs"))
    :custom-face
    (coq-symbol-face ((t (:inherit default-face))))
    :config
    (defalias 'coq-SearchPattern #'coq-SearchIsos)

    (bind-keys :map coq-mode-map
               ("M-RET"       . proof-goto-point)
               ("RET"         . newline-and-indent)
               ("C-c h")
               ("C-c C-p"     . my-layout-proof-windows)
               ("C-c C-a C-s" . coq-Search)
               ("C-c C-a C-o" . coq-SearchPattern)
               ("C-c C-a C-a" . coq-Search)
               ("C-c C-a C-r" . coq-SearchRewrite))

    (add-hook 'coq-mode-hook
              #'(lambda ()
                  (set-input-method "Agda")
                  (holes-mode -1)
                  (when (featurep 'company)
                    (company-coq-mode 1))
                  (abbrev-mode -1)

                  (bind-key "A-g" #'(lambda () (interactive) (insert "Γ")) 'coq-mode-map)
                  (bind-key "A-t" #'(lambda () (interactive) (insert "τ")) 'coq-mode-map)
                  (bind-key "A-r" #'(lambda () (interactive) (insert "ρ")) 'coq-mode-map)
                  (bind-key "A-k" #'(lambda () (interactive) (insert "κ")) 'coq-mode-map)

                  (set (make-local-variable 'fill-nobreak-predicate)
                       #'(lambda ()
                           (pcase (get-text-property (point) 'face)
                             ('font-lock-comment-face nil)
                             ((and (pred listp)
                                   x (guard (memq 'font-lock-comment-face x)))
                              nil)
                             (_ t)))))))

  (use-package pg-user
    :defer t
    :config
    (defadvice proof-retract-buffer
        (around my-proof-retract-buffer activate)
      (condition-case err ad-do-it
        (error (shell-command "killall coqtop"))))))
#+end_src

*** company-coq

#+begin_src emacs-lisp
(use-package company-coq
  :after coq
  :commands company-coq-mode
  :bind (:map company-coq-map
              ("M-<return>"))
  :bind (:map coq-mode-map
              ("C-M-h" . company-coq-toggle-definition-overlay))
  :custom
  (company-coq-disabled-features
   '(hello prettify-symbols smart-subscripts dynamic-symbols-backend))
  (company-coq-prettify-symbols-alist
   '(("|-" . 8866)
     ("True" . 8868)
     ("False" . 8869)
     ("->" . 8594)
     ("-->" . 10230)
     ("<-" . 8592)
     ("<--" . 10229)
     ("<->" . 8596)
     ("<-->" . 10231)
     ("==>" . 10233)
     ("<==" . 10232)
     ("++>" . 10239)
     ("<++" . 11059)
     ("fun" . 955)
     ("forall" . 8704)
     ("exists" . 8707)
     ("/\\" . 8743)
     ("\\/" . 8744)
     ("~" . 172)
     ("+-" . 177)
     ("<=" . 8804)
     (">=" . 8805)
     ("<>" . 8800)
     ("*" . 215)
     ("++" . 10746)
     ("nat" . 120029)
     ("Z" . 8484)
     ("N" . 8469)
     ("Q" . 8474)
     ("Real" . 8477)
     ("bool" . 120121)
     ("Prop" . 120031)))
  :custom-face
  (company-coq-features/code-folding-bullet-face ((t (:weight bold)))))
#+end_src

*** coq-lookup

#+begin_src emacs-lisp
(use-package coq-lookup
  :bind ("C-h q" . coq-lookup)
  :custom
  (coq-lookup-browse-pdf-function
   '(lambda (pdf page) (call-process "open" nil nil nil pdf)))
  (coq-lookup-pdf "~/.local/share/coq/coq-8.15.2-reference-manual.pdf"))
#+end_src

** protobuf-mode

#+begin_src emacs-lisp
(use-package protobuf-mode
  :mode "\\.proto\\'")
#+end_src

** prover

#+begin_src emacs-lisp
(use-package prover
  :after coq)
#+end_src

** ps-print

#+begin_src emacs-lisp
(use-package ps-print
  :defer t
  :custom
  (ps-font-size '(8 . 10))
  (ps-footer-font-size '(12 . 14))
  (ps-header-font-size '(12 . 14))
  (ps-header-title-font-size '(14 . 16))
  (ps-line-number-font-size 10)
  (ps-print-color-p nil)
  :preface
  (defun ps-spool-to-pdf (beg end &rest ignore)
    (interactive "r")
    (let ((temp-file (concat (make-temp-name "ps2pdf") ".pdf")))
      (call-process-region beg end (executable-find "ps2pdf")
                           nil nil nil "-" temp-file)
      (call-process (executable-find "open") nil nil nil temp-file)))
  :config
  (setq ps-print-region-function 'ps-spool-to-pdf))
#+end_src

** python-mode

#+begin_src emacs-lisp
(use-package python-mode
  :mode "\\.py\\'"
  :interpreter "python"
  :bind (:map python-mode-map
              ("C-c c")
              ("C-c C-z" . python-shell))
  :config
  (defvar python-mode-initialized nil)

  (defun my-python-mode-hook ()
    (unless python-mode-initialized
      (setq python-mode-initialized t)

      (info-lookup-add-help
       :mode 'python-mode
       :regexp "[a-zA-Z_0-9.]+"
       :doc-spec
       '(("(python)Python Module Index" )
         ("(python)Index"
          (lambda
            (item)
            (cond
             ((string-match
               "\\([A-Za-z0-9_]+\\)() (in module \\([A-Za-z0-9_.]+\\))" item)
              (format "%s.%s" (match-string 2 item)
                      (match-string 1 item)))))))))

    (set (make-local-variable 'parens-require-spaces) nil)
    (setq indent-tabs-mode nil))

  (add-hook 'python-mode-hook #'my-python-mode-hook))
#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** rainbow-mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :commands rainbow-mode)
#+end_src

** re-builder

#+begin_src emacs-lisp
(use-package re-builder
  :bind (("C-c R" . re-builder))
  :config (setq reb-re-syntax 'string))
#+end_src

** recentf

#+begin_src emacs-lisp
(use-package recentf
  :defer 10
  :commands (recentf-mode
             recentf-add-file
             recentf-apply-filename-handlers)
  :custom
  (recentf-auto-cleanup 60)
  (recentf-exclude
   '("~\\'" "\\`out\\'" "\\.log\\'" "^/[^/]*:" "\\.el\\.gz\\'"))
  (recentf-max-saved-items 2000)
  (recentf-save-file (user-data "recentf"))
  :preface
  (defun recentf-add-dired-directory ()
    (if (and dired-directory
             (file-directory-p dired-directory)
             (not (string= "/" dired-directory)))
        (let ((last-idx (1- (length dired-directory))))
          (recentf-add-file
           (if (= ?/ (aref dired-directory last-idx))
               (substring dired-directory 0 last-idx)
             dired-directory)))))
  :hook (dired-mode . recentf-add-dired-directory)
  :config
  (recentf-mode 1))
#+end_src

** rect

#+begin_src emacs-lisp
(use-package rect
  :bind ("C-c ]" . rectangle-mark-mode))
#+end_src

** redshank

#+begin_src emacs-lisp
(use-package redshank
  :diminish
  :hook ((lisp-mode emacs-lisp-mode) . redshank-mode))
#+end_src

** reftex

#+begin_src emacs-lisp
(use-package reftex
  :after auctex
  :hook (LaTeX-mode . reftex-mode)
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-trust-label-prefix t))
#+end_src

** regex-tool

#+begin_src emacs-lisp
(use-package regex-tool
  :load-path "lisp/regex-tool"
  :commands regex-tool
  :custom
  (regex-tool-backend 'perl))
#+end_src

** repl-toggle

#+begin_src emacs-lisp
(use-package repl-toggle
  ;; jww (2017-12-10): Need to configure.
  :disabled t)
#+end_src

** restclient

#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.rest\\'" . restclient-mode))
#+end_src

** reveal-in-osx-finder

#+begin_src emacs-lisp
(use-package reveal-in-osx-finder
  :no-require t
  :bind ("C-c M-v" .
         (lambda () (interactive)
           (call-process "/usr/bin/open" nil nil nil
                         "-R" (expand-file-name
                               (or (buffer-file-name)
                                   default-directory))))))
#+end_src

** riscv-mode

#+begin_src emacs-lisp
(use-package riscv-mode
  :commands riscv-mode)
#+end_src

** ruby-mode

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :bind (:map ruby-mode-map
              ("<return>" . my-ruby-smart-return))
  :preface
  (defun my-ruby-smart-return ()
    (interactive)
    (when (memq (char-after) '(?\| ?\" ?\'))
      (forward-char))
    (call-interactively 'newline-and-indent)))
#+end_src

** rust-mode

#+begin_src emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'"
  :custom
  (rust-format-on-save t)
  :init
  (add-hook 'rust-mode-hook #'my-rust-mode-init)
  :preface
  (defun my-update-cargo-path (&rest _args)
    (setq cargo-process--custom-path-to-bin
          (executable-find "cargo")))

  (defun my-cargo-target-dir (path)
    (replace-regexp-in-string "kadena" "Products" path))

  (defun my-update-cargo-args (ad-do-it name command &optional last-cmd opens-external)
    (let* ((cmd (car (split-string command)))
           (new-args
            (if (member cmd '("build" "check" "clippy" "doc" "test"))
                (let ((args
                       (format "--target-dir=%s -j8"
                               (my-cargo-target-dir
                                (replace-regexp-in-string
                                 "target" "target--custom"
                                 (regexp-quote (getenv "CARGO_TARGET_DIR")))))))
                  (if (member cmd '("build"))
                      (concat "--message-format=short " args)
                    args))
              ""))
           (cargo-process--command-flags
            (pcase (split-string cargo-process--command-flags " -- ")
              (`(,before ,after)
               (concat before " " new-args " -- " after))
              (_ (concat cargo-process--command-flags new-args)))))
      (funcall ad-do-it name command last-cmd opens-external)))

  (defun my-rust-mode-init ()
    (advice-add 'direnv-update-directory-environment
                :after #'my-update-cargo-path)
    (advice-add 'cargo-process--start :around #'my-update-cargo-args)
    (direnv-update-environment default-directory)

    (cargo-minor-mode 1)
    (yas-minor-mode-on)

    (if dot-emacs-use-eglot
        (progn
          (require 'eglot)
          (when (functionp 'eglot)
            (bind-key "M-n" #'flymake-goto-next-error rust-mode-map)
            (bind-key "M-p" #'flymake-goto-prev-error rust-mode-map)

            (bind-key "C-c C-c v" #'(lambda ()
                                      (interactive)
                                      (shell-command "rustdocs std"))
                      rust-mode-map)

            (defun my-rust-project-find-function (dir)
              (let ((root (locate-dominating-file dir "Cargo.toml")))
                (and root (cons 'transient root))))

            (with-eval-after-load 'project
              (add-to-list 'project-find-functions 'my-rust-project-find-function))

            (let* ((current-server (eglot-current-server))
                   (live-p (and current-server (jsonrpc-running-p current-server))))
              (unless live-p
                (call-interactively #'eglot)))

            (company-mode 1)))
      (when (functionp 'lsp)
        (lsp)))))
#+end_src

** rustic

#+begin_src emacs-lisp
(use-package rustic
  :disabled t
  :unless dot-emacs-use-eglot
  :mode ("\\.rs\\'" . rustic-mode)
  :custom
  (rustic-format-trigger 'on-save)
  (rustic-rustfmt-args "--edition 2021")
  :preface
  (defun my-update-cargo-args (ad-do-it command &optional args)
    (let* ((cmd (car (split-string command)))
           (new-args
            (if (member cmd '("build" "check" "clippy" "doc" "test"))
                (let ((args
                       (format "--target-dir=%s -j8"
                               (my-cargo-target-dir
                                (replace-regexp-in-string
                                 "target" "target--custom"
                                 (regexp-quote (getenv "CARGO_TARGET_DIR")))))))
                  (if (member cmd '("build"))
                      (concat "--message-format=short " args)
                    args))
              ""))
           (args
            (pcase (and args (split-string args " -- "))
              (`(,before ,after)
               (concat before " " new-args " -- " after))
              (_ (concat args new-args)))))
      (funcall ad-do-it command args)))

  (defun my-rustic-mode-hook ()
    (advice-add 'rustic-run-cargo-command :around #'my-update-cargo-args)
    (direnv-update-environment default-directory)

    (setq lsp-rust-analyzer-server-command
          (list (substring (shell-command-to-string "which rust-analyzer") 0 -1)))
    (setq rustic-analyzer-command lsp-rust-analyzer-server-command)

    (flycheck-mode 1)
    (yas-minor-mode-on)

    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
  :bind (:map rustic-mode-map
              ("M-j"         . lsp-ui-imenu)
              ("M-?"         . lsp-find-references)
              ("C-c d"       . lsp-ui-doc-show)
              ("C-c h"       . lsp-ui-doc-hide)
              ("C-c C-c l"   . flycheck-list-errors)
              ("C-c C-c a"   . lsp-execute-code-action)
              ("C-c C-c r"   . lsp-rename)
              ("C-c C-c q"   . lsp-workspace-restart)
              ("C-c C-c Q"   . lsp-workspace-shutdown)
              ("C-c C-c s"   . lsp-rust-analyzer-status)
              ("C-c C-c C-y" . rustic-cargo-clippy))
  :config
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'my-rustic-mode-hook))
#+end_src

*** rustic-flycheck

#+begin_src emacs-lisp
(use-package rustic-flycheck
  :after rustic
  :config
  (defun my-rust-project-find-function (dir)
    (let ((root (locate-dominating-file dir "Cargo.toml")))
      (and root (cons 'transient root))))

  (with-eval-after-load 'project
    (add-to-list 'project-find-functions 'my-rust-project-find-function))

  (defun project-root (project)
    (car (project-roots project)))

  (defun first-dominating-file (file name)
    (aif (locate-dominating-file file name)
        (or (first-dominating-file
             (file-name-directory (directory-file-name it)) name) it)))

  (defun flycheck-rust-manifest-directory ()
    (and buffer-file-name
         (first-dominating-file buffer-file-name "Cargo.toml")))

  (require 'flycheck)
  (push 'rustic-clippy flycheck-checkers)

  (setq rustic-clippy-arguments
        (concat "--all-targets "
                "--all-features "
                "-- "
                "-D warnings "
                "-D clippy::all "
                "-D clippy::mem_forget "
                "-C debug-assertions=off"))

  (defun rustic-cargo-clippy (&optional arg)
    (interactive "P")
    (rustic-cargo-clippy-run
     (cond (arg
            (setq rustic-clippy-arguments (read-from-minibuffer "Cargo clippy arguments: " rustic-clippy-arguments)))
           ((eq major-mode 'rustic-popup-mode)
            rustic-clippy-arguments)
           (t rustic-clippy-arguments))))

  (setq rustic-flycheck-clippy-params
        (concat "--message-format=json " rustic-clippy-arguments)))
#+end_src

** savehist

#+begin_src emacs-lisp
(use-package savehist
  :unless noninteractive
  :custom
  (savehist-additional-variables
   '(file-name-history
     kmacro-ring
     compile-history
     compile-command))
  (savehist-autosave-interval 60)
  (savehist-file (user-data "history"))
  (savehist-ignored-variables
   '(load-history
     flyspell-auto-correct-ring
     org-roam-node-history
     counsel-git-grep-history
     magit-revision-history
     counsel-describe-symbol-history
     org-read-date-history
     query-replace-history
     counsel-M-x-history
     yes-or-no-p-history
     ido-buffer-history
     read-expression-history
     ivy-history
     kill-ring))
  (savehist-mode t)
  :config
  (savehist-mode 1))
#+end_src

** saveplace

#+begin_src emacs-lisp
(use-package saveplace
  :unless noninteractive
  :custom
  (save-place-file (user-data "places"))
  :config
  (save-place-mode 1))
#+end_src

** sbt-mode

#+begin_src emacs-lisp
(use-package sbt-mode
  :mode "\\.sbt\\'")
#+end_src

** scala-mode

#+begin_src emacs-lisp
(use-package scala-mode
  :mode "\\.scala\\'")
#+end_src

** sdcv-mode

#+begin_src emacs-lisp
(use-package sdcv-mode
  :bind ("C-c W" . my-sdcv-search)
  :config
  (defvar sdcv-index nil)

  (defun my-sdcv-search ()
    (interactive)
    (flet ((read-string
            (prompt &optional initial-input history
                    default-value inherit-input-method)
            (ivy-read
             prompt
             (or sdcv-index
                 (with-temp-buffer
                   (insert-file-contents
                    "~/.local/share/dictionary/websters.index")
                   (goto-char (point-max))
                   (insert ")")
                   (goto-char (point-min))
                   (insert "(")
                   (goto-char (point-min))
                   (setq sdcv-index (read (current-buffer)))))
             :history history
             :initial-input initial-input
             :def default-value)))
      (call-interactively #'sdcv-search))))
#+end_src

** selected

#+begin_src emacs-lisp
(use-package selected
  :demand t
  :diminish selected-minor-mode
  :bind (:map selected-keymap
              ("[" . align-code)
              ("f" . fill-region)
              ("U" . unfill-region)
              ("d" . downcase-region)
              ("r" . reverse-region)
              ("S" . sort-lines))
  :config
  (selected-global-mode 1))
#+end_src

** separedit

#+begin_src emacs-lisp
(use-package separedit
  :commands separedit
  :bind ("C-c C-'" . separedit-dwim))
#+end_src

** server

#+begin_src emacs-lisp
(use-package server
  :unless (or noninteractive
              alternate-emacs)
  :no-require
  :config
  (unless (file-exists-p "/tmp/johnw-emacs")
    (make-directory "/tmp/johnw-emacs")
    (chmod "/tmp/johnw-emacs" 448))
  (setq server-socket-dir "/tmp/johnw-emacs")
  :hook (after-init . server-start))
#+end_src

** sh-script

#+begin_src emacs-lisp
(use-package sh-script
  :defer t
  :init
  (defvar sh-script-initialized nil)
  (defun initialize-sh-script ()
    (unless sh-script-initialized
      (setq sh-script-initialized t)
      (info-lookup-add-help :mode 'shell-script-mode
                            :regexp ".*"
                            :doc-spec '(("(bash)Index")))))
  (add-hook 'shell-mode-hook #'initialize-sh-script))
#+end_src

** shackle

#+begin_src emacs-lisp
(use-package shackle
  :unless alternate-emacs
  :defer 5
  :commands shackle-mode
  :custom
  (shackle-default-rule '(:select t))
  (shackle-rules
   '((compilation-mode :select nil :size 0.6)
     ("\\`\\*Messages" :select t :align t :size 0.6)
     ("\\` \\*Lusty-Matches\\*" :regexp t :noselect t)
     ("\\`\\*fetch" :regexp t :size 0.25 :noselect t :align bottom)
     ("\\`\\*Flycheck" :regexp t :size 0.2 :noselect t :align bottom)
     ("\\`\\*?magit-diff" :regexp t :align bottom :noselect t)
     ("\\`\\*makey" :regexp t :align bottom :noselect t)))
  :config
  (shackle-mode 1))
#+end_src

** shell

#+begin_src emacs-lisp
(use-package shell
  :defer 5
  :custom
  (explicit-shell-file-name "~/.emacs.d/runshell"))
#+end_src

** shell-toggle

#+begin_src emacs-lisp
(use-package shell-toggle
  :bind ("C-, C-z" . shell-toggle)
  :custom
  (shell-toggle-launch-shell 'shell))
#+end_src

** shift-number

#+begin_src emacs-lisp
(use-package shift-number
  :bind (("C-c +" . shift-number-up)
         ("C-c -" . shift-number-down)))
#+end_src

** sky-color-clock

#+begin_src emacs-lisp
(use-package sky-color-clock
  :defer 5
  :commands sky-color-clock
  :custom
  (sky-color-clock-format "%-l:%M %p")
  :config
  (require 'solar)
  (sky-color-clock-initialize calendar-latitude)
  (setq display-time-string-forms '((sky-color-clock))))
#+end_src

** slime

#+begin_src emacs-lisp
(use-package slime
  :commands slime
  :custom
  (slime-kill-without-query-p t)
  (slime-repl-history-file (user-data "slime-history.eld"))
  (slime-startup-animation nil)
  :init
  ;; (unless (memq major-mode
  ;;               '(emacs-lisp-mode inferior-emacs-lisp-mode ielm-mode))
  ;;   ("M-q" . slime-reindent-defun)
  ;;   ("M-l" . slime-selector))

  (setq inferior-lisp-program "sbcl"
        slime-contribs '(slime-fancy)))
#+end_src

** smart-mode-line

#+begin_src emacs-lisp
(use-package smart-mode-line
  :config
  ;; See https://github.com/Malabarba/smart-mode-line/issues/217
  (setq mode-line-format (delq 'mode-line-position mode-line-format))
  (sml/setup)
  (sml/apply-theme 'light)
  (remove-hook 'display-time-hook 'sml/propertize-time-string))
#+end_src

** smart-newline

#+begin_src emacs-lisp
(use-package smart-newline
  :diminish
  :commands smart-newline-mode)
#+end_src

** smartparens

#+begin_src emacs-lisp
(use-package smartparens-config
  :commands smartparens-mode
  :custom
  (sp-highlight-pair-overlay nil))
#+end_src

** smartscan

#+begin_src emacs-lisp
(use-package smartscan
  :defer 5
  :bind (:map smartscan-map
              ("C->" . smartscan-symbol-go-forward)
              ("C-<" . smartscan-symbol-go-backward)))
#+end_src

** smerge-mode

#+begin_src emacs-lisp
(use-package smerge-mode
  :commands smerge-mode)
#+end_src

** smex

#+begin_src emacs-lisp
(use-package smex
  :defer 5
  :commands smex
  :custom
  (smex-history-length 20)
  (smex-save-file (user-data "smex-items")))
#+end_src

** sort-words

#+begin_src emacs-lisp
(use-package sort-words
  :commands sort-words)
#+end_src

** sql

#+begin_src emacs-lisp
(use-package sql
  :defer t
  :custom
  (sql-sqlite-program "sqlite3"))
#+end_src

** sql-indent

#+begin_src emacs-lisp
(use-package sql-indent
  :commands sqlind-minor-mode)
#+end_src

** string-inflection

#+begin_src emacs-lisp
(use-package string-inflection
  :bind ("C-c `" . string-inflection-toggle))
#+end_src

** super-save

#+begin_src emacs-lisp
(use-package super-save
  :diminish
  :commands super-save-mode
  :config
  (setq super-save-auto-save-when-idle t))
#+end_src

** swift-mode

#+begin_src emacs-lisp
(use-package swift-mode
  :commands swift-mode)
#+end_src

** tagedit

#+begin_src emacs-lisp
(use-package tagedit
  :commands tagedit-mode)
#+end_src

** term

#+begin_src emacs-lisp
(use-package term
  :bind (:map term-mode-map
              ("C-c C-y" . term-paste))
  :custom
  (term-buffer-maximum-size 0)
  (term-scroll-show-maximum-output t))
#+end_src

** terraform-mode

#+begin_src emacs-lisp
(use-package terraform-mode
  :mode "\.tf\\'")
#+end_src

** texinfo

#+begin_src emacs-lisp
(use-package texinfo
  :mode ("\\.texi\\'" . texinfo-mode)
  :config
  (defun my-texinfo-mode-hook ()
    (dolist (mapping '((?b . "emph")
                       (?c . "code")
                       (?s . "samp")
                       (?d . "dfn")
                       (?o . "option")
                       (?x . "pxref")))
      (local-set-key (vector (list 'alt (car mapping)))
                     `(lambda () (interactive)
                        (TeX-insert-macro ,(cdr mapping))))))

  (add-hook 'texinfo-mode-hook #'my-texinfo-mode-hook)

  (defun texinfo-outline-level ()
    ;; Calculate level of current texinfo outline heading.
    (require 'texinfo)
    (save-excursion
      (if (bobp)
          0
        (forward-char 1)
        (let* ((word (buffer-substring-no-properties
                      (point) (progn (forward-word 1) (point))))
               (entry (assoc word texinfo-section-list)))
          (if entry
              (nth 1 entry)
            5))))))
#+end_src

** text-mode

#+begin_src emacs-lisp
(use-package text-mode
  :defer t
  :init
  (add-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook
            #'(lambda ()
                (ignore-errors
                  (diminish 'auto-fill-function)))))
#+end_src

** tidy

#+begin_src emacs-lisp
(use-package tidy
  :commands (tidy-buffer
             tidy-parse-config-file
             tidy-save-settings
             tidy-describe-options))
#+end_src

** time

#+begin_src emacs-lisp
(use-package time
  :defer 5
  :custom
  (display-time-interval 60)
  (display-time-mode t)
  (display-time-use-mail-icon t))
#+end_src

** tla-mode

#+begin_src emacs-lisp
(use-package tla-mode
  :mode "\\.tla\\'"
  :config
  (add-hook 'tla-mode-hook
            #'(lambda ()
                (setq-local comment-start nil)
                (setq-local comment-end ""))))
#+end_src

** tracking

#+begin_src emacs-lisp
(use-package tracking
  :defer t
  :config
  (define-key tracking-mode-map [(control ?c) space] #'tracking-next-buffer))
#+end_src

** tramp

#+begin_src emacs-lisp
(use-package tramp
  :defer 5
  :custom
  (tramp-default-method "ssh")
  :config
  ;; jww (2018-02-20): Without this change, tramp ends up sending hundreds of
  ;; shell commands to the remote side to ask what the temporary directory is.
  (put 'temporary-file-directory 'standard-value '("/tmp"))
  (setq tramp-auto-save-directory "~/.cache/emacs/backups"
        tramp-persistency-file-name (user-data "tramp")))
#+end_src

** tramp-sh

#+begin_src emacs-lisp
(use-package tramp-sh
  :defer t
  :config
  (add-to-list 'tramp-remote-path "/run/current-system/sw/bin"))
#+end_src

** transient

#+begin_src emacs-lisp
(use-package transient
  :defer t
  :custom
  (transient-history-file (user-data "transient/history.el"))
  (transient-values-file (user-data "transient/values.el")))
#+end_src

** transpose-mark

#+begin_src emacs-lisp
(use-package transpose-mark
  :commands (transpose-mark
             transpose-mark-line
             transpose-mark-region))
#+end_src

** treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :commands treemacs)
#+end_src

** tuareg

#+begin_src emacs-lisp
(use-package tuareg
  :mode (("\\.ml[4ip]?\\'" . tuareg-mode)
         ("\\.eliomi?\\'"  . tuareg-mode)))
#+end_src

** typo

#+begin_src emacs-lisp
(use-package typo
  :commands typo-mode)
#+end_src

** undo-propose

#+begin_src emacs-lisp
(use-package undo-propose
  :commands undo-propose)
#+end_src

** unicode-fonts

#+begin_src emacs-lisp
(use-package unicode-fonts
  :custom
  (unicode-fonts-block-font-mapping
   '(("Aegean Numbers"
      ("Noto Sans Symbols" "Aegean" "Symbola" "Quivira" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ahom"
      ("AhomUnicode"))
     ("Alchemical Symbols"
      ("Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Alphabetic Presentation Forms"
      ("DejaVu Sans:width=condensed" "Arial Unicode MS" "Cardo" "Code2000" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Anatolian Hieroglyphs"
      ("Anatolian"))
     ("Ancient Greek Musical Notation"
      ("Cardo" "Noto Sans Symbols" "Aegean" "New Athena Unicode" "Musica" "Symbola" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ancient Greek Numbers"
      ("Noto Sans Symbols" "Apple Symbols" "New Athena Unicode" "Cardo" "Aegean" "Quivira" "Symbola" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ancient Symbols"
      ("Noto Sans Symbols" "Analecta" "New Athena Unicode" "Cardo" "Aegean" "Quivira" "Symbola" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Arabic"
      ("Scheherazade New" "Courier New" "Simplified Arabic Fixed" "Simplified Arabic" "Amiri" "Aldhabi" "Adobe Arabic" "Urdu Typesetting" "Geeza Pro" "Baghdad" "Damascus" "Al Bayan" "Andalus" "Arabic Typesetting" "Traditional Arabic" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Nadeem" "Microsoft Uighur" "Tahoma" "Microsoft Sans Serif" "MPH 2B Damase" "KufiStandardGK" "DecoType Naskh" "Koodak" "FreeMono" "Code2000"))
     ("Arabic Extended-A"
      ("Scheherazade New" "Amiri"))
     ("Arabic Mathematical Alphabetic Symbols"
      ("Scheherazade New" "Amiri"))
     ("Arabic Presentation Forms-A"
      ("Scheherazade New" "Geeza Pro" "Amiri" "Arial Unicode MS" "Microsoft Sans Serif" "Tahoma" "KufiStandardGK" "Andalus" "Arabic Typesetting" "Urdu Typesetting" "Adobe Arabic" "DecoType Naskh" "Al Bayan" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "MPH 2B Damase" "Code2000"))
     ("Arabic Presentation Forms-B"
      ("Scheherazade New" "DejaVu Sans Mono" "Geeza Pro" "Amiri" "Adobe Arabic" "Traditional Arabic" "Urdu Typesetting" "Arial Unicode MS" "Microsoft Sans Serif" "KufiStandardGK" "DejaVu Sans:width=condensed" "FreeMono" "DecoType Naskh" "Code2000"))
     ("Arabic Supplement"
      ("Scheherazade New" "Courier New" "Simplified Arabic Fixed" "Amiri" "Simplified Arabic" "Geeza Pro" "Damascus" "Andalus" "Arabic Typesetting" "Traditional Arabic" "Adobe Arabic" "Microsoft Uighur" "Tahoma" "Microsoft Sans Serif" "MPH 2B Damase"))
     ("Armenian"
      ("DejaVu Sans Mono" "Noto Sans Armenian" "Mshtakan" "Sylfaen" "DejaVu Sans:width=condensed" "Quivira" "MPH 2B Damase" "Code2000" "Arial Unicode MS" "Everson Mono:weight=bold" "FreeMono"))
     ("Arrows"
      ("DejaVu Sans Mono" "Apple Symbols" "Cambria Math" "Segoe UI Symbol" "DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS" "BabelStone Modern" "Symbola" "Quivira" "Code2000" "Noto Sans Symbols" "Everson Mono:weight=bold" "FreeMono"))
     ("Avestan"
      ("Noto Sans Avestan" "Ahuramzda:weight=bold" "ALPHABETUM Unicode"))
     ("Balinese"
      ("Noto Sans Balinese:weight=bold" "Aksara Bali"))
     ("Bamum"
      ("Noto Sans Bamum"))
     ("Bamum Supplement"
      ("Noto Sans Bamum"))
     ("Batak"
      ("Batak-Unicode" "Noto Sans Batak"))
     ("Bengali"
      ("Bangla Sangam MN" "Noto Sans Bengali" "Noto Sans Bengali UI" "Nirmala UI" "Vrinda" "Mukti Narrow" "Akaash" "Arial Unicode MS" "Code2000" "ALPHABETUM Unicode"))
     ("Block Elements"
      ("DejaVu Sans Mono" "Noto Sans Symbols" "FreeMono" "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "BabelStone Modern" "Symbola" "Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Bopomofo"
      ("Lantinghei TC" "MingLiU" "SimHei" "LiSong Pro" "FangSong" "SimSun" "DFKai-SB" "WenQuanYi Zen Hei Mono" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei SC" "HAN NOM A" "Arial Unicode MS" "BabelStone Han" "Code2000" "ALPHABETUM Unicode"))
     ("Bopomofo Extended"
      ("MingLiU" "SimHei" "FangSong" "SimSun" "DFKai-SB" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "Code2000"))
     ("Box Drawing"
      ("DejaVu Sans Mono" "FreeMono" "DejaVu Sans" "Everson Mono" "Quivira" "Code2000" "Noto Sans Symbols" "Segoe UI Symbol" "Symbola"))
     ("Brahmi"
      ("Segoe UI Historic" "Noto Sans Brahmi" "Adinatha Tamil Brahmi" "ALPHABETUM Unicode"))
     ("Braille Patterns"
      ("Quivira" "Apple Braille" "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "Symbola" "Noto Sans Symbols" "FreeMono" "Code2000" "Everson Mono:weight=bold"))
     ("Buginese"
      ("Noto Sans Buginese" "MPH 2B Damase" "Monlam Uni Sans Serif" "Code2000"))
     ("Buhid"
      ("Noto Sans Buhid" "Quivira" "Code2000"))
     ("Byzantine Musical Symbols"
      ("Noto Sans Symbols" "Musica" "Symbola" "FreeSerif"))
     ("CJK Compatibility"
      ("SimHei" "FangSong" "SimSun" "MingLiU" "Meiryo" "Microsoft JhengHei" "Microsoft JhengHei UI" "Lantinghei SC" "Lantinghei TC" "HAN NOM A" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "Code2000"))
     ("CJK Compatibility Forms"
      ("WenQuanYi Zen Hei Mono" "Lantinghei SC" "SimHei" "FangSong" "SimSun" "LiSong Pro" "Baoli SC" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei TC" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "Symbola" "Xingkai SC" "DFKai-SB" "Code2000"))
     ("CJK Compatibility Ideographs"
      ("SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "WenQuanYi Zen Hei Mono" "BabelStone Han" "UnBatang" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "Arial Unicode MS" "Lantinghei SC" "HanaMinA"))
     ("CJK Compatibility Ideographs Supplement"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "SimSun" "MingLiU" "HanaMinA" "Hiragino Kaku Gothic Pro" "Hiragino Maru Gothic Pro" "Hiragino Mincho Pro" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM B" "LiSong Pro"))
     ("CJK Radicals Supplement"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "HanaMinA" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "Apple Symbols" "Code2000"))
     ("CJK Strokes"
      ("WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "Code2000"))
     ("CJK Symbols and Punctuation"
      ("Lantinghei SC" "SimHei" "FangSong" "SimSun" "HanaMinA" "WenQuanYi Zen Hei Mono" "LiSong Pro" "STFangsong" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei TC" "MingLiU" "HAN NOM A" "Arial Unicode MS" "PCMyungjo" "BabelStone Han" "Osaka:spacing=m" "Code2000"))
     ("CJK Unified Ideographs"
      ("WenQuanYi Zen Hei Mono" "Lantinghei SC" "Songti SC" "SimHei" "FangSong" "STFangsong" "SimSun" "LiSong Pro" "Baoli SC" "HanaMinA" "BabelStone Han" "Apple LiGothic" "Lantinghei TC" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "Arial Unicode MS" "Xingkai SC" "GB18030 Bitmap" "UnBatang"))
     ("CJK Unified Ideographs Extension A"
      ("SimHei" "FangSong" "STFangsong" "SimSun" "Songti SC" "Microsoft YaHei" "Microsoft YaHei UI" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HanaMinA" "HAN NOM A" "Code2000" "DFKai-SB" "BabelStone Han" "GB18030 Bitmap"))
     ("CJK Unified Ideographs Extension B"
      ("SimHei" "FangSong" "SimSun" "LiSong Pro" "Microsoft YaHei" "Microsoft YaHei UI" "HanaMinB" "HAN NOM B" "Code2002" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "BabelStone Han" "DFKai-SB"))
     ("CJK Unified Ideographs Extension C"
      ("HanaMinB" "BabelStone Han" "HAN NOM B"))
     ("CJK Unified Ideographs Extension D"
      ("HanaMinB" "BabelStone Han"))
     ("CJK Unified Ideographs Extension E"
      ("HanaMinB" "BabelStone Han"))
     ("Carian"
      ("Segoe UI Historic" "Noto Sans Carian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Chakma"
      ("Ribeng"))
     ("Cham"
      ("Noto Sans Cham" "Cham OI_Tangin" "Cham OI_Kulbleng" "Cham OI_Kul" "Code2000"))
     ("Cherokee"
      ("Aboriginal Sans" "Aboriginal Serif" "Plantagenet Cherokee" "Noto Sans Cherokee" "Gadugi" "MPH 2B Damase" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Code2000"))
     ("Cherokee Supplement"
      ("Everson Mono:weight=bold"))
     ("Combining Diacritical Marks"
      ("Monaco" "Consolas" "Noto Sans" "Cambria Math" "Charis SIL" "Doulos SIL" "Courier New" "DejaVu Sans:width=condensed" "DejaVu Sans Mono" "Cardo" "Code2000" "Gentium Plus" "Junicode" "Tahoma" "Microsoft Sans Serif" "Arial" "Quivira" "Symbola" "Everson Mono" "FreeMono" "Arial Unicode MS" "ALPHABETUM Unicode"))
     ("Combining Diacritical Marks Extended"
      ("Monlam Uni Sans Serif"))
     ("Combining Diacritical Marks Supplement"
      ("Cardo" "FreeSerif" "Junicode" "Doulos SIL" "DejaVu Sans:width=condensed" "Noto Sans" "Segoe UI" "Code2000" "Everson Mono" "ALPHABETUM Unicode"))
     ("Combining Diacritical Marks for Symbols"
      ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols" "Symbola" "Code2000" "Everson Mono" "Arial Unicode MS"))
     ("Combining Half Marks"
      ("Consolas" "DejaVu Sans:width=condensed" "Everson Mono:weight=bold" "Symbola"))
     ("Common Indic Number Forms"
      ("Noto Sans Kaithi" "Nirmala UI" "Siddhanta"))
     ("Control Pictures"
      ("Apple Symbols" "BabelStone Modern" "Noto Sans Symbols" "Segoe UI Symbol" "Arial Unicode MS" "Symbola" "Quivira" "FreeMono" "Code2000" "Everson Mono:weight=bold"))
     ("Coptic"
      ("Noto Sans Coptic" "Antinoou" "New Athena Unicode" "Segoe UI Historic" "Segoe UI Symbol" "Quivira" "Analecta" "Nilus" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Coptic Epact Numbers"
      ("Nilus" "Symbola"))
     ("Counting Rod Numerals"
      ("WenQuanYi Zen Hei Mono" "Noto Sans Symbols" "BabelStone Modern" "Symbola" "Quivira" "Apple Symbols" "Code2001"))
     ("Cuneiform"
      ("Segoe UI Historic" "Noto Sans Cuneiform" "Noto Sans Sumero-Akkadian Cuneiform" "Akkadian"))
     ("Cuneiform Numbers and Punctuation"
      ("Akkadian" "Segoe UI Historic" "Noto Sans Cuneiform" "Noto Sans Sumero-Akkadian Cuneiform"))
     ("Currency Symbols"
      ("Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Consolas" "Noto Sans Symbols" "Noto Sans" "Segoe UI" "Apple Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Cypriot Syllabary"
      ("Segoe UI Historic" "Noto Sans Cypriot" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Cyrillic"
      ("Consolas" "Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans" "Courier New" "Calibri" "Microsoft Sans Serif" "Code2000" "Arial Unicode MS" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Charcoal CY" "Geneva CY" "ALPHABETUM Unicode"))
     ("Cyrillic Extended-A"
      ("Quivira" "Everson Mono:weight=bold" "FreeSerif" "ALPHABETUM Unicode"))
     ("Cyrillic Extended-B"
      ("Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Cyrillic Supplement"
      ("Consolas" "Courier New" "Calibri" "Noto Sans" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Deseret"
      ("Noto Sans Deseret" "Apple Symbols" "Segoe UI Symbol" "Analecta" "Code2001" "Everson Mono:weight=bold"))
     ("Devanagari"
      ("Annapurna SIL" "Noto Sans Devanagari" "Devanagari Sangam MN" "Devanagari MT" "Nirmala UI" "Mangal" "Samyak Devanagari" "Samyak" "Siddhanta" "Aparajita" "Code2000" "Arial Unicode MS" "ALPHABETUM Unicode"))
     ("Devanagari Extended"
      ("Annapurna SIL" "Siddhanta" "FreeSerif"))
     ("Dingbats"
      ("Apple Color Emoji" "DejaVu Sans Mono" "Segoe UI Symbol" "Zapf Dingbats" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Domino Tiles"
      ("DejaVu Sans:width=condensed" "Symbola" "Quivira" "Segoe UI Symbol" "Noto Sans Symbols" "Code2001" "Everson Mono:weight=bold"))
     ("Early Dynastic Cuneiform"
      ("Akkadian"))
     ("Egyptian Hieroglyphs"
      ("Segoe UI Historic:weight=bold" "Noto Sans Egyptian Hieroglyphs:weight=bold" "Aegyptus:weight=bold" "Gardiner"))
     ("Elbasan"
      ("Albanian" "Everson Mono:weight=bold"))
     ("Emoticons"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
     ("Enclosed Alphanumeric Supplement"
      ("Segoe UI Symbol" "Noto Sans Symbols" "Symbola" "Quivira" "BabelStone Han" "BabelStone Modern"))
     ("Enclosed Alphanumerics"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Junicode" "Arial Unicode MS" "Symbola" "Quivira" "Code2000" "BabelStone Han" "WenQuanYi Zen Hei Mono" "BabelStone Modern" "HAN NOM A" "Everson Mono:weight=bold"))
     ("Enclosed CJK Letters and Months"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "MingLiU" "Arial Unicode MS" "HanaMinA" "Meiryo" "BabelStone Han" "Quivira" "Code2000" "UnBatang" "HAN NOM A"))
     ("Enclosed Ideographic Supplement"
      ("Segoe UI Symbol" "Noto Sans Symbols" "HanaMinA" "BabelStone Han" "Symbola"))
     ("Ethiopic"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Ethiopia Jiret" "Ethiopic WashRa SemiBold" "Ethiopic Yebse" "Code2000"))
     ("Ethiopic Extended"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Code2000"))
     ("Ethiopic Extended-A"
      ("Kefa" "Noto Sans Ethiopic" "Abyssinica SIL"))
     ("Ethiopic Supplement"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Code2000"))
     ("General Punctuation"
      ("Monaco" "Apple Symbols" "Segoe UI Symbol" "Cambria Math" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Antinoou" "Symbola" "Code2000" "Quivira" "Noto Sans" "Everson Mono:weight=bold" "FreeMono" "BabelStone Modern"))
     ("Geometric Shapes"
      ("DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Segoe UI Symbol" "Arial Unicode MS" "Symbola" "Noto Sans Symbols" "Quivira" "BabelStone Modern" "Everson Mono" "FreeMono" "Code2000"))
     ("Geometric Shapes Extended"
      ("Symbola" "Quivira"))
     ("Georgian"
      ("DejaVu Sans Mono" "Noto Sans Georgian" "Noto Serif Georgian" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Quivira" "Sylfaen" "MPH 2B Damase" "Everson Mono:weight=bold"))
     ("Georgian Supplement"
      ("Noto Sans Georgian" "Noto Serif Georgian" "DejaVu Serif:width=condensed" "MPH 2B Damase" "Quivira" "Everson Mono:weight=bold"))
     ("Glagolitic"
      ("Noto Sans Glagolitic" "Segoe UI Historic" "Segoe UI Symbol" "MPH 2B Damase" "Quivira" "FreeSerif" "ALPHABETUM Unicode"))
     ("Gothic"
      ("Noto Sans Gothic" "Segoe UI Historic" "Segoe UI Symbol" "Analecta" "Junicode" "Sadagolthina" "MPH 2B Damase" "FreeSerif" "Code2001" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Greek Extended"
      ("Consolas" "DejaVu Sans Mono" "Courier New" "Antinoou" "Noto Sans" "DejaVu Sans:width=condensed" "Cardo" "Junicode" "New Athena Unicode" "Microsoft Sans Serif" "Gentium Plus Compact" "Gentium Plus" "Arial Unicode MS" "Arial" "Tahoma" "Aegean" "Code2000" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Greek and Coptic"
      ("Consolas" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Antinoou" "Noto Sans" "Segoe UI Historic" "Segoe UI Symbol" "New Athena Unicode" "Calibri" "Microsoft Sans Serif" "Gentium Plus Compact" "Gentium Plus" "Lucida Console" "Arial Unicode MS" "Cardo" "Aegean" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "Noto Sans Coptic"))
     ("Gujarati"
      ("Nirmala UI" "Noto Sans Gujarati" "Noto Sans Gujarati UI" "Gujarati MT" "Shruti" "Samyak Gujarati" "Samyak" "Gujarati Sangam MN" "Code2000" "Arial Unicode MS"))
     ("Gurmukhi"
      ("Gurmukhi Sangam MN" "Gurmukhi MN" "Nirmala UI" "Noto Sans Gurmukhi" "Noto Sans Gurmukhi UI" "Raavi" "Code2000" "Arial Unicode MS" "AnmolUni"))
     ("Halfwidth and Fullwidth Forms"
      ("Meiryo" "Arial Unicode MS" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "Apple Symbols" "Quivira" "Code2000" "HAN NOM A"))
     ("Hangul Compatibility Jamo"
      ("PCMyungjo" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "AppleMyungjo" "UnBatang" "WenQuanYi Zen Hei Mono" "HAN NOM A" "Arial Unicode MS" "Code2000" "HeadLineA"))
     ("Hangul Jamo"
      ("UnBatang" "WenQuanYi Zen Hei Mono" "PCMyungjo" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "Arial Unicode MS" "Code2000"))
     ("Hangul Jamo Extended-A"
      ("Malgun Gothic" "HanaMinA" "UnBatang"))
     ("Hangul Jamo Extended-B"
      ("Malgun Gothic" "HanaMinA" "UnBatang"))
     ("Hangul Syllables"
      ("AppleGothic" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "UnBatang" "WenQuanYi Zen Hei Mono" "Arial Unicode MS" "Code2000"))
     ("Hanunoo"
      ("Noto Sans Hanunoo" "MPH 2B Damase" "Quivira" "FreeSerif"))
     ("Hebrew"
      ("Miriam Fixed" "Ezra SIL" "Ezra SIL SR" "Arial Hebrew" "Raanana" "New Peninim MT" "Aharoni" "David" "FrankRuehl" "Gisha" "Levenim MT" "Narkisim" "Rod" "Cardo" "Courier New" "Adobe Hebrew" "Code2000" "Aramaic Imperial Yeb" "Microsoft Sans Serif" "Tahoma" "Lucida Sans Unicode" "Arial Unicode MS" "Arial" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Hiragana"
      ("Osaka:spacing=m" "MS Gothic" "MS Mincho" "MingLiU" "Hiragino Kaku Gothic Pro" "Meiryo" "Arial Unicode MS" "HanaMinA" "BabelStone Han" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000" "ALPHABETUM Unicode"))
     ("IPA Extensions"
      ("Monaco" "Consolas" "DejaVu Sans Mono" "Courier New" "Noto Sans" "Arial Unicode MS" "Arial" "Tahoma" "Microsoft Sans Serif" "Aboriginal Sans" "Cardo" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Code2000" "ALPHABETUM Unicode"))
     ("Ideographic Description Characters"
      ("SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "AppleMyungjo" "HanaMinA" "HAN NOM A" "Quivira" "DFKai-SB" "Code2000"))
     ("Imperial Aramaic"
      ("Aramaic Imperial Yeb" "Quivira" "Segoe UI Historic" "Noto Sans Imperial Aramaic" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Inscriptional Pahlavi"
      ("ZH Mono" "Segoe UI Historic" "Noto Sans Inscriptional Pahlavi" "ALPHABETUM Unicode" "Ahuramzda:weight=bold"))
     ("Inscriptional Parthian"
      ("ZH Mono" "Segoe UI Historic" "Noto Sans Inscriptional Parthian" "ALPHABETUM Unicode"))
     ("Javanese"
      ("Noto Sans Javanese" "Tuladha Jejeg"))
     ("Kaithi"
      ("Noto Sans Kaithi"))
     ("Kana Supplement"
      ("Meiryo UI" "HanaMinA" "BabelStone Han"))
     ("Kanbun"
      ("SimHei" "FangSong" "SimSun" "Meiryo" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000"))
     ("Kangxi Radicals"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "Meiryo" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "HanaMinA" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "AppleMyungjo" "Apple Symbols" "Code2000"))
     ("Kannada"
      ("Kannada Sangam MN" "Noto Sans Kannada" "Noto Sans Kannada UI" "Tunga" "Akshar Unicode" "Kedage" "Nirmala UI" "Kannada MN" "Arial Unicode MS" "Code2000"))
     ("Katakana"
      ("Osaka:spacing=m" "MS Gothic" "MingLiU" "Meiryo" "HanaMinA" "Arial Unicode MS" "BabelStone Han" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000" "ALPHABETUM Unicode"))
     ("Katakana Phonetic Extensions"
      ("MS Gothic" "MingLiU" "Meiryo" "HanaMinA" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "HAN NOM A" "Code2000"))
     ("Kayah Li"
      ("Noto Sans Kayah Li" "Code2000" "FreeMono"))
     ("Kharoshthi"
      ("Segoe UI Historic" "Noto Sans Kharoshthi" "MPH 2B Damase" "ALPHABETUM Unicode"))
     ("Khmer"
      ("Noto Sans Khmer" "Noto Sans Khmer UI" "Noto Serif Khmer" "Khmer Sangam MN" "DaunPenh" "Code2000" "MoolBoran" "Khmer Mondulkiri" "Khmer Busra"))
     ("Khmer Symbols"
      ("Noto Sans Khmer" "Noto Sans Khmer UI" "Noto Serif Khmer" "Khmer Sangam MN" "MoolBoran" "Khmer Mondulkiri" "Khmer Busra" "Code2000"))
     ("Khojki"
      ("KhojkiUnicodeOT"))
     ("Khudawadi"
      ("OldSindhi"))
     ("Lao"
      ("Noto Sans Lao" "Noto Sans Lao UI" "Noto Serif Lao" "Lao Sangam MN" "DokChampa" "DejaVu Sans Mono" "Arial Unicode MS" "Saysettha MX" "DejaVu Sans:width=condensed" "Code2000"))
     ("Latin Extended-C"
      ("DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans" "Cambria Math" "Gentium Plus" "Charis SIL" "Doulos SIL" "Code2000" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Latin Extended-D"
      ("FreeMono" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Junicode" "Cardo" "Quivira" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Latin Extended-E"
      ("Quivira" "Everson Mono:weight=bold" "HanaMinA"))
     ("Lepcha"
      ("Mingzat" "Noto Sans Lepcha"))
     ("Letterlike Symbols"
      ("Monaco" "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "Cambria Math" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Symbola" "Quivira" "HAN NOM A" "Everson Mono:weight=bold"))
     ("Limbu"
      ("Noto Sans Limbu" "Namdhinggo SIL" "MPH 2B Damase" "Code2000"))
     ("Linear A"
      ("Aegean"))
     ("Linear B Ideograms"
      ("Noto Sans Linear B" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "MPH 2B Damase"))
     ("Linear B Syllabary"
      ("Noto Sans Linear B" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "MPH 2B Damase" "Penuturesu"))
     ("Lisu"
      ("Lisu Unicode" "Miao Unicode" "Noto Sans Lisu" "Lisu Tzimu" "Quivira" "Everson Mono:weight=bold"))
     ("Lycian"
      ("Segoe UI Historic" "Noto Sans Lycian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Lydian"
      ("Segoe UI Historic" "Noto Sans Lydian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Mahjong Tiles"
      ("Segoe UI Symbol" "Symbola" "Noto Sans Symbols" "Quivira" "Everson Mono"))
     ("Malayalam"
      ("Malayalam Sangam MN" "Nirmala UI" "Kartika" "Code2000" "Akshar Unicode" "Samyak Malayalam" "Samyak" "Arial Unicode MS"))
     ("Mandaic"
      ("Noto Sans Mandaic"))
     ("Mathematical Alphanumeric Symbols"
      ("Cambria Math" "Noto Sans Symbols" "Asana Math" "Code2001" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Mathematical Operators"
      ("Monaco" "DejaVu Sans Mono" "Segoe UI Symbol" "Cambria Math" "DejaVu Sans:width=condensed" "Noto Sans Symbols" "Apple Symbols" "Asana Math" "Arial Unicode MS" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Meetei Mayek"
      ("Noto Sans Meetei Mayek" "Eeyek Unicode" "Meetei Mayek"))
     ("Meetei Mayek Extensions"
      ("Noto Sans Meetei Mayek"))
     ("Meroitic Cursive"
      ("Nilus" "Segoe UI Historic" "Segoe UI Symbol"))
     ("Meroitic Hieroglyphs"
      ("Nilus"))
     ("Miao"
      ("Miao Unicode" "Albanian"))
     ("Miscellaneous Mathematical Symbols-A"
      ("Noto Sans Symbols" "Apple Symbols" "Segoe UI Symbol" "Asana Math" "Code2000" "Symbola" "Quivira" "Cambria Math" "Everson Mono:weight=bold"))
     ("Miscellaneous Mathematical Symbols-B"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "Cambria Math" "Asana Math" "Code2000" "Symbola" "Quivira"))
     ("Miscellaneous Symbols"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Symbola" "Quivira" "MS Reference Sans Serif" "Cardo" "Code2000" "Everson Mono:weight=bold"))
     ("Miscellaneous Symbols and Arrows"
      ("Symbola" "Quivira" "Asana Math" "Code2000" "Segoe UI Symbol" "Noto Sans Symbols"))
     ("Miscellaneous Symbols and Pictographs"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
     ("Miscellaneous Technical"
      ("Segoe UI Symbol" "Noto Sans Symbols" "Apple Symbols" "Cambria Math" "DejaVu Sans Mono" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Modi"
      ("MarathiCursiveG"))
     ("Modifier Tone Letters"
      ("Apple Symbols" "Noto Sans Symbols" "Gentium Plus" "Code2000" "Quivira" "Charis SIL" "Doulos SIL" "DejaVu Sans Mono"))
     ("Mongolian"
      ("STFangsong" "STHeiti" "STKaiti" "STSong" "Noto Sans Mongolian" "Mongolian Baiti" "Daicing Xiaokai" "Code2000"))
     ("Mro"
      ("Mro Unicode"))
     ("Musical Symbols"
      ("Noto Sans Symbols" "Musica" "FreeSerif" "Symbola" "Quivira"))
     ("Myanmar"
      ("Noto Sans Myanmar" "Noto Sans Myanmar UI" "Myanmar Text" "Myanmar Sangam MN" "Myanmar MN" "TharLon" "Yunghkio" "Myanmar3" "Masterpiece Uni Sans" "Padauk" "Code2000" "Tai Le Valentinium"))
     ("Myanmar Extended-A"
      ("Noto Sans Myanmar" "Noto Sans Myanmar UI" "Myanmar Text" "Padauk" "TharLon" "Yunghkio"))
     ("Myanmar Extended-B"
      ("TharLon" "Yunghkio"))
     ("NKo"
      ("Ebrima" "Conakry" "DejaVu Sans:width=condensed" "Noto Sans NKo" "Code2000"))
     ("Nabataean"
      ("Everson Mono:weight=bold"))
     ("New Tai Lue"
      ("Noto Sans New Tai Lue" "Microsoft New Tai Lue" "Dai Banna SIL Book" "Dai Banna SIL Book:style=Regular"))
     ("Number Forms"
      ("DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS" "Junicode" "Symbola" "Quivira" "Charis SIL" "Doulos SIL" "Code2000" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Ogham"
      ("Segoe UI Historic" "Segoe UI Symbol" "Noto Sans Ogham" "DejaVu Sans:width=condensed" "BabelStone Modern" "Code2000" "Aboriginal Serif" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ol Chiki"
      ("Nirmala UI" "Noto Sans Ol Chiki" "Code2000"))
     ("Old Hungarian"
      ("OldHungarian"))
     ("Old Italic"
      ("Segoe UI Historic" "Segoe UI Symbol" "DejaVu Sans:width=condensed" "Cardo" "New Athena Unicode" "Aegean" "Noto Sans Old Italic" "Albanian" "Code2001" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Old North Arabian"
      ("Marib"))
     ("Old Permic"
      ("Everson Mono:weight=bold"))
     ("Old Persian"
      ("Segoe UI Historic" "Noto Sans Old Persian" "MPH 2B Damase" "Aegean" "Code2001" "FreeSans" "ALPHABETUM Unicode"))
     ("Old South Arabian"
      ("Segoe UI Historic" "Noto Sans Old South Arabian" "Quivira" "Qataban" "Everson Mono:weight=bold"))
     ("Old Turkic"
      ("Noto Sans Old Turkic" "Segoe UI Historic" "Segoe UI Symbol" "Quivira" "Everson Mono:weight=bold"))
     ("Optical Character Recognition"
      ("Apple Symbols" "Segoe UI Symbol" "Noto Sans Symbols" "Arial Unicode MS" "Symbola" "Quivira" "FreeMono" "BabelStone Modern" "Code2000" "Everson Mono"))
     ("Oriya"
      ("Noto Sans Oriya" "Oriya Sangam MN" "Nirmala UI" "Kalinga" "Samyak Oriya" "Samyak" "Code2000" "Arial Unicode MS"))
     ("Ornamental Dingbats"
      ("Symbola"))
     ("Osmanya"
      ("Noto Sans Osmanya" "Ebrima" "Andagii" "MPH 2B Damase" "Code2001" "Everson Mono:weight=bold"))
     ("Phags-pa"
      ("BabelStone Phags-pa Book" "BabelStone Phags-pa Book:style=Regular" "Noto Sans Phags-pa" "Microsoft PhagsPa" "Code2000"))
     ("Phaistos Disc"
      ("Aegean" "Noto Sans Symbols" "Symbola" "Everson Mono:weight=bold" "Code2001" "ALPHABETUM Unicode"))
     ("Phoenician"
      ("Segoe UI Historic" "Noto Sans Phoenician" "Aegean" "Quivira" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Phonetic Extensions"
      ("Monaco" "Consolas" "Calibri" "Noto Sans" "Aboriginal Sans" "Charis SIL" "Doulos SIL" "Quivira" "Courier New" "DejaVu Sans:width=condensed" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Phonetic Extensions Supplement"
      ("Consolas" "Calibri" "Courier New" "Noto Sans" "Aboriginal Sans" "Charis SIL" "Doulos SIL" "Quivira" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Playing Cards"
      ("DejaVu Sans:width=condensed" "Symbola" "Noto Sans Symbols" "Segoe UI Symbol" "Quivira"))
     ("Rejang"
      ("Noto Sans Rejang" "Code2000" "Everson Mono:weight=bold"))
     ("Rumi Numeral Symbols"
      ("HanaMinA"))
     ("Runic"
      ("Noto Sans Runic" "Segoe UI Historic" "Segoe UI Symbol" "Aboriginal Serif" "Junicode" "FreeMono" "Quivira" "Code2000" "Cardo" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Samaritan"
      ("Noto Sans Samaritan" "Quivira" "Everson Mono:weight=bold"))
     ("Saurashtra"
      ("Noto Sans Saurashtra" "Code2000" "Sourashtra"))
     ("Sharada"
      ("Albanian"))
     ("Shavian"
      ("Segoe UI Historic" "Noto Sans Shavian" "Andagii" "MPH 2B Damase" "Apple Symbols" "Code2001" "Everson Mono:weight=bold"))
     ("Siddham"
      ("MuktamsiddhamG"))
     ("Sinhala"
      ("Noto Sans Sinhala" "Nirmala UI" "Iskoola Pota" "Akshar Unicode" "Sinhala Sangam MN"))
     ("Small Form Variants"
      ("Apple Symbols" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "Microsoft YaHei" "Microsoft YaHei UI" "Code2000"))
     ("Sora Sompeng"
      ("Nirmala UI"))
     ("Specials"
      ("BabelStone Modern" "Noto Sans Symbols" "Apple Symbols" "Arial Unicode MS" "Symbola" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Quivira" "FreeMono" "BabelStone Han"))
     ("Sundanese"
      ("Noto Sans Sundanese" "Sundanese Unicode"))
     ("Sundanese Supplement"
      ("Noto Sans Sundanese"))
     ("Superscripts and Subscripts"
      ("Consolas" "Monaco" "Apple Symbols" "Cambria Math" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Segoe UI Symbol" "Asana Math" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Supplemental Arrows-A"
      ("Segoe UI Symbol" "Cambria Math" "DejaVu Sans:width=condensed" "Asana Math" "Quivira" "Symbola" "Apple Symbols" "Noto Sans Symbols" "Code2000" "Everson Mono:weight=bold" "FreeMono" "BabelStone Modern"))
     ("Supplemental Arrows-B"
      ("Cambria Math" "Segoe UI Symbol" "Apple Symbols" "Noto Sans Symbols" "Asana Math" "Quivira" "Symbola" "Code2000" "Everson Mono:weight=bold"))
     ("Supplemental Arrows-C"
      ("Symbola"))
     ("Supplemental Mathematical Operators"
      ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols" "Apple Symbols" "Asana Math" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Supplemental Punctuation"
      ("DejaVu Sans Mono" "Segoe UI Symbol" "Noto Sans Symbols" "Antinoou" "New Athena Unicode" "Cardo" "Aegean" "Symbola" "Quivira" "Everson Mono:weight=bold" "Code2000" "ALPHABETUM Unicode"))
     ("Supplemental Symbols and Pictographs"
      ("Symbola"))
     ("Syloti Nagri"
      ("Noto Sans Syloti Nagri" "MPH 2B Damase"))
     ("Syriac"
      ("Segoe UI Historic" "Estrangelo Edessa" "Estrangelo Nisibin" "Code2000"))
     ("Tagalog"
      ("Quivira" "Noto Sans Tagalog"))
     ("Tagbanwa"
      ("Noto Sans Tagbanwa" "Quivira"))
     ("Tags"
      ("BabelStone Modern" "BabelStone Han"))
     ("Tai Le"
      ("Microsoft Tai Le" "TharLon" "Noto Sans Tai Le" "Yunghkio" "Tai Le Valentinium" "MPH 2B Damase" "FreeSerif"))
     ("Tai Tham"
      ("Noto Sans Tai Tham" "Lanna Alif" "Chiangsaen Alif" "Lanna Unicode UI" "Monlam Uni Sans Serif"))
     ("Tai Viet"
      ("Tai Heritage Pro" "Noto Sans Tai Viet"))
     ("Tai Xuan Jing Symbols"
      ("WenQuanYi Zen Hei Mono" "Apple Symbols" "Noto Sans Symbols" "Segoe UI Symbol" "BabelStone Han" "DejaVu Sans:width=condensed" "Symbola" "Quivira" "BabelStone Modern" "Code2001" "Everson Mono:weight=bold"))
     ("Takri"
      ("Albanian"))
     ("Tamil"
      ("Latha" "Noto Sans Tamil" "Noto Sans Tamil UI" "Nirmala UI" "Tamil MN" "Tamil Sangam MN" "InaiMathi" "Vijaya" "Maduram" "Akshar Unicode" "Samyak Tamil" "Samyak" "Code2000" "Arial Unicode MS"))
     ("Telugu"
      ("Noto Sans Telugu" "Noto Sans Telugu UI" "Telugu Sangam MN" "Vani" "Nirmala UI" "Gautami" "Akshar Unicode" "Code2000" "Arial Unicode MS"))
     ("Thaana"
      ("MV Boli" "Noto Sans Thaana" "MPH 2B Damase" "Code2000" "Everson Mono:weight=bold"))
     ("Thai"
      ("Thonburi" "DokChampa" "Noto Sans Thai" "Noto Sans Thai UI" "Noto Serif Thai" "Ayuthaya" "Silom" "Krungthep" "Sathu" "Angsana New" "AngsanaUPC" "Code2000" "Tahoma" "Arial Unicode MS" "Quivira" "Everson Mono:weight=bold"))
     ("Tibetan"
      ("Noto Sans Tibetan" "Kailasa" "Kokonor" "Tibetan Machine Uni" "Microsoft Himalaya" "Jomolhari" "Monlam Uni Sans Serif" "Arial Unicode MS"))
     ("Tifinagh"
      ("Noto Sans Tifinagh" "Ebrima" "DejaVu Sans:width=condensed" "Code2000" "Quivira" "Everson Mono:weight=bold"))
     ("Transport and Map Symbols"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola"))
     ("Ugaritic"
      ("Segoe UI Historic" "Noto Sans Ugaritic" "Aegean" "Code2001" "Andagii" "Quivira" "Everson Mono:weight=bold" "FreeSans" "ALPHABETUM Unicode"))
     ("Unified Canadian Aboriginal Syllabics"
      ("Aboriginal Sans" "Aboriginal Serif" "Noto Sans Canadian Aboriginal" "Gadugi" "Euphemia UCAS" "Euphemia" "Code2000" "Quivira" "Everson Mono:weight=bold"))
     ("Unified Canadian Aboriginal Syllabics Extended"
      ("Aboriginal Sans" "Aboriginal Serif" "Noto Sans Canadian Aboriginal" "Gadugi" "Euphemia UCAS" "Euphemia" "Quivira" "Everson Mono:weight=bold"))
     ("Vai"
      ("Ebrima" "Noto Sans Vai" "Dukor" "Wakor" "Code2000" "Quivira"))
     ("Variation Selectors"
      ("BabelStone Modern" "BabelStone Han" "Code2000"))
     ("Variation Selectors Supplement"
      ("BabelStone Modern" "BabelStone Han"))
     ("Vedic Extensions"
      ("Siddhanta"))
     ("Vertical Forms"
      ("Microsoft YaHei" "Microsoft YaHei UI" "Symbola"))
     ("Yi Radicals"
      ("Noto Sans Yi" "Nuosu SIL" "Microsoft Yi Baiti" "STFangsong" "Code2000"))
     ("Yi Syllables"
      ("Noto Sans Yi" "Nuosu SIL" "Microsoft Yi Baiti" "STFangsong" "Code2000"))
     ("Yijing Hexagram Symbols"
      ("WenQuanYi Zen Hei Mono" "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "DejaVu Sans:width=condensed" "BabelStone Han" "Symbola" "Quivira" "BabelStone Modern" "Code2000" "Everson Mono:weight=bold"))))
  (unicode-fonts-skip-font-groups
   '(chinese-simplified chinese-traditional decorative low-quality-glyphs multicolor))
  :config
  (unicode-fonts-setup)
  ;; (setq face-font-rescale-alist '((".*Scheher.*" . 1.8)))
  )
#+end_src

** uniquify

#+begin_src emacs-lisp
(use-package uniquify
  :defer 5
  :custom
  (uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src

** url

#+begin_src emacs-lisp
(use-package url
  :defer t
  :custom
  (url-configuration-directory (user-data "url/")))
#+end_src

*** url-cache

#+begin_src emacs-lisp
(use-package url-cache
  :defer t
  :custom
  (url-cache-directory (user-data "url/cache")))
#+end_src

*** url-irc

#+begin_src emacs-lisp
(use-package url-irc
  :defer t
  :custom
  (url-irc-function 'url-irc-erc))
#+end_src

** vagrant

#+begin_src emacs-lisp
(use-package vagrant
  :commands (vagrant-up
             vagrant-ssh
             vagrant-halt
             vagrant-status)
  :config
  (vagrant-tramp-enable))
#+end_src

** vagrant-tramp

#+begin_src emacs-lisp
(use-package vagrant-tramp
  :after tramp
  :defer 5)
#+end_src

** vc

#+begin_src emacs-lisp
(use-package vc
  :defer t
  :custom
  (vc-command-messages t)
  (vc-follow-symlinks t)
  (vc-git-diff-switches '("-w" "-U3"))
  (vc-handled-backends '(GIT SVN CVS Bzr Hg))
  (vc-make-backup-files t))
#+end_src

** vdiff

#+begin_src emacs-lisp
(use-package vdiff
  :commands (vdiff-files
             vdiff-files3
             vdiff-buffers
             vdiff-buffers3))
#+end_src

** vimish-fold

#+begin_src emacs-lisp
(use-package vimish-fold
  :bind (("C-c V f" . vimish-fold)
         ("C-c V d" . vimish-fold-delete)
         ("C-c V D" . vimish-fold-delete-all)))
#+end_src

** visual-fill-column

#+begin_src emacs-lisp
(use-package visual-fill-column
  :commands visual-fill-column-mode)
#+end_src

** visual-regexp

#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (("C-c r"   . vr/replace)
         ("C-c %"   . vr/query-replace)
         ("<C-m> /" . vr/mc-mark)))
#+end_src

** virtual-auto-fill

#+begin_src emacs-lisp
(use-package virtual-auto-fill
  :commands virtual-auto-fill-mode)
#+end_src

** vline

#+begin_src emacs-lisp
(use-package vline
  :commands vline-mode)
#+end_src

** vundo

#+begin_src emacs-lisp
(use-package vundo
  :bind (("C-c C-/" . vundo)))
#+end_src

** w3m

#+begin_src emacs-lisp
(use-package w3m
  :commands (w3m-browse-url w3m-find-file)
  :custom
  (w3m-cookie-accept-bad-cookies 'ask)
  (w3m-default-display-inline-images t)
  (w3m-fill-column 100)
  (w3m-use-cookies t))
#+end_src

** wat-mode

#+begin_src emacs-lisp
(use-package wat-mode
  :mode "\\.was?t\\'")
#+end_src

** web-mode

#+begin_src emacs-lisp
(use-package web-mode
  :commands web-mode)
#+end_src

** wgrep

#+begin_src emacs-lisp
(use-package wgrep
  :defer 5
  :custom
  (wgrep-auto-save-buffer t)
  (wgrep-enable-key ""))
#+end_src

** which-func

#+begin_src emacs-lisp
(use-package which-func
  :hook (c-mode-common . which-function-mode))
#+end_src

** which-key

#+begin_src emacs-lisp
(use-package which-key
  :defer 5
  :diminish
  :commands which-key-mode
  :config
  (which-key-mode))
#+end_src

** whitespace

#+begin_src emacs-lisp
(use-package whitespace
  :diminish (global-whitespace-mode
             whitespace-mode
             whitespace-newline-mode)
  :commands (whitespace-buffer
             whitespace-cleanup
             whitespace-mode
             whitespace-turn-off)
  :custom
  (whitespace-auto-cleanup t t)
  (whitespace-line-column 80)
  (whitespace-rescan-timer-time nil t)
  (whitespace-silent t t)
  (whitespace-style '(face trailing lines-tail space-before-tab))
  :custom-face
  (whitespace-line ((t (:background "yellow"))))
  :preface
  (defvar normalize-hook nil)

  (defun normalize-file ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (whitespace-cleanup)
      (run-hook-with-args normalize-hook)
      (delete-trailing-whitespace)
      (goto-char (point-max))
      (delete-blank-lines)
      (set-buffer-file-coding-system 'unix)
      (goto-char (point-min))
      (while (re-search-forward "\r$" nil t)
        (replace-match ""))
      (set-buffer-file-coding-system 'utf-8)
      (let ((require-final-newline t))
        (save-buffer))))

  (defun maybe-turn-on-whitespace ()
    "depending on the file, maybe clean up whitespace."
    (when (and (not (or (memq major-mode '(markdown-mode))
                        (and buffer-file-name
                             (string-match "\\(\\.texi\\|COMMIT_EDITMSG\\)\\'"
                                           buffer-file-name))))
               (locate-dominating-file default-directory ".clean")
               (not (locate-dominating-file default-directory ".noclean")))
      (whitespace-mode 1)
      ;; For some reason, having these in settings.el gets ignored if
      ;; whitespace loads lazily.
      (setq whitespace-auto-cleanup t
            whitespace-line-column 80
            whitespace-rescan-timer-time nil
            whitespace-silent t
            whitespace-style '(face trailing lines space-before-tab empty))
      (add-hook 'write-contents-hooks
                #'(lambda () (ignore (whitespace-cleanup))) nil t)
      (whitespace-cleanup)))

  :init
  (add-hook 'find-file-hooks #'maybe-turn-on-whitespace t)

  :config
  (remove-hook 'find-file-hooks 'whitespace-buffer)
  (remove-hook 'kill-buffer-hook 'whitespace-buffer))
#+end_src

** whitespace-cleanup-mode

#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :defer 5
  :diminish
  :commands whitespace-cleanup-mode
  :config
  (global-whitespace-cleanup-mode 1))
#+end_src

** window-purpose

#+begin_src emacs-lisp
(use-package window-purpose
  :commands purpose-mode)
#+end_src

** winner

#+begin_src emacs-lisp
(use-package winner
  :unless noninteractive
  :defer 5
  :bind (("M-N" . winner-redo)
         ("M-P" . winner-undo))
  :config
  (winner-mode 1))
#+end_src

** word-count

#+begin_src emacs-lisp
(use-package word-count
  :bind ("C-c \"" . word-count-mode))
#+end_src

** x86-lookup

#+begin_src emacs-lisp
(use-package x86-lookup
  :bind ("C-h X" . x86-lookup)
  :custom
  (x86-lookup-browse-pdf-function
   #'(lambda
       (pdf page)
       (org-pdfview-open
        (concat pdf "::" page))))
  (x86-lookup-pdf "~/.local/share/x86/325462-sdm-vol-1-2abcd-3abcd.pdf"))
#+end_src

** xray

#+begin_src emacs-lisp
(use-package xray
  :bind (("C-h x b" . xray-buffer)
         ("C-h x f" . xray-faces)
         ("C-h x F" . xray-features)
         ("C-h x R" . xray-frame)
         ("C-h x h" . xray-hooks)
         ("C-h x m" . xray-marker)
         ("C-h x o" . xray-overlay)
         ("C-h x p" . xray-position)
         ("C-h x S" . xray-screen)
         ("C-h x s" . xray-symbol)
         ("C-h x w" . xray-window)))
#+end_src

** yaml-mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+end_src

** yaoddmuse

#+begin_src emacs-lisp
(use-package yaoddmuse
  :bind (("C-c w f" . yaoddmuse-browse-page-default)
         ("C-c w e" . yaoddmuse-edit-default)
         ("C-c w p" . yaoddmuse-post-library-default))
  :custom
  (yaoddmuse-directory "~/.emacs.d/doc"))
#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :demand t
  :diminish yas-minor-mode
  :bind (("C-c y d" . yas-load-directory)
         ("C-c y i" . yas-insert-snippet)
         ("C-c y f" . yas-visit-snippet-file)
         ("C-c y n" . yas-new-snippet)
         ("C-c y t" . yas-tryout-snippet)
         ("C-c y l" . yas-describe-tables)
         ("C-c y g" . yas/global-mode)
         ("C-c y m" . yas/minor-mode)
         ("C-c y r" . yas-reload-all)
         ("C-c y x" . yas-expand))
  :bind (:map yas-keymap
              ("C-i" . yas-next-field-or-maybe-expand))
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :custom
  (yas-installed-snippets-dir "~/.emacs.d/site-lisp/yasnippet-snippets/snippets/")
  (yas-prompt-functions '(yas-ido-prompt yas-completing-prompt yas-no-prompt))
  (yas-snippet-dirs '("/Users/johnw/.emacs.d/snippets"))
  (yas-triggers-in-field t)
  (yas-wrap-around-region t)
  :custom-face
  (yas-field-highlight-face ((t (:background "#e4edfc"))))
  :config
  (yas-load-directory (emacs-path "snippets"))
  (yas-global-mode 1))
#+end_src

** z3-mode

#+begin_src emacs-lisp
(use-package z3-mode
  :mode (("\\.smt\\'" . z3-mode))
  :bind (:map z3-mode-map
              ("C-c C-c" . z3-execute-region))
  :custom
  (z3-solver-cmd "z3"))
#+end_src

** zoom

#+begin_src emacs-lisp
(use-package zoom
  :bind ("C-x +" . zoom)
  :custom
  (zoom-size 'size-callback)
  :preface
  (defun size-callback ()
    (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
          (t '(0.5 . 0.5)))))
#+end_src

** ztree-diff

#+begin_src emacs-lisp
(use-package ztree-diff
  :commands ztree-diff)
#+end_src

** Completions

*** cape

[[https://github.com/minad/cape][cape]] provides Completion At Point Extensions which can be used in combination
with the [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion
backends used by =completion-at-point= are so called
=completion-at-point-functions= (Capfs). In principle, the Capfs provided by
Cape can also be used by [[https://github.com/company-mode/company-mode][Company]].

Cape has the super power to transform Company backends into Capfs and merge
multiple Capfs into a Super-Capf! These transformers allow you to still take
advantage of Company backends even if you are not using Company as frontend.

#+begin_src emacs-lisp
;; Add extensions
(use-package cape
  :disabled t
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

*** consult

[[https://github.com/minad/consult][consult]] provides search and navigation commands based on the Emacs completion
function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from
a list of candidates. Consult offers asynchronous and interactive =consult-grep=
and =consult-ripgrep= commands, and the line-based search command =consult-line=.
Furthermore Consult provides an advanced buffer switching command
=consult-buffer= to switch between buffers, recently opened files, bookmarks and
buffer-like candidates from other sources. Some of the Consult commands are
enhanced versions of built-in Emacs commands. For example the command
=consult-imenu= presents a flat list of the Imenu with [[#live-previews][live preview]], [[#narrowing-and-grouping][grouping
and narrowing]]. Please take a look at the [[#available-commands][full list of commands]].

Consult is fully compatible with completion systems centered around the
standard Emacs =completing-read= API, notably the default completion system,
[[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]].

This package keeps the completion system specifics to a minimum. The ability
of the Consult commands to work well with arbitrary completion systems is one
of the main advantages of the package. Consult fits well into existing setups
and it helps you to create a full completion environment out of small and
independent components.

#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c K" . consult-kmacro)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-org-heading)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )
#+end_src

**** consult-dir

[[https://github.com/karthink/consult-dir][consult-dir]] allows you to easily insert directory paths into the minibuffer
prompt in Emacs.

When using the minibuffer, you can switch - with completion and filtering
provided by your completion setup - to any directory you've visited recently,
or to a project, a bookmarked directory or even a remote host via tramp. The
minibuffer prompt will be replaced with the directory you choose.

Why would you want to do this? To avoid “navigating” long distances when
picking a file or directory in any Emacs command that requires one.

Think of it like the shell tools [[https://github.com/wting/autojump][autojump]], [[https://github.com/clvv/fasd][fasd]] or z but for Emacs. See the
demos section below for many more examples. =consult-dir= works with all Emacs
commands that require you to specify file paths, and with [[https://github.com/oantolin/embark][Embark actions]] on
files.

The directory candidates are collected from user bookmarks, Projectile project
roots (if available), project.el project roots (if available) and recentf file
locations. The =default-directory= variable is not changed in the process.

#+begin_src emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

*** corfu

[[https://github.com/minad/corfu][corfu]] enhances completion at point with a small completion popup. The current
candidates are shown in a popup below or above the point. Corfu is the
minimalistic =completion-in-region= counterpart of the [[https://github.com/minad/vertico][Vertico]] minibuffer UI.

Corfu is a small package, which relies on the Emacs completion facilities and
concentrates on providing a polished completion UI. Completions are either
provided by commands like =dabbrev-completion= or by pluggable backends (
=completion-at-point-functions=, Capfs). Most programming language major modes
implement a Capf. The Emacs language server clients use Capfs, which retrieve
completions from the server via the language server protocol (LSP). Corfu does
not include its own completion backends. The Emacs built-in Capfs and the
Capfs provided by other programming language packages are usually sufficient.
A few additional Capfs and completion utilities are provided by the [[https://github.com/minad/cape][Cape]]
package.

*NOTE*: Corfu uses child frames to show the popup and falls back to the default
setting of the =completion-in-region-function= on non-graphical displays. If you
want to use Corfu in the terminal, install the package [[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]], which
provides an alternative overlay-based display.

#+begin_src emacs-lisp
(use-package corfu
  :disabled t
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode))
#+end_src

*** embark

[[https://github.com/oantolin/embark][embark]] makes it easy to choose a command to run based on what is near point,
both during a minibuffer completion session (in a way familiar to Helm or
Counsel users) and in normal buffers. Bind the command =embark-act= to a key and
it acts like prefix-key for a keymap of /actions/ (commands) relevant to the
/target/ around point. With point on an URL in a buffer you can open the URL in
a browser or eww or download the file it points to. If while switching buffers
you spot an old one, you can kill it right there and continue to select
another. Embark comes preconfigured with over a hundred actions for common
types of targets such as files, buffers, identifiers, s-expressions,
sentences; and it is easy to add more actions and more target types. Embark
can also collect all the candidates in a minibuffer to an occur-like buffer or
export them to a buffer in a major-mode specific to the type of candidates,
such as dired for a set of files, ibuffer for a set of buffers, or customize
for a set of variables.

You can think of =embark-act= as a keyboard-based version of a right-click
contextual menu. The =embark-act= command (which you should bind to a convenient
key), acts as a prefix for a keymap offering you relevant /actions/ to use on a
/target/ determined by the context:

- In the minibuffer, the target is the current top completion candidate.
- In the =*Completions*= buffer the target is the completion at point.
- In a regular buffer, the target is the region if active, or else the file,
  symbol, URL, s-expression or defun at point.

Multiple targets can be present at the same location and you can cycle between
them by repeating the =embark-act= key binding. The type of actions offered
depend on the type of the target. Here is a sample of a few of the actions
offered in the default configuration:

- For files you get offered actions like deleting, copying, renaming, visiting
  in another window, running a shell command on the file, etc.
- For buffers the actions include switching to or killing the buffer.
- For package names the actions include installing, removing or visiting the
  homepage.
- For Emacs Lisp symbols the actions include finding the definition, looking
  up documentation, evaluating (which for a variable immediately shows the
  value, but for a function lets you pass it some arguments first). There are
  some actions specific to variables, such as setting the value directly or
  though the customize system, and some actions specific to commands, such as
  binding it to a key.

By default when you use =embark-act= if you don't immediately select an action,
after a short delay Embark will pop up a buffer showing a list of actions and
their corresponding key bindings. If you are using =embark-act= outside the
minibuffer, Embark will also highlight the current target. These behaviors are
configurable via the variable =embark-indicators=. Instead of selecting an
action via its key binding, you can select it by name with completion by
typing =C-h= after =embark-act=.

Everything is easily configurable: determining the current target, classifying
it, and deciding which actions are offered for each type in the
classification. The above introduction just mentions part of the default
configuration.

Configuring which actions are offered for a type is particularly easy and
requires no programming: the variable =embark-keymap-alist= associates target
types with variables containing keymaps, and those keymaps containing bindings
for the actions. (To examine the available categories and their associated
keymaps, you can use =C-h v embark-keymap-alist= or customize that variable.)
For example, in the default configuration the type =file= is associated with the
symbol =embark-file-map=. That symbol names a keymap with single-letter key
bindings for common Emacs file commands, for instance =c= is bound to =copy-file=.
This means that if you are in the minibuffer after running a command that
prompts for a file, such as =find-file= or =rename-file=, you can copy a file by
running =embark-act= and then pressing =c=.

These action keymaps are very convenient but not strictly necessary when using
=embark-act=: you can use any command that reads from the minibuffer as an
action and the target of the action will be inserted at the first minibuffer
prompt. After running =embark-act= all of your key bindings and even
=execute-extended-command= can be used to run a command. For example, if you
want to replace all occurrences of the symbol at point, just use =M-%= as the
action, there is no need to bind =query-replace= in one of Embark's keymaps.
Also, those action keymaps are normal Emacs keymaps and you should feel free
to bind in them whatever commands you find useful as actions and want to be
available through convenient bindings.

The actions in =embark-general-map= are available no matter what type of
completion you are in the middle of. By default this includes bindings to save
the current candidate in the kill ring and to insert the current candidate in
the previously selected buffer (the buffer that was current when you executed
a command that opened up the minibuffer).

Emacs's minibuffer completion system includes metadata indicating the /category/
of what is being completed. For example, =find-file='s metadata indicates a
category of =file= and =switch-to-buffer='s metadata indicates a category of
=buffer=. Embark has the related notion of the /type/ of a target for actions, and
by default when category metadata is present it is taken to be the type of
minibuffer completion candidates when used as targets. Emacs commands often do
not set useful category metadata so the [[https://github.com/minad/marginalia][Marginalia]] package, which supplies
this missing metadata, is highly recommended for use with Embark.

Embark's default configuration has actions for the following target types:
files, buffers, symbols, packages, URLs, bookmarks, and as a somewhat special
case, actions for when the region is active. You can read about the [[https://github.com/oantolin/embark/wiki/Default-Actions][default
actions and their key bindings]] on the GitHub project wiki.

Embark has a notion of default action for a target:

- If the target is a minibuffer completion candidate, then the default action
  is whatever command opened the minibuffer in the first place. For example if
  you run =kill-buffer=, then the default action will be to kill buffers.
- If the target comes from a regular buffer (i.e., not a minibuffer), then the
  default action is whatever is bound to =RET= in the keymap of actions for that
  type of target. For example, in Embark's default configuration for a URL
  found at point the default action is =browse-url=, because =RET= is bound to
  =browse-url= in the =embark-url-map= keymap.

To run the default action you can press =RET= after running =embark-act=. Note
that if there are several different targets at a given location, each has its
own default action, so first cycle to the target you want and then press =RET=
to run the corresponding default action.

There is also =embark-dwim= which runs the default action for the first target
found. It's pretty handy in non-minibuffer buffers: with Embark's default
configuration it will:

- Open the file at point.
- Open the URL at point in a web browser (using the =browse-url= command).
- Compose a new email to the email address at point.
- In an Emacs Lisp buffer, if point is on an opening parenthesis or right
  after a closing one, it will evaluate the corresponding expression.
- Go to the definition of an Emacs Lisp function, variable or macro at point.
- Find the file corresponding to an Emacs Lisp library at point.

Besides acting individually on targets, Embark lets you work collectively on a
set of target /candidates/. For example, while you are in the minibuffer the
candidates are simply the possible completions of your input. Embark provides
three main commands to work on candidate sets:

- The =embark-act-all= command runs the same action on each of the current
  candidates. It is just like using =embark-act= on each candidate in turn.
  (Because you can easily act on many more candidates than you meant to, by
  default Embark asks you to confirm uses of =embark-act-all=; you can turn this
  off by setting the user option =embark-confirm-act-all= to =nil=.)

- The =embark-collect= command produces a buffer listing all the current
  candidates, for you to peruse and run actions on at your leisure. The
  candidates are displayed as a list showing additional annotations.

  The Embark Collect buffer is “dired-like”: you can mark and unmark
  candidates with =m= and =u=, you can unmark all marked candidates with =U= or
  toggle the marks with =t=. In an Embark Collect buffer =embark-act-all= is bound
  to =A= and will act on all currently marked candidates if there any, and will
  act on all candidates if none are marked.

- The =embark-export= command tries to open a buffer in an appropriate major
  mode for the set of candidates. If the candidates are files export produces
  a Dired buffer; if they are buffers, you get an Ibuffer buffer; and if they
  are packages you get a buffer in package menu mode.

  If you use the grepping commands from the [[https://github.com/minad/consult/][Consult]] package, =consult-grep=,
  =consult-git-grep= or =consult-ripgrep=, then you should install the
  =embark-consult= package, which adds support for exporting a list of grep
  results to an honest grep-mode buffer, on which you can even use [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] if
  you wish.

When in doubt choosing between exporting and collecting, a good rule of thumb
is to always prefer =embark-export= since when an exporter to a special major
mode is available for a given type of target, it will be more featureful than
an Embark collect buffer, and if no such exporter is configured the
=embark-export= command falls back to the generic =embark-collect=.

These commands are always available as “actions” (although they do not act on
just the current target but on all candidates) for =embark-act= and are bound to
=A=, =S= (for “snapshot”), and =E=, respectively, in =embark-general-map=. This means
that you do not have to bind your own key bindings for these (although you
can, of course!), just a key binding for =embark-act=.

In Embark Collect or Embark Export buffers that were obtained by running
=embark-collect= or =embark-export= from within a minibuffer completion session, =g=
is bound to a command that restarts the completion session, that is, the
command that opened the minibuffer is run again and the minibuffer contents
restored. You can then interact normally with the command, perhaps editing the
minibuffer contents, and, if you wish, you can rerun =embark-collect= or
=embark-export= to get an updated buffer.

Finally, there is also an =embark-live= variant of the =embark-collect= command
which automatically updates the collection after each change in the source
buffer. Users of a completion UI that automatically updates and displays the
candidate list (such as Vertico, Icomplete, Fido-mode, or MCT) will probably
not want to use =embark-live= from the minibuffer as they will then have two
live updating displays of the completion candidates!

A more likely use of =embark-live= is to be called from a regular buffer to
display a sort of live updating “table of contents” for the buffer. This
depends on having appropriate candidate collectors configured in
=embark-candidate-collectors=. There are not many in Embark's default
configuration, but you can try this experiment: open a dired buffer in a
directory that has very many files, mark a few, and run =embark-live=. You'll
get an Embark Collect buffer containing only the marked files, which updates
as you mark or unmark files in dired. To make =embark-live= genuinely useful
other candidate collectors are required. The =embark-consult= package
(documented near the end of this manual) contains a few: one for imenu items
and one for outline headings as used by =outline-minor-mode=. Those collectors
really do give =embark-live= a table-of-contents feel.

Embark also has the =embark-become= command which is useful for when you run a
command, start typing at the minibuffer and realize you meant a different
command. The most common case for me is that I run =switch-to-buffer=, start
typing a buffer name and realize I haven't opened the file I had in mind yet!
I'll use this situation as a running example to illustrate =embark-become=. When
this happens I can, of course, press =C-g= and then run =find-file= and open the
file, but this requires retyping the portion of the file name you already
typed. This process can be streamlined with =embark-become=: while still in the
=switch-to-buffer= you can run =embark-become= and effectively make the
=switch-to-buffer= command become =find-file= for this run.

You can bind =embark-become= to a key in =minibuffer-local-map=, but it is also
available as an action under the letter =B= (uppercase), so you don't need a
binding if you already have one for =embark-act=. So, assuming I have =embark-act=
bound to, say, =C-.=, once I realize I haven't open the file I can type =C-. B
C-x C-f= to have =switch-to-buffer= become =find-file= without losing what I have
already typed in the minibuffer.

But for even more convenience, =embark-become= offers shorter key bindings for
commands you are likely to want the current command to become. When you use
=embark-become= it looks for the current command in all keymaps named in the
list =embark-become-keymaps= and then activates all keymaps that contain it. For
example, the default value of =embark-become-keymaps= contains a keymap
=embark-become-file+buffer-map= with bindings for several commands related to
files and buffers, in particular, it binds =switch-to-buffer= to =b= and =find-file=
to =f=. So when I accidentally try to switch to a buffer for a file I haven't
opened yet, =embark-become= finds that the command I ran, =switch-to-buffer=, is
in the keymap =embark-become-file+buffer-map=, so it activates that keymap (and
any others that also contain a binding for =switch-to-buffer=). The end result
is that I can type =C-. B f= to switch to =find-file=.

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

**** embark-consult

[[https://github.com/oantolin/embark/blob/master/embark-consult.el][embark-consult]] provides integration between Embark and Consult. The package
will be loaded automatically by Embark.

Some of the functionality here was previously contained in Embark itself:

- Support for =consult-buffer=, so that you get the correct actions for each
  type of entry in =consult-buffer='s list.

- Support for =consult-line=, =consult-outline=, =consult-mark= and
  =consult-global-mark=, so that the insert and save actions don't include a
  weird unicode character at the start of the line, and so you can export from
  them to an occur buffer (where =occur-edit-mode= works!).

Just load this package to get the above functionality, no further
configuration is necessary.

Additionally this package contains some functionality that has never been in
Embark: access to Consult preview from auto-updating Embark Collect buffer
that is associated to an active minibuffer for a Consult command. For
information on Consult preview, see Consult's info manual or its readme on
GitHub.

#+begin_src emacs-lisp
;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** marginalia

[[https://github.com/minad/marginalia][marginalia]] provides =marginalia-mode= which adds marginalia to the minibuffer
completions. [[https://en.wikipedia.org/wiki/Marginalia][Marginalia]] are marks or annotations placed at the margin of the
page of a book or in this case helpful colorful annotations placed at the
margin of the minibuffer for your completion candidates. Marginalia can only
add annotations to the completion candidates. It cannot modify the appearance
of the candidates themselves, which are shown unaltered as supplied by the
original command.

The annotations are added based on the completion category. For example
=find-file= reports the =file= category and =M-x= reports the =command= category. You
can cycle between more or less detailed annotators or even disable the
annotator with command =marginalia-cycle=.

It is recommended to use Marginalia together with either the [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]],
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] or the default completion UI. Furthermore Marginalia can be combined
with [[https://github.com/oantolin/embark][Embark]] for action support and [[https://github.com/minad/consult][Consult]], which provides many useful
commands.

#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :config
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

*** orderless

[[https://github.com/oantolin/orderless][orderless]] provides an =orderless= /completion style/ that divides the pattern into
space-separated components, and matches candidates that match all of the
components in any order. Each component can match in any one of several ways:
literally, as a regexp, as an initialism, in the flex style, or as multiple
word prefixes. By default, regexp and literal matches are enabled.

A completion style is a back-end for completion and is used from a front-end
that provides a completion UI. Any completion style can be used with the
default Emacs completion UI (sometimes called minibuffer tab completion), with
the built-in Icomplete package (which is similar to the more well-known Ido
Mode), the icomplete-vertical variant from Emacs 28 (see the external
[[https://github.com/oantolin/icomplete-vertical][icomplete-vertical]] package to get that functionality on earlier versions of
Emacs), or with some third party minibuffer completion frameworks such as [[https://gitlab.com/protesilaos/mct][Mct]],
[[https://github.com/minad/vertico][Vertico]], or [[https://github.com/raxod502/selectrum][Selectrum]] (in its default configuration).

All the completion UIs just mentioned are for minibuffer completion, used when
Emacs commands prompt the user in the minibuffer for some input, but there is
also completion at point in normal buffers, typically used for identifiers in
programming languages. Completion styles can also be used for that purpose by
completion at point UIs such as [[https://github.com/minad/corfu][Corfu]], [[https://company-mode.github.io/][Company]] or the function
=consult-completion-in-region= from [[https://github.com/minad/consult][Consult]].

To use a completion style with any of the above mentioned completion UIs
simply add it as an entry in the variables =completion-styles= and
=completion-category-overrides= (see their documentation). You may also want to
modify the =completion-category-defaults= variable, which serves as a default
value for =completion-category-overrides=: if you want to use =orderless=
exclusively, set both variables to =nil=.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** vertico

[[https://github.com/minad/vertico][vertico]] provides a performant and minimalistic vertical completion UI based on
the default completion system. The focus of Vertico is to provide a UI which
behaves /correctly/ under all circumstances. By reusing the built-in facilities
system, Vertico achieves /full compatibility/ with built-in Emacs completion
commands and completion tables. Vertico only provides the completion UI but
aims to be highly flexible, extendable and modular. Additional enhancements
are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small
and maintainable. The main =vertico.el= package is only about 600 lines of code
without white space and comments.

- Vertical display with arrow key navigation. See the [[#extensions][extensions]] for
  additional display modes.
- Prompt shows the current candidate index and the total number of candidates.
- The current candidate is inserted with =TAB= and selected with =RET=.
- Non-existing candidates can be submitted with =M-RET= or by moving the point
  to the prompt.
- Configurable sorting by history position, length and alphabetically.
- Long candidates with newlines are formatted to take up less space.
- Deferred completion style highlighting for performance.
- Annotations are displayed next to the candidates (=annotation-= and
  =affixation-function=).
- Support for candidate grouping and group cycling commands (=group-function=).

#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :demand t
  :config
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )
#+end_src

*** ivy

#+begin_src emacs-lisp
(use-package ivy
  :disabled t
  :diminish
  :demand t

  :bind (("C-x b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("M-H"   . ivy-resume))

  :bind (:map ivy-minibuffer-map
              ("<tab>" . ivy-alt-done)
              ("SPC"   . ivy-alt-done-or-space)
              ("C-d"   . ivy-done-or-delete-char)
              ("C-i"   . ivy-partial-or-done)
              ("C-r"   . ivy-previous-line-or-history)
              ("M-r"   . ivy-reverse-i-search))

  :bind (:map ivy-switch-buffer-map
              ("C-k" . ivy-switch-buffer-kill))

  :custom
  (ivy-dynamic-exhibit-delay-ms 200)
  (ivy-height 10)
  (ivy-initial-inputs-alist nil)
  (ivy-magic-tilde nil)
  (ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (ivy-use-virtual-buffers t)
  (ivy-wrap t)
  (ivy-extra-directories '("./"))
  (ivy-ignore-buffers
   '("\\` "
     "\\`\\*git-monitor:"
     "\\`\\*magit-process:"
     "\\.elc$"
     "\\.CFUserTextEncoding"
     "\\`\\*Quail Completions\\*\\'"
     "\\`\\.newsrc-dribble\\'"
     "\\`\\.newsrc.eld\\'"))
  (ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (ivy-rich-parse-remote-buffer nil)
  :preface
  (defun ivy-done-or-delete-char ()
    (interactive)
    (call-interactively
     (if (eolp)
         #'ivy-immediate-done
       #'ivy-delete-char)))

  (defun ivy-alt-done-or-space ()
    (interactive)
    (call-interactively
     (if (= ivy--length 1)
         #'ivy-alt-done
       #'self-insert-command)))

  (defun ivy-switch-buffer-kill ()
    (interactive)
    (debug)
    (let ((bn (ivy-state-current ivy-last)))
      (when (get-buffer bn)
        (kill-buffer bn))
      (unless (buffer-live-p (ivy-state-buffer ivy-last))
        (setf (ivy-state-buffer ivy-last)
              (with-ivy-window (current-buffer))))
      (setq ivy--all-candidates (delete bn ivy--all-candidates))
      (ivy--exhibit)))

  ;; This is the value of `magit-completing-read-function', so that we see
  ;; Magit's own sorting choices.
  (defun my-ivy-completing-read (&rest args)
    (let ((ivy-sort-functions-alist '((t . nil))))
      (apply 'ivy-completing-read args)))

  :config
  (ivy-mode 1)
  (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)

  (defun ivy--switch-buffer-matcher (regexp candidates)
    "Return REGEXP matching CANDIDATES.
Skip buffers that match `ivy-ignore-buffers'."
    (let ((res (ivy--re-filter regexp candidates)))
      (if (or (null ivy-use-ignore)
              (null ivy-ignore-buffers))
          res
        (or (cl-remove-if
             (lambda (buf)
               (cl-find-if
                (lambda (f-or-r)
                  (if (functionp f-or-r)
                      (funcall f-or-r buf)
                    (string-match-p f-or-r buf)))
                ivy-ignore-buffers))
             res)
            (and (eq ivy-use-ignore t)
                 res))))))
#+end_src

**** ivy-bibtex

#+begin_src emacs-lisp
(use-package ivy-bibtex
  :disabled t
  :commands ivy-bibtex)
#+end_src

**** ivy-hydra

#+begin_src emacs-lisp
(use-package ivy-hydra
  :disabled t
  :after (ivy hydra)
  :defer t)
#+end_src

**** ivy-pass

#+begin_src emacs-lisp
(use-package ivy-pass
  :disabled t
  :commands ivy-pass)
#+end_src

**** ivy-rich

#+begin_src emacs-lisp
(use-package ivy-rich
  :disabled t
  :after ivy
  :demand t
  :config
  (ivy-rich-mode 1)
  (setq ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t
        ivy-rich-path-style 'abbrev))
#+end_src

*** swiper

#+begin_src emacs-lisp
(use-package swiper
  :disabled t
  :after ivy
  :bind ("C-M-s" . swiper)
  :bind (:map swiper-map
              ("M-y" . yank)
              ("M-%" . swiper-query-replace)
              ("C-." . swiper-avy)
              ("M-c" . swiper-mc))
  :bind (:map isearch-mode-map
              ("C-o" . swiper-from-isearch))
  :custom
  (swiper-stay-on-quit t))
#+end_src

*** counsel

#+begin_src emacs-lisp
(use-package counsel
  :disabled t
  :after ivy
  :demand t
  :diminish
  :bind (("C-*"     . counsel-org-agenda-headlines)
         ("C-x C-f" . counsel-find-file)
         ("C-c e l" . counsel-find-library)
         ("C-c e q" . counsel-set-variable)
         ("C-h e l" . counsel-find-library)
         ("C-h e u" . counsel-unicode-char)
         ("C-h f"   . counsel-describe-function)
         ("C-x r b" . counsel-bookmark)
         ("M-x"     . counsel-M-x)
         ;; ("M-y"     . counsel-yank-pop)

         ("M-s f" . counsel-file-jump)
         ;; ("M-s g" . counsel-rg)
         ("M-s j" . counsel-dired-jump))
  :commands counsel-minibuffer-history
  :init
  (bind-key "M-r" #'counsel-minibuffer-history minibuffer-local-map)
  :custom
  (counsel-describe-function-preselect 'ivy-function-called-at-point)
  (counsel-locate-cmd 'counsel-locate-cmd-default)
  (counsel-find-file-ignore-regexp
   (concat "\\(\\`\\.[^.]\\|"
           (regexp-opt completion-ignored-extensions)
           "\\'\\)"))
  :config
  (add-to-list 'ivy-sort-matches-functions-alist
               '(counsel-find-file . ivy--sort-files-by-date))

  (defun counsel-recoll-function (string)
    "Run recoll for STRING."
    (if (< (length string) 3)
        (counsel-more-chars 3)
      (counsel--async-command
       (format "recollq -t -b %s"
               (shell-quote-argument string)))
      nil))

  (defun counsel-recoll (&optional initial-input)
    "Search for a string in the recoll database.
  You'll be given a list of files that match.
  Selecting a file will launch `swiper' for that file.
  INITIAL-INPUT can be given as the initial minibuffer input."
    (interactive)
    (counsel-require-program "recollq")
    (ivy-read "recoll: " 'counsel-recoll-function
              :initial-input initial-input
              :dynamic-collection t
              :history 'counsel-git-grep-history
              :action (lambda (x)
                        (when (string-match "file://\\(.*\\)\\'" x)
                          (let ((file-name (match-string 1 x)))
                            (find-file file-name)
                            (unless (string-match "pdf$" x)
                              (swiper ivy-text)))))
              :unwind #'counsel-delete-process
              :caller 'counsel-recoll)))
#+end_src

**** counsel-jq

#+begin_src emacs-lisp
(use-package counsel-jq
  :disabled t
  :commands counsel-jq)
#+end_src

**** counsel-osx-app

#+begin_src emacs-lisp
(use-package counsel-osx-app
  :disabled t
  :bind* ("S-M-SPC" . counsel-osx-app)
  :commands counsel-osx-app
  :config
  (setq counsel-osx-app-location
        (list "/Applications"
              "/Applications/Misc"
              "/Applications/Utilities"
              (expand-file-name "~/Applications")
              (expand-file-name "~/.nix-profile/Applications")
              "/Applications/Xcode.app/Contents/Applications")))
#+end_src

**** counsel-projectile

#+begin_src emacs-lisp
(use-package counsel-projectile
  :disabled t
  :after (counsel projectile)
  :custom
  (counsel-projectile-remove-current-buffer t)
  (counsel-projectile-remove-current-project t)
  :config
  (counsel-projectile-mode 1))
#+end_src

**** counsel-tramp

#+begin_src emacs-lisp
(use-package counsel-tramp
  :disabled t
  :commands counsel-tramp)
#+end_src

*** helm

#+begin_src emacs-lisp
(use-package helm
  :disabled t
  :defer t
  :bind (:map helm-map
              ("<tab>" . helm-execute-persistent-action)
              ("C-i"   . helm-execute-persistent-action)
              ("C-z"   . helm-select-action)
              ("A-v"   . helm-previous-page))
  :custom
  (helm-command-prefix-key nil)
  (helm-dash-browser-func 'eww)
  (helm-dash-docsets-path "/Users/johnw/Library/Application Support/Dash/DocSets/")
  (helm-minibuffer-history-key nil)
  (helm-recoll-options '("recollq" "-t" "-b"))
  :config
  (helm-autoresize-mode 1))
#+end_src

**** helm-descbinds

#+begin_src emacs-lisp
(use-package helm-descbinds
  :disabled t
  :bind ("C-h b" . helm-descbinds)
  :init
  (fset 'describe-bindings 'helm-descbinds))
#+end_src

**** helm-describe-modes

#+begin_src emacs-lisp
(use-package helm-describe-modes
  :disabled t
  :after helm
  :bind ("C-h m" . helm-describe-modes))
#+end_src

**** helm-font

#+begin_src emacs-lisp
(use-package helm-font
  :disabled t
  :commands (helm-select-xfont helm-ucs))
#+end_src

**** helm-google

#+begin_src emacs-lisp
(use-package helm-google
  :disabled t
  :commands helm-google)
#+end_src

**** helm-navi

#+begin_src emacs-lisp
(use-package helm-navi
  :disabled t
  :after (helm navi)
  :commands helm-navi)
#+end_src

**** helm-sys

#+begin_src emacs-lisp
(use-package helm-sys
  :disabled t
  :commands helm-top)
#+end_src

*** company

#+begin_src emacs-lisp
(use-package company
  :disabled t
  :defer 5
  :diminish
  :commands (company-mode company-indent-or-complete-common)
  :custom
  (company-frontends
   '(company-pseudo-tooltip-unless-just-one-frontend
     company-echo-metadata-frontend
     company-preview-frontend))
  (company-global-modes '(emacs-lisp-mode c-mode c++-mode))
  (company-idle-delay nil)
  (company-quickhelp-use-propertized-text t)
  (company-show-numbers t)
  (company-show-quick-access t)
  (company-tooltip-align-annotations t)
  :init
  (dolist (hook '(emacs-lisp-mode-hook
                  c-mode-common-hook))
    (add-hook hook
              #'(lambda ()
                  (local-set-key (kbd "<tab>")
                                 #'company-indent-or-complete-common))))
  :config
  ;; From https://github.com/company-mode/company-mode/issues/87
  ;; See also https://github.com/company-mode/company-mode/issues/123
  (defadvice company-pseudo-tooltip-unless-just-one-frontend
      (around only-show-tooltip-when-invoked activate)
    (when (company-explicit-action-p)
      ad-do-it))

  ;; See http://oremacs.com/2017/12/27/company-numbers/
  (defun ora-company-number ()
    "Forward to `company-complete-number'.

  Unless the number is potentially part of the candidate.
  In that case, insert the number."
    (interactive)
    (let* ((k (this-command-keys))
           (re (concat "^" company-prefix k)))
      (if (cl-find-if (lambda (s) (string-match re s))
                      company-candidates)
          (self-insert-command 1)
        (company-complete-number (string-to-number k)))))

  (let ((map company-active-map))
    (mapc
     (lambda (x)
       (define-key map (format "%d" x) 'ora-company-number))
     (number-sequence 0 9))
    (define-key map " " (lambda ()
                          (interactive)
                          (company-abort)
                          (self-insert-command 1))))

  (defun check-expansion ()
    (save-excursion
      (if (outline-on-heading-p t)
          nil
        (if (looking-at "\\_>") t
          (backward-char 1)
          (if (looking-at "\\.") t
            (backward-char 1)
            (if (looking-at "->") t nil))))))

  (define-key company-mode-map [tab]
    '(menu-item "maybe-company-expand" nil
                :filter (lambda (&optional _)
                          (when (check-expansion)
                            #'company-complete-common))))

  (eval-after-load "coq"
    '(progn
       (defun company-mode/backend-with-yas (backend)
         (if (and (listp backend) (member 'company-yasnippet backend))
             backend
           (append (if (consp backend) backend (list backend))
                   '(:with company-yasnippet))))
       (setq company-backends
             (mapcar #'company-mode/backend-with-yas company-backends))))

  (global-company-mode 1))
#+end_src

**** company-auctex

#+begin_src emacs-lisp
(use-package company-auctex
  :disabled t
  :after (company latex))
#+end_src

**** company-cabal

#+begin_src emacs-lisp
(use-package company-cabal
  :disabled t
  :after (company haskell-cabal))
#+end_src

**** company-elisp

#+begin_src emacs-lisp
(use-package company-elisp
  :disabled t
  :after company
  :config
  (push 'company-elisp company-backends))

(setq-local company-backend '(company-elisp))
#+end_src

**** company-math

#+begin_src emacs-lisp
(use-package company-math
  :disabled t
  :defer t)
#+end_src

**** company-quickhelp

#+begin_src emacs-lisp
(use-package company-quickhelp
  :disabled t
  :after company
  :bind (:map company-active-map
              ("C-c ?" . company-quickhelp-manual-begin)))
#+end_src

**** company-restclient

#+begin_src emacs-lisp
(use-package company-restclient
  :disabled t
  :after (company restclient))
#+end_src

**** company-terraform

#+begin_src emacs-lisp
(use-package company-terraform
  :disabled t
  :after (company terraform-mode))
#+end_src

** [Gnus]

#+begin_src emacs-lisp
(use-package dot-gnus
  :no-require t
  :bind (("M-G"   . switch-to-gnus)
         ("C-x m" . compose-mail))
  :init
  (setq gnus-home-directory "~/Messages/Gnus/")

  (defun fetchmail-password ()
    (lookup-password "imap.fastmail.com" "johnw" 993)))
#+end_src

#+begin_src emacs-lisp
(use-package gnus
  :custom
  (gnus-activate-level 2)
  (gnus-after-getting-new-news-hook
   '(gnus-group-list-groups gnus-group-save-newsrc gnus-display-time-event-handler))
  (gnus-agent-expire-all t)
  (gnus-agent-expire-days 14)
  (gnus-agent-go-online t)
  (gnus-agent-mark-unread-after-downloaded nil)
  (gnus-agent-synchronize-flags t)
  (gnus-alias-allow-forward-as-reply t)
  (gnus-alias-default-identity "Gmail")
  (gnus-alias-identity-alist
   '(("Gnu" "" "\"John Wiegley\" <johnw@gnu.org>" "" nil "" "John Wiegley                  GPG fingerprint = 4710 CF98 AF9B 327B B80F
http://newartisans.com                          60E1 46C4 BD1A 7AC1 4BA2")
     ("Kadena" "" "\"John Wiegley\" <john@kadena.io>" "" nil "" "")
     ("Gmail" "" "\"John Wiegley\" <jwiegley@gmail.com>" "" nil "" "")
     ("NewArtisans" "" "\"John Wiegley\" <johnw@newartisans.com>" "New Artisans LLC" nil "" "John Wiegley                  GPG fingerprint = 4710 CF98 AF9B 327B B80F
http://newartisans.com                          60E1 46C4 BD1A 7AC1 4BA2")))
  (gnus-alias-identity-rules
   '(("Kadena Mail"
      ("To" "kadena" current)
      "Kadena")
     ("Ledger Mailing List"
      ("To" "ledger-cli@googlegroups\\.com" current)
      "Gmail")
     ("Emacs Mailing Lists"
      ("Cc" "\\(emacs\\|debbugs\\)" current)
      "Gnu")
     ("Emacs Mailing Lists"
      ("To" "\\(emacs\\|debbugs\\)" current)
      "Gnu")
     ("Emacs Newsgroups"
      ("Newsgroups" "emacs" current)
      "Gnu")
     ("Haskell Groups"
      ("Newsgroups" "\\(haskell\\|ghc\\|nix\\|coq\\|acl2\\|idris\\|agda\\|ssreflect\\|risc-v\\)" current)
      "NewArtisans")
     ("Haskell Mailing Lists"
      ("To" "\\(haskell\\|ghc\\|nix\\|coq\\|acl2\\|idris\\|agda\\|ssreflect\\|risc-v\\)" current)
      "NewArtisans")))
  (gnus-alias-override-user-mail-address t)
  (gnus-alias-unknown-identity-rule 'error)
  (gnus-always-read-dribble-file t)
  (gnus-article-date-lapsed-new-header t)
  (gnus-article-update-date-headers nil)
  (gnus-asynchronous t)
  (gnus-check-new-newsgroups nil)
  (gnus-completing-read-function 'gnus-ido-completing-read)
  (gnus-default-adaptive-score-alist
   '((gnus-saved-mark
      (subject 250)
      (from 50))
     (gnus-dormant-mark
      (subject 150)
      (from 50))
     (gnus-forwarded-mark
      (subject 100)
      (from 25))
     (gnus-replied-mark
      (subject 75)
      (from 15))
     (gnus-ticked-mark
      (subject 0)
      (from 0))
     (gnus-read-mark
      (subject 30)
      (from 5))
     (gnus-del-mark
      (subject 5)
      (from 0))
     (gnus-recent-mark
      (subject 0)
      (from 0))
     (gnus-killed-mark
      (subject -5)
      (from -5))
     (gnus-catchup-mark
      (subject -150)
      (from 0))
     (gnus-duplicate-mark
      (subject -150)
      (from 0))
     (gnus-expirable-mark
      (subject -250)
      (from 0))
     (gnus-spam-mark
      (subject -10)
      (from -150))))
  (gnus-default-article-saver 'gnus-summary-save-in-mail)
  (gnus-generate-tree-function 'gnus-generate-horizontal-tree)
  (gnus-group-default-list-level 2)
  (gnus-group-line-format "%S%p%P%M%5y: %(%B%G%B%)
")
  (gnus-group-mode-hook '(gnus-topic-mode gnus-agent-mode hl-line-mode))
  (gnus-group-use-permanent-levels t)
  (gnus-harvest-sender-alist '((".*@gnu\\.org" . johnw@gnu\.org)))
  (gnus-home-directory "~/Messages/Gnus/")
  (gnus-ignored-from-addresses
   "\\(johnw?\\|jwiegley\\)\\(-[^@]+\\)?@\\(\\(gmail\\|newartisans\\)\\.com\\|kadena\\.io\\|gnu\\.org\\)")
  (gnus-ignored-mime-types
   '("application/x-pkcs7-signature" "application/ms-tnef" "text/x-vcard"))
  (gnus-interactive-exit 'quiet)
  (gnus-large-newsgroup 4000)
  (gnus-local-domain "newartisans.com")
  (gnus-mailing-list-groups "\\`\\(list\\|wg21\\)\\.")
  (gnus-mark-unpicked-articles-as-read t)
  (gnus-message-archive-group '((format-time-string "sent.%Y")))
  (gnus-message-replysign t)
  (gnus-novice-user nil)
  (gnus-parameters
   '(("brass\\.smedl"
      (list-identifier . "\\[brass-rings/smedl\\]"))
     ("^haskell$"
      (display . all))
     ("list\\.gnu\\.prog\\.discuss$"
      (list-identifier . "\\[gnu-prog-discuss\\]"))
     ("list\\.riscv\\.devel$"
      (to-address . "sw-dev@lists.riscv.org")
      (to-list . "sw-dev@lists.riscv.org")
      (list-identifier . "\\[\\(riscv-sw\\|sw-dev\\)\\]"))
     ("list\\.coq\\.fiat"
      (to-address . "fiat@lists.csail.mit.edu")
      (to-list . "fiat@lists.csail.mit.edu")
      (list-identifier . "\\[Fiat\\]"))
     ("list\\.gsoc\\.mentors$"
      (to-address . "google-summer-of-code-mentors-list@googlegroups.com")
      (to-list . "google-summer-of-code-mentors-list@googlegroups.com")
      (list-identifier . "\\[GSoC Mentors\\]"))
     ("list\\.haskell\\.ghc$"
      (to-address . "glasgow-haskell-users@haskell.org")
      (to-list . "glasgow-haskell-users@haskell.org")
      (list-identifier . "\\[Haskell\\]"))
     ("list\\.haskell\\.ghc-linker"
      (to-address . "ghc-linker@googlegroups.com")
      (to-list . "ghc-linker@googlegroups.com"))
     ("list\\.nix\\.devel"
      (to-address . "nix-dev@lists.science.uu.nl")
      (to-list . "nix-dev@lists.science.uu.nl")
      (list-identifier . "\\[Nix-dev\\]"))
     ("\\`gmane\\."
      (spam-process gnus-group-spam-exit-processor-report-gmane))
     ("list\\.github$"
      (total-expire . t)
      (expiry-wait . 90)
      (expiry-target . delete))
     ("mail\\.spam"
      (total-expire . t)
      (expiry-wait . 28)
      (expiry-target . delete)
      (ham-process-destination . "INBOX")
      (spam-contents gnus-group-spam-classification-spam)
      (spam-process
       ((spam spam-use-spamassassin)
        (ham spam-use-spamassassin))))
     ("list\\."
      (subscribed . t))
     ("list\\.wg21\\.\\(.*\\)"
      (to-address . "c++std-\\1@accu.org")
      (to-list . "c++std-\\1@accu.org")
      (gnus-list-identifiers "\\[c\\+\\+std-.+?\\]"))
     ("INBOX"
      (total-expire . t)
      (expiry-wait . 90)
      (expiry-target . "mail.archive")
      (spam-process-destination . "mail.spam")
      (spam-contents gnus-group-spam-classification-ham)
      (spam-process
       ((spam spam-use-spamassassin)
        (ham spam-use-spamassassin))))
     ("\\(mail\\.\\|INBOX\\)"
      (gnus-use-scoring nil))
     ("mail\\.archive"
      (gnus-summary-line-format "%«%U%R %uS %ur %»%(%*%-14,14f   %4u&size; %1«%B%s%»%)\n")
      (gnus-show-threads nil))
     ("list\\.ledger\\.devel"
      (to-address . "ledger-cli@googlegroups.com")
      (to-list . "ledger-cli@googlegroups.com"))
     ("list\\.bahai\\.tarjuman"
      (to-address . "tarjuman@bahai-library.com")
      (to-list . "tarjuman@bahai-library.com")
      (list-identifier . "\\[tj\\]"))
     ("list\\.emacs\\.devel$"
      (to-address . "emacs-devel@gnu.org")
      (to-list . "emacs-devel@gnu.org"))
     ("list\\.emacs\\.tangents$"
      (to-address . "emacs-tangents@gnu.org")
      (to-list . "emacs-tangents@gnu.org"))
     ("list\\.emacs\\.help$"
      (to-address . "help-gnu-emacs@gnu.org")
      (to-list . "help-gnu-emacs@gnu.org"))
     ("list\\.emacs\\.bugs$"
      (to-list . "bug-gnu-emacs@gnu.org"))
     ("list\\.emacs\\.bugs\\.tracker"
      (list-identifier . "\\[debbugs-tracker\\]"))
     ("list\\.emacs\\.diffs"
      (to-address . "emacs-diffs@gnu.org")
      (to-list . "emacs-diffs@gnu.org")
      (list-identifier . "\\[Emacs-diffs\\]"))
     ("list\\.emacs\\.elpa\\.diffs"
      (to-address . "emacs-elpa-diffs@gnu.org")
      (to-list . "emacs-elpa-diffs@gnu.org")
      (list-identifier . "\\[elpa\\]"))
     ("list\\.emacs\\.buildstatus"
      (to-address . "emacs-buildstatus@gnu.org")
      (to-list . "emacs-buildstatus@gnu.org"))
     ("list\\.emacs\\.sources"
      (to-address . "gnu-emacs-sources@gnu.org")
      (to-list . "gnu-emacs-sources@gnu.org"))
     ("list\\.emacs\\.orgmode"
      (to-address . "emacs-orgmode@gnu.org")
      (to-list . "emacs-orgmode@gnu.org")
      (list-identifier . "\\[O\\]"))
     ("list\\.boost\\.cppnow"
      (to-address . "boostcon-plan@googlegroups.com")
      (to-list . "boostcon-plan@googlegroups.com"))
     ("list\\.boost\\.ryppl"
      (list-identifier . "\\[ryppl-dev\\]")
      (to-address . "ryppl-dev@googlegroups.com")
      (to-list . "ryppl-dev@googlegroups.com"))
     ("list\\.boost\\.devel"
      (to-address . "boost@lists.boost.org")
      (to-list . "boost@lists.boost.org")
      (list-identifier . "\\[boost\\]"))
     ("list\\.boost\\.\\(users\\|announce\\)"
      (to-address . "boost-\\1@lists.boost.org")
      (to-list . "boost-\\1@lists.boost.org")
      (list-identifier . "\\\\[Boost-\\1\\\\]"))
     ("list\\.isocpp\\.\\(proposals\\|discussion\\)"
      (to-address . "std-\\1@isocpp.org")
      (to-list . "std-\\1@isocpp.org")
      (list-identifier . "\\\\[\\\\(lang\\\\|lib\\\\|std\\\\)-\\1\\\\]"))
     ("list\\.clang\\.devel"
      (to-address . "cfe-dev@cs.uiuc.edu")
      (to-list . "cfe-dev@cs.uiuc.edu")
      (list-identifier . "\\[\\(cfe-dev\\|LLVMdev\\)\\]"))
     ("list\\.llvm\\.devel"
      (to-address . "llvmdev@cs.uiuc.edu")
      (to-list . "llvmdev@cs.uiuc.edu")
      (list-identifier . "\\[\\(cfe-dev\\|LLVMdev\\)]"))
     ("list\\.nix\\.devel"
      (to-address . "nix-dev@lists.science.uu.nl")
      (to-list . "nix-dev@lists.science.uu.nl")
      (list-identifier . "\\[Nix-dev\\]"))
     ("list\\.haskell\\.pipes"
      (to-address . "haskell-pipes@googlegroups.com")
      (to-list . "haskell-pipes@googlegroups.com")
      (list-identifier . "\\[haskell-pipes\\]"))
     ("list\\.haskell\\.cafe"
      (to-address . "haskell-cafe@haskell.org")
      (to-list . "haskell-cafe@haskell.org")
      (list-identifier . "\\[Haskell\\(-cafe\\)?\\]"))
     ("list\\.haskell\\.libraries"
      (to-address . "libraries@haskell.org")
      (to-list . "libraries@haskell.org"))
     ("list\\.haskell\\.prime"
      (to-address . "haskell-prime@haskell.org")
      (to-list . "haskell-prime@haskell.org")
      (list-identifier . "\\[haskell/rfcs\\]"))
     ("list\\.haskell\\.template-haskell"
      (to-address . "template-haskell@haskell.org")
      (to-list . "template-haskell@haskell.org"))
     ("list\\.haskell\\.beginners"
      (to-address . "beginners@haskell.org")
      (to-list . "beginners@haskell.org")
      (list-identifier . "\\[Haskell-beginners\\]"))
     ("list\\.haskell\\.infrastructure"
      (to-address . "haskell-infrastructure@community.galois.com")
      (to-list . "haskell-infrastructure@community.galois.com")
      (list-identifier . "\\[Haskell-infrastructure\\]"))
     ("list\\.haskell\\.community"
      (to-address . "haskell-community@haskell.org")
      (to-list . "haskell-community@haskell.org")
      (list-identifier . "\\[Haskell-\\(community\\|cafe\\)\\]"))
     ("list\\.haskell\\.announce"
      (to-address . "haskell@haskell.org")
      (to-list . "haskell@haskell.org")
      (list-identifier . "\\[Haskell\\]"))
     ("list\\.haskell\\.cabal"
      (to-address . "cabal-devel@haskell.org")
      (to-list . "cabal-devel@haskell.org")
      (list-identifier . "\\[Haskell\\]"))
     ("list\\.coq$"
      (to-address . "coq-club@inria.fr")
      (to-list . "coq-club@inria.fr")
      (list-identifier . "\\[Coq-Club\\]"))
     ("list\\.coq\\.devel$"
      (to-address . "coqdev@inria.fr")
      (to-list . "coqdev@inria.fr")
      (list-identifier . "\\[coqdev\\]"))
     ("list\\.agda\\.devel$"
      (to-address . "agda@lists.chalmers.se")
      (to-list . "agda@lists.chalmers.se")
      (list-identifier . "\\[Agda\\]"))
     ("list\\.idris\\.devel$"
      (to-address . "idris-lang@googlegroups.com")
      (to-list . "idris-lang@googlegroups.com")
      (list-identifier . "\\[Idris\\]"))
     ("list\\.safe\\.verify$"
      (to-address . "safe-verif@lists.crash-safe.org")
      (to-list . "safe-verif@lists.crash-safe.org")
      (list-identifier . "\\[Safe-verif\\]"))
     ("list\\.coq\\.ssreflect"
      (to-address . "ssreflect@msr-inria.inria.fr")
      (to-list . "ssreflect@msr-inria.inria.fr")
      (list-identifier . "\\[ssreflect\\]"))
     ("list\\.brass\\.proposal"
      (to-address . "brass-proposal@lists.brass-tacks.org")
      (to-list . "brass-proposal@lists.brass-tacks.org")
      (list-identifier . "\\[Brass-proposal\\]"))
     ("list\\.brass\\.commits"
      (to-address . "bae-brass-commits@googlegroups.com")
      (to-list . "bae-brass-commits@googlegroups.com")
      (list-identifier . "\\[bae-brass-commits\\]\\( \\[bae-brass/brass-proposal\\]\\)? [0-9a-f]+?:"))
     ("list\\.brass\\.rings$"
      (list-identifier . "\\[rings-all\\]")
      (to-address . "rings-all@googlegroups.com")
      (to-list . "rings-all@googlegroups.com"))
     ("list\\.brass\\.smedl$"
      (list-identifier . "\\[smedl\\]"))
     ("list\\.hott"
      (to-address . "hott-cafe@googlegroups.com")
      (to-list . "hott-cafe@googlegroups.com")
      (list-identifier . "\\[hott-cafe\\]"))
     ("list\\.acl2\\.help"
      (to-address . "acl2-help@utlists.utexas.edu")
      (to-list . "acl2-help@utlists.utexas.edu"))))
  (gnus-permanently-visible-groups "INBOX")
  (gnus-read-active-file nil)
  (gnus-read-newsrc-file nil)
  (gnus-refer-article-method
   '(current
     (nnir "nnimap:Local")
     (nntp "LocalNews"
           (nntp-address "localhost")
           (nntp-port-number 9119))
     (nntp "Gmane"
           (nntp-address "news.gmane.org"))
     (nntp "Eternal September"
           (nntp-address "news.eternal-september.org")
           (nntp-authinfo-user "jwiegley"))))
  (gnus-registry-ignored-groups '(("nntp" t) ("^INBOX" t)))
  (gnus-save-killed-list nil)
  (gnus-save-newsrc-file nil)
  (gnus-score-default-duration 'p)
  (gnus-score-expiry-days 30)
  (gnus-score-interactive-default-score 10)
  (gnus-select-group-hook '(gnus-group-set-timestamp))
  (gnus-select-method
   '(nnimap "Local"
            (nnimap-stream plain)
            (nnimap-address "127.0.0.1")
            (nnimap-server-port 9143)))
  (gnus-sieve-file "~/Messages/dovecot.sieve")
  (gnus-sieve-select-method "nnimap:Local")
  (gnus-signature-separator '("^-- $" "^-- *$" "^_____+$"))
  (gnus-simplify-subject-functions '(gnus-simplify-subject-fuzzy))
  (gnus-split-methods
   '((gnus-save-site-lisp-file)
     (gnus-article-archive-name)
     (gnus-article-nndoc-name)))
  (gnus-started-hook
   '((lambda nil (run-hooks 'gnus-after-getting-new-news-hook))))
  (gnus-subscribe-newsgroup-method 'gnus-subscribe-topics)
  (gnus-sum-thread-tree-single-indent "  ")
  (gnus-summary-expunge-below -100)
  (gnus-summary-line-format "%«%3t %U%R %uS %ur %»%(%*%-14,14f   %1«%B%s%»%)\n")
  (gnus-summary-mark-below -100)
  (gnus-summary-pick-line-format "%U%R %uS %ur %(%*%-14,14f  %B%s%)\n")
  (gnus-summary-prepared-hook '(gnus-summary-hide-all-threads))
  (gnus-summary-save-parts-default-mime ".*")
  (gnus-suppress-duplicates t)
  (gnus-suspend-gnus-hook '(gnus-group-save-newsrc))
  (gnus-thread-expunge-below -1000)
  (gnus-thread-hide-subtree t)
  (gnus-thread-ignore-subject nil)
  (gnus-thread-score-function 'max)
  (gnus-thread-sort-functions '((not gnus-thread-sort-by-number)))
  (gnus-topic-display-empty-topics nil)
  (gnus-topic-line-format "%i[ %A: %(%{%n%}%) ]%v\n")
  (gnus-treat-date-lapsed 'head)
  (gnus-treat-hide-citation-maybe t)
  (gnus-treat-strip-cr t)
  (gnus-treat-strip-leading-blank-lines t)
  (gnus-treat-strip-multiple-blank-lines t)
  (gnus-treat-strip-trailing-blank-lines t)
  (gnus-treat-unsplit-urls t)
  (gnus-tree-minimize-window nil)
  (gnus-uncacheable-groups "^nnml")
  (gnus-use-adaptive-scoring '(line))
  (gnus-use-cache t)
  (gnus-verbose 4)
  (mail-envelope-from 'header)
  (mail-host-address "newartisans.com")
  (mail-personal-alias-file "~/doc/mailrc")
  (mail-self-blind t)
  (mail-setup-with-from nil)
  (mail-source-delete-incoming t)
  (mail-source-delete-old-incoming-confirm nil)
  (mail-source-report-new-mail-interval 15)
  (mail-sources '((file :path "/var/mail/johnw")))
  (mail-specify-envelope-from t)
  (mail-user-agent 'gnus-user-agent)
  (mm-attachment-override-types
   '("text/x-vcard" "application/pkcs7-mime" "application/x-pkcs7-mime" "application/pkcs7-signature" "application/x-pkcs7-signature" "image/.*"))
  (mm-decrypt-option 'always)
  (mm-discouraged-alternatives '("application/msword" "text/richtext"))
  (mm-enable-external 'ask)
  (mm-inline-text-html-with-images t)
  (mm-text-html-renderer 'gnus-w3m)
  (mm-verify-option 'always)
  (mm-w3m-safe-url-regexp nil)
  (nnir-imap-default-search-key "imap")
  (nnmail-crosspost nil)
  (nnmail-expiry-wait 30)
  (nnmail-extra-headers '(To Cc Newsgroups))
  (nnmail-scan-directory-mail-source-once t)
  (send-mail-function 'sendmail-send-it)
  (sendmail-program "msmtp")
  (smtpmail-default-smtp-server "smtp.gmail.com")
  (smtpmail-queue-dir "~/Messages/Gnus/Mail/queue/")
  (smtpmail-smtp-server "smtp.fastmail.com")
  (smtpmail-smtp-service 587)
  (smtpmail-smtp-user "johnw@newartisans.com")
  (smtpmail-starttls-credentials
   '(("mail.johnwiegley.com" 587 nil nil)
     ("smtp.fastmail.com" 587 nil nil)
     ("smtp.gmail.com" 587 nil nil)))
  (smtpmail-stream-type 'ssl)
  (ssl-certificate-verification-policy 1)
  (tls-checktrust t)
  (tls-program
   '("openssl s_client -connect %h:%p -no_ssl2 -ign_eof -CApath ~/.nix-profile/etc/ssl/certs -cert ~/Messages/me.pem"))
  :custom-face
  (gnus-summary-normal-ticked ((t (:foreground "pink4"))))
  :config
  (require 'starttls)
  (require 'message)
  (eval-and-compile
    (require 'gnus-start)
    (require 'gnus-sum)
    (require 'gnus-art)
    (require 'mml))

  (gnus-delay-initialize)

  (defvar switch-to-gnus-unplugged nil)
  (defvar switch-to-gnus-run nil)

  (eval-when-compile
    (defvar ido-default-buffer-method)
    (declare-function ido-visit-buffer "ido"))

  (defun switch-to-gnus (&optional arg)
    (interactive "P")
    (push-window-configuration)
    (let* ((alist '("\\`\\*unsent" "\\`\\*Summary" "\\`\\*Group"))
           (candidate
            (catch 'found
              (dolist (regexp alist)
                (dolist (buf (buffer-list))
                  (if (string-match regexp (buffer-name buf))
                      (throw 'found buf)))))))
      (if (and switch-to-gnus-run candidate)
          (progn
            (if (featurep 'ido)
                (ido-visit-buffer candidate ido-default-buffer-method)
              (switch-to-buffer candidate))
            (if (string-match "Group" (buffer-name candidate))
                (gnus-group-get-new-news)))
        (let ((switch-to-gnus-unplugged arg))
          ;; (gnus)
          (gnus-unplugged)
          (gnus-group-list-groups gnus-activate-level)
          (gnus-group-get-all-new-news)
          (setq switch-to-gnus-run t))))))
#+end_src

*** fetchmail-ctl

#+begin_src emacs-lisp
(use-package fetchmail-ctl
  :disabled t
  :after gnus-group
  :bind (:map gnus-group-mode-map
              ("v b" . switch-to-fetchmail)
              ("v d" . shutdown-fetchmail)
              ("v k" . kick-fetchmail)
              ;; ("v p" . fetchnews-post)
              ))
#+end_src

*** gnus-sum

#+begin_src emacs-lisp
(use-package gnus-sum
  :bind (:map gnus-summary-mode-map
              ("F" . gnus-summary-wide-reply-with-original)))
#+end_src

*** gnus-art

#+begin_src emacs-lisp
(use-package gnus-art
  :bind (:map gnus-article-mode-map
              ("F" . gnus-article-wide-reply-with-original)))
#+end_src

#+begin_src emacs-lisp
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
(add-hook 'gnus-group-mode-hook 'hl-line-mode)

(add-hook 'gnus-summary-mode-hook 'hl-line-mode)

(defun my-message-header-setup-hook ()
  (message-remove-header "From")
  (let ((gcc (message-field-value "Gcc")))
    (when (or (null gcc)
              (string-match "nnfolder\\+archive:" gcc))
      (message-remove-header "Bcc")
      (message-remove-header "Gcc")
      ;; (message-add-header (format "Bcc: %s" user-mail-address))
      ;; (message-add-header
      ;;  (format "Gcc: %s"
      ;;          (if (string-match "\\`list\\." (or gnus-newsgroup-name ""))
      ;;              "mail.sent"
      ;;            "INBOX")))
      )))

(add-hook 'message-header-setup-hook 'my-message-header-setup-hook)

(defadvice gnus-summary-resend-message-edit (after call-my-mhs-hook activate)
  (my-message-header-setup-hook))

(defun my-gnus-summary-save-parts (&optional arg)
  (interactive "P")
  (let ((directory "~/Downloads"))
    (message "Saving all MIME parts to %s..." directory)
    (gnus-summary-save-parts ".*" directory arg)
    (message "Saving all MIME parts to %s...done" directory)))

(bind-key "X m" 'my-gnus-summary-save-parts gnus-summary-mode-map)

(eval-when-compile
  (defvar gnus-agent-queue-mail))

(defun queue-message-if-not-connected ()
  (set (make-local-variable 'gnus-agent-queue-mail)
       (if (quickping "smtp.gmail.com") t 'always)))

(add-hook 'message-send-hook 'queue-message-if-not-connected)
(add-hook 'message-sent-hook 'gnus-score-followup-thread)

(defun exit-gnus-on-exit ()
  (if (and (fboundp 'gnus-group-exit)
           (gnus-alive-p))
      (with-current-buffer (get-buffer "*Group*")
        (let (gnus-interactive-exit)
          (gnus-group-exit)))))

(add-hook 'kill-emacs-hook 'exit-gnus-on-exit)

(defun switch-in-other-buffer (buf)
  (when buf
    (split-window-vertically)
    (balance-windows)
    (switch-to-buffer-other-window buf)))

(defun my-gnus-trash-article (arg)
  (interactive "P")
  (if (string-match "\\(drafts\\|queue\\|delayed\\)" gnus-newsgroup-name)
      (gnus-summary-delete-article arg)
    (gnus-summary-move-article arg "mail.trash")))

(define-key gnus-summary-mode-map [(meta ?q)] 'gnus-article-fill-long-lines)
(define-key gnus-summary-mode-map [?B delete] 'gnus-summary-delete-article)
(define-key gnus-summary-mode-map [?B backspace] 'my-gnus-trash-article)

(define-key gnus-article-mode-map [(meta ?q)] 'gnus-article-fill-long-lines)

(defface gnus-summary-expirable-face
  '((((class color) (background dark))
     (:foreground "grey50" :italic t :strike-through t))
    (((class color) (background light))
     (:foreground "grey55" :italic t :strike-through t)))
  "Face used to highlight articles marked as expirable."
  :group 'gnus-summary-visual)

(push '((eq mark gnus-expirable-mark) . gnus-summary-expirable-face)
      gnus-summary-highlight)

(if window-system
    (setq
     gnus-sum-thread-tree-false-root      ""
     gnus-sum-thread-tree-single-indent   ""
     gnus-sum-thread-tree-root            ""
     gnus-sum-thread-tree-vertical        "|"
     gnus-sum-thread-tree-leaf-with-other "+-> "
     gnus-sum-thread-tree-single-leaf     "\\-> "
     gnus-sum-thread-tree-indent          " "))

(defsubst dot-gnus-tos (time)
  "Convert TIME to a floating point number."
  (+ (* (car time) 65536.0)
     (cadr time)
     (/ (or (car (cdr (cdr time))) 0) 1000000.0)))

(defun gnus-user-format-function-S (header)
  "Return how much time it's been since something was sent."
  (condition-case err
      (let ((date (mail-header-date header)))
        (if (> (length date) 0)
            (let*
                ((then (dot-gnus-tos
                        (apply 'encode-time (parse-time-string date))))
                 (now (dot-gnus-tos (current-time)))
                 (diff (- now then))
                 (str
                  (cond
                   ((>= diff (* 86400.0 7.0 52.0))
                    (if (>= diff (* 86400.0 7.0 52.0 10.0))
                        (format "%3dY" (floor (/ diff (* 86400.0 7.0 52.0))))
                      (format "%3.1fY" (/ diff (* 86400.0 7.0 52.0)))))
                   ((>= diff (* 86400.0 30.0))
                    (if (>= diff (* 86400.0 30.0 10.0))
                        (format "%3dM" (floor (/ diff (* 86400.0 30.0))))
                      (format "%3.1fM" (/ diff (* 86400.0 30.0)))))
                   ((>= diff (* 86400.0 7.0))
                    (if (>= diff (* 86400.0 7.0 10.0))
                        (format "%3dw" (floor (/ diff (* 86400.0 7.0))))
                      (format "%3.1fw" (/ diff (* 86400.0 7.0)))))
                   ((>= diff 86400.0)
                    (if (>= diff (* 86400.0 10.0))
                        (format "%3dd" (floor (/ diff 86400.0)))
                      (format "%3.1fd" (/ diff 86400.0))))
                   ((>= diff 3600.0)
                    (if (>= diff (* 3600.0 10.0))
                        (format "%3dh" (floor (/ diff 3600.0)))
                      (format "%3.1fh" (/ diff 3600.0))))
                   ((>= diff 60.0)
                    (if (>= diff (* 60.0 10.0))
                        (format "%3dm" (floor (/ diff 60.0)))
                      (format "%3.1fm" (/ diff 60.0))))
                   (t
                    (format "%3ds" (floor diff)))))
                 (stripped
                  (replace-regexp-in-string "\\.0" "" str)))
              (concat (cond
                       ((= 2 (length stripped)) "  ")
                       ((= 3 (length stripped)) " ")
                       (t ""))
                      stripped))))
    (error "    ")))

(defun gnus-user-format-function-X (header)
  (let* ((to (or (cdr (assoc 'To (mail-header-extra header))) ""))
         (cc (or (cdr (assoc 'Cc (mail-header-extra header))) ""))
         )
    (message "to-address: %s" to-address)
    (message "recipients: %s" recipients)
    (if (and recipients to-address (not (member to-address recipients)))
        (propertize "X" 'face 'font-lock-warning-face)
      " ")))

(defvar gnus-count-recipients-threshold 5
  "*Number of recipients to consider as large.")

(defun gnus-user-format-function-r (header)
  "Given a Gnus message header, returns priority mark.
Here are the meanings:

The first column represent my relationship to the To: field.  It can be:

         I didn't appear (and the letter had one recipient)
   :     I didn't appear (and the letter had more than one recipient)
   <     I was the sole recipient
   +     I was among a few recipients
   *     There were many recipients

The second column represents the Cc: field:

         I wasn't mentioned, nor was anyone else
    .    I wasn't mentioned, but one other was
    :    I wasn't mentioned, but others were
    ^    I was the only Cc mentioned
    &    I was among a few Cc recipients
    %    I was among many Cc recipients
    X    This is a mailing list, but it wasn't on the recipients list

These can combine in some ways to tell you at a glance how visible the message
is:

   <.    Someone wrote to me and one other
    &    I was copied along with several other people
   *:    Mail to lots of people in both the To and Cc!"
  (ignore-errors
    (let* ((to (or (cdr (assoc 'To (mail-header-extra header))) ""))
           (cc (or (cdr (assoc 'Cc (mail-header-extra header))) ""))
           (to-len (length (split-string to "\\s-*,\\s-*")))
           (cc-len (length (split-string cc "\\s-*,\\s-*")))
           (msg-recipients (concat to (and to cc ", ") cc))
           (recipients
            (mapcar 'mail-strip-quoted-names
	            (message-tokenize-header msg-recipients)))
           (to-address
            (alist-get 'to-address
                       (gnus-parameters-get-parameter gnus-newsgroup-name)))
           (privatized
            (and recipients to-address (not (member to-address recipients)))))
      (cond ((string-match gnus-ignored-from-addresses to)
             (cond ((= to-len 1)
                    (cond (privatized "<X")
                          ((string= cc "") "< ")
                          ((= cc-len 1) "<.")
                          (t "<:")))
                   ((< to-len gnus-count-recipients-threshold)
                    (cond (privatized "+X")
                          ((string= cc "") "+ ")
                          ((= cc-len 1) "+.")
                          (t "+:")))
                   (t
                    (cond (privatized "*X")
                          ((string= cc "") "* ")
                          ((= cc-len 1) "*.")
                          (t "*:")))))

            ((string-match gnus-ignored-from-addresses cc)
             (cond (privatized " X")
                   ((= cc-len 1)
                    (cond ((= to-len 1) " ^")
                          (t ":^")))
                   ((< cc-len gnus-count-recipients-threshold)
                    (cond ((= to-len 1) " &")
                          (t ":&")))
                   (t
                    (cond ((= to-len 1) " %")
                          (t ":%")))))
            (t "  ")))))
#+end_src

*** message-x

#+begin_src emacs-lisp
(use-package message
  :defer t
  :custom
  (message-alternative-emails
   "\\(johnw?\\|jwiegley\\)@\\(\\(gmail\\|newartisans\\)\\.com\\|gnu\\.org\\)")
  (message-directory "~/Messages/Gnus/Mail/")
  (message-dont-reply-to-names
   "\\(jwiegley\\|johnw\\|john\\.wiegley\\)@\\(\\(gmail\\|newartisans\\)\\.com\\|gnu\\.org\\)")
  (message-fill-column 78)
  (message-interactive t)
  (message-mail-alias-type nil)
  (message-mode-hook
   '(abbrev-mode footnote-mode turn-on-auto-fill turn-on-flyspell
                 (lambda nil (set-fill-column 78))))
  (message-send-mail-function 'message-send-mail-with-sendmail)
  (message-send-mail-partially-limit nil)
  (message-sendmail-envelope-from 'header)
  (message-sendmail-extra-arguments '("--read-envelope-from"))
  (message-sendmail-f-is-evil t)
  (message-sent-hook '(my-gnus-score-followup))
  (message-setup-hook '(gnus-harvest-set-from message-check-recipients))
  (message-signature-separator "^-- *$")
  (message-subscribed-address-functions '(gnus-find-subscribed-addresses))
  (message-x-completion-alist
   '(("\\([rR]esent-\\|[rR]eply-\\)?[tT]o:\\|[bB]?[cC][cC]:" . gnus-harvest-find-address)
     ((if (boundp 'message-newgroups-header-regexp)
          message-newgroups-header-regexp message-newsgroups-header-regexp)
      . message-expand-group)))
  :custom-face
  (message-cited-text-1 ((((class color)) (:foreground "Blue"))))
  (message-header-cc ((((class color)) (:bold t :foreground "green2"))))
  (message-header-name ((((class color)) (:bold nil :foreground "Blue"))))
  (message-header-other ((((class color)) (:foreground "Firebrick"))))
  (message-header-xheader ((((class color)) (:foreground "Blue"))))
  (message-mml ((((class color)) (:foreground "DarkGreen"))))
  (message-separator ((((class color)) (:foreground "Tan")))))
#+end_src

*** message-x

#+begin_src emacs-lisp
(use-package message-x
  :after message)
#+end_src

*** gnus-dired

#+begin_src emacs-lisp
(use-package gnus-dired
  :commands gnus-dired-mode
  :init
  (add-hook 'dired-mode-hook 'gnus-dired-mode))
#+end_src

*** my-gnus-score

#+begin_src emacs-lisp
(use-package my-gnus-score
  :commands (my-gnus-score-groups my-gnus-score-followup)
  :custom
  (my-gnus-thread-sort-functions
   '(gnus-thread-sort-by-most-recent-date gnus-thread-sort-by-total-score))
  :init
  (defun gnus-group-get-all-new-news (&optional arg)
    (interactive "P")
    (gnus-group-get-new-news 5)
    (gnus-group-list-groups (or arg 4))
    (my-gnus-score-groups)
    (gnus-group-list-groups (or arg 3))
    (gnus-group-save-newsrc t))

  (define-key gnus-group-mode-map [?v ?g] 'gnus-group-get-all-new-news))
#+end_src

*** gnus-demon

#+begin_src emacs-lisp
(use-package gnus-demon
  :init
  (progn
    (defun gnus-demon-scan-news-2 ()
      (when gnus-plugged
        (let ((win (current-window-configuration))
              (gnus-read-active-file nil)
              (gnus-check-new-newsgroups nil)
              (gnus-verbose 2)
              (gnus-verbose-backends 5))
          (unwind-protect
              (save-window-excursion
                (when (gnus-alive-p)
                  (with-current-buffer gnus-group-buffer
                    (gnus-group-get-new-news gnus-activate-level))))
            (set-window-configuration win)))))

    (defun save-gnus-newsrc ()
      (if (and (fboundp 'gnus-group-exit)
               (gnus-alive-p))
          (with-current-buffer (get-buffer "*Group*")
            (gnus-save-newsrc-file))))

    (gnus-demon-add-handler 'save-gnus-newsrc nil 1)
    (gnus-demon-add-handler 'gnus-demon-close-connections nil 3)))

(defun activate-gnus ()
  (unless (get-buffer "*Group*") (gnus)))

(defun gnus-goto-article (message-id)
  (activate-gnus)
  ;; (gnus-summary-read-group "mail.archive" 15 t)
  (gnus-group-read-ephemeral-search-group
   t (list
      (cons
       'search-query-spec
       (list (cons 'query
                   (concat "HEADER \"Message-ID\" \"<" message-id ">\""))
             '(raw)))
      (cons
       'search-group-spec
       '(("nnimap:Local" "mail.archive")
         ("nnimap:Local" "mail.kadena")
         ("nnimap:Local" "INBOX")))))
  (gnus-summary-next-page))
#+end_src

*** epa

#+begin_src emacs-lisp
(use-package epa
  :defer t
  :config
  (defun epa--key-widget-value-create (widget)
    (let* ((key (widget-get widget :value))
           (primary-sub-key (car (last (epg-key-sub-key-list key) 3)))
           (primary-user-id (car (epg-key-user-id-list key))))
      (insert (format "%c "
                      (if (epg-sub-key-validity primary-sub-key)
                          (car (rassq (epg-sub-key-validity primary-sub-key)
                                      epg-key-validity-alist))
                        ? ))
              (epg-sub-key-id primary-sub-key)
              " "
              (if primary-user-id
                  (if (stringp (epg-user-id-string primary-user-id))
                      (epg-user-id-string primary-user-id)
                    (epg-decode-dn (epg-user-id-string primary-user-id)))
                "")))))
#+end_src

*** gnus-harvest

#+begin_src emacs-lisp
(use-package gnus-harvest
  :load-path "lisp/gnus-harvest"
  :commands gnus-harvest-install
  :demand t
  :config
  (if (featurep 'message-x)
      (gnus-harvest-install 'message-x)
    (gnus-harvest-install)))
#+end_src

*** gnus-alias

#+begin_src emacs-lisp
(use-package gnus-alias
  :commands (gnus-alias-determine-identity
             gnus-alias-message-x-completion
             gnus-alias-select-identity
             gnus-alias-use-identity)
  :bind (:map  message-mode-map
               ("C-c C-f C-p" . gnus-alias-select-identity))
  :preface
  (defsubst match-in-strings (re strs)
    (cl-some (apply-partially #'string-match re) strs))

  (defun my-gnus-alias-determine-identity ()
    (let ((addrs
           (ignore-errors
             (with-current-buffer (gnus-copy-article-buffer)
               (apply #'nconc
                      (mapcar
                       #'(lambda (x)
                           (split-string (or (gnus-fetch-field x) "") ","))
                       '("To" "Cc" "From" "Reply-To")))))))
      (cond
       ((or (match-in-strings "johnw@gnu\\.org" addrs)
            (match-in-strings "emacs-.*@gnu" addrs)
            (string-match "\\(gnu\\|emacs\\)" gnus-newsgroup-name))
        (gnus-alias-use-identity "Gnu"))
       ((or (match-in-strings "jwiegley@gmail.com" addrs)
            (match-in-strings "@baesystems\\.com" addrs)
            (string-match "\\(brass\\|safe\\|riscv\\)" gnus-newsgroup-name))
        (gnus-alias-use-identity "Gmail"))
       ((or (match-in-strings "johnw@newartisans\\.com" addrs)
            (string-match "\\(haskell\\|coq\\|agda\\|idris\\|acl2\\)"
                          gnus-newsgroup-name))
        (gnus-alias-use-identity "NewArtisans"))
       ((match-in-strings "john\\.wiegley@baesystems\\.com" addrs)
        (gnus-alias-use-identity "BAE"))
       (t
        (gnus-alias-determine-identity)))))
  :init
  (when (featurep 'message-x)
    (add-hook 'message-x-after-completion-functions
              'gnus-alias-message-x-completion))

  (add-hook 'message-setup-hook #'my-gnus-alias-determine-identity))
#+end_src

*** gnus-recent

#+begin_src emacs-lisp
(use-package gnus-recent
  :after gnus
  :bind (:map gnus-summary-mode-map
         ("l" . gnus-recent-goto-previous)
         :map gnus-group-mode-map
         ("C-c L" . gnus-recent-goto-previous)))

(eval-when-compile
  (defvar gnus-balloon-face-0)
  (defvar gnus-balloon-face-1))
#+end_src

*** rs-gnus-summary

#+begin_src emacs-lisp
(use-package rs-gnus-summary
  :config
  (defalias 'gnus-user-format-function-size
    'rs-gnus-summary-line-message-size)

  (setq gnus-balloon-face-0 'rs-gnus-balloon-0)
  (setq gnus-balloon-face-1 'rs-gnus-balloon-1))
#+end_src

*** supercite

#+begin_src emacs-lisp
(use-package supercite
  :commands sc-cite-original
  :custom
  (sc-citation-leader "")
  (sc-confirm-always-p nil)
  (sc-default-attribution "")
  (sc-default-cite-frame
   '((begin
      (progn
        (sc-fill-if-different)
        (setq sc-tmp-nested-regexp
              (sc-cite-regexp "")
              sc-tmp-nonnested-regexp
              (sc-cite-regexp)
              sc-tmp-dumb-regexp
              (concat "\\("
                      (sc-cite-regexp "")
                      "\\)"
                      (sc-cite-regexp sc-citation-nonnested-root-regexp)))))
     ("^[       ]*$"
      (if sc-cite-blank-lines-p
          (sc-cite-line)
        (sc-fill-if-different "")))
     ((and
       (looking-at "^-- ?$")
       (not
        (save-excursion
          (goto-char
           (match-end 0))
          (re-search-forward "^-- ?$" nil t))))
      (sc-fill-if-different ""))
     (sc-reference-tag-string
      (if
          (string= sc-reference-tag-string "")
          (list 'continue)
        nil))
     (sc-tmp-dumb-regexp
      (sc-cite-coerce-dumb-citer))
     (sc-tmp-nested-regexp
      (sc-add-citation-level))
     (sc-tmp-nonnested-regexp
      (sc-cite-coerce-cited-line))
     (sc-nested-citation-p
      (sc-add-citation-level))
     (t
      (sc-cite-line))
     (end
      (sc-fill-if-different ""))))
  (sc-preferred-attribution-list '("initials"))
  (sc-use-only-preference-p t)
  :init
  (add-hook 'mail-citation-hook 'sc-cite-original)

  (defun sc-remove-existing-signature ()
    (save-excursion
      (goto-char (region-beginning))
      (when (re-search-forward message-signature-separator (region-end) t)
        (delete-region (match-beginning 0) (region-end)))))

  (add-hook 'mail-citation-hook 'sc-remove-existing-signature)

  (defun sc-remove-if-not-mailing-list ()
    (unless (assoc "list-id" sc-mail-info)
      (setq attribution sc-default-attribution
            citation (concat sc-citation-delimiter
                             sc-citation-separator))))

  (add-hook 'sc-attribs-postselect-hook 'sc-remove-if-not-mailing-list)

  :config
  (defun sc-fill-if-different (&optional prefix)
    "Fill the region bounded by `sc-fill-begin' and point.
Only fill if optional PREFIX is different than
`sc-fill-line-prefix'.  If `sc-auto-fill-region-p' is nil, do not
fill region.  If PREFIX is not supplied, initialize fill
variables.  This is useful for a regi `begin' frame-entry."
    (if (not prefix)
        (setq sc-fill-line-prefix ""
              sc-fill-begin (line-beginning-position))
      (if (and sc-auto-fill-region-p
               (not (string= prefix sc-fill-line-prefix)))
          (let ((fill-prefix sc-fill-line-prefix))
            (unless (or (string= fill-prefix "")
                        (save-excursion
                          (goto-char sc-fill-begin)
                          (or (looking-at ">+  +")
                              (< (length
                                  (buffer-substring (point)
                                                    (line-end-position)))
                                 65))))
              (fill-region sc-fill-begin (line-beginning-position)))
            (setq sc-fill-line-prefix prefix
                  sc-fill-begin (line-beginning-position)))))
    nil))

(defun gnus-article-get-urls-region (min max)
  "Return a list of urls found in the region between MIN and MAX"
  (let (url-list)
    (save-excursion
      (save-restriction
        (narrow-to-region min max)
        (goto-char (point-min))
        (while (re-search-forward gnus-button-url-regexp nil t)
          (let ((match-string (match-string-no-properties 0)))
            (if (and (not (equal (substring match-string 0 4) "file"))
                     (not (member match-string url-list)))
                (setq url-list (cons match-string url-list)))))))
    url-list))

(defun gnus-article-get-current-urls ()
  "Return a list of the urls found in the current `gnus-article-buffer'"
  (let (url-list)
    (with-current-buffer gnus-article-buffer
      (setq url-list
            (gnus-article-get-urls-region (point-min) (point-max))))
    url-list))

(defun gnus-article-browse-urls ()
  "Visit a URL from the `gnus-article-buffer' by showing a
buffer with the list of URLs found with the `gnus-button-url-regexp'."
  (interactive)
  (gnus-configure-windows 'article)
  (gnus-summary-select-article nil nil 'pseudo)
  (let ((temp-buffer (generate-new-buffer " *Article URLS*"))
        (urls (gnus-article-get-current-urls))
        (this-window (selected-window))
        (browse-window (get-buffer-window gnus-article-buffer))
        (count 0))
    (save-excursion
      (save-window-excursion
        (with-current-buffer temp-buffer
          (mapc (lambda (string)
                  (insert (format "\t%d: %s\n" count string))
                  (setq count (1+ count))) urls)
          (set-buffer-modified-p nil)
          (pop-to-buffer temp-buffer)
          (setq count
                (string-to-number
                 (char-to-string (if (fboundp
                                      'read-char-exclusive)
                                     (read-char-exclusive)
                                   (read-char)))))
          (kill-buffer temp-buffer)))
      (if browse-window
          (progn (select-window browse-window)
                 (browse-url (nth count urls)))))
    (select-window this-window)))
#+end_src

*** mml

#+begin_src emacs-lisp
(use-package mml
  :defer t
  :preface
  (defvar mml-signing-attachment nil)
  (defun mml-sign-attached-file (file &optional type description disposition)
    (unless (or mml-signing-attachment
                (null current-prefix-arg))
      (let ((signature
             (expand-file-name (concat (file-name-nondirectory file) ".sig")
                               temporary-file-directory))
            (mml-signing-attachment t))
        (message "Signing %s..." file)
        (if t
            (call-process epg-gpg-program file nil nil
                          "--output" signature "--detach-sign" file)
          (with-temp-file signature
            (setq buffer-file-coding-system 'raw-text-unix)
            (call-process epg-gpg-program file t nil "--detach-sign")))
        (message "Signing %s...done" file)
        (mml-attach-file signature))))
  :config
  (advice-add 'mml-attach-file :after #'mml-sign-attached-file))
#+end_src

** [Org-mode]

#+begin_src emacs-lisp
(use-package dot-org
  :no-require t
  :commands my-org-startup
  :bind* (("M-C"   . jump-to-org-agenda)
          ("M-m"   . org-smart-capture)
          ("M-M"   . org-inline-note)
          ("C-c a" . org-agenda)
          ("C-c S" . org-store-link)
          ("C-c l" . org-insert-link))
  :config
  (unless alternate-emacs
    (run-with-idle-timer 300 t 'jump-to-org-agenda)
    (my-org-startup)))
#+end_src

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-M-RET-may-split-line '((headline) (default . t)))
  (org-adapt-indentation nil)
  (org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
  (org-agenda-cmp-user-defined 'org-compare-todo-age)
  (org-agenda-custom-commands
   '(("h" "Current Hotlist" alltodo ""
      ((org-agenda-overriding-header "Current Hotlist")
       (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first-hot)))
     ("H" "Hot Projects" tags "HOT&TODO=\"PROJECT\""
      ((org-agenda-overriding-header "Hot Projects")))
     ("T" "Non-Hot Projects" tags "-HOT&TODO=\"PROJECT\""
      ((org-agenda-overriding-header "Non-Hot Projects")))
     ("n" "Project Next Actions" alltodo ""
      ((org-agenda-overriding-header "Project Next Actions")
       (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
     ("P" "All Projects" tags "TODO=\"PROJECT\""
      ((org-agenda-overriding-header "All Projects")))
     ("A" "Priority #A tasks" agenda ""
      ((org-agenda-ndays 1)
       (org-agenda-overriding-header "Today's priority #A tasks: ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]"))))
     ("b" "Priority #A and #B tasks" agenda ""
      ((org-agenda-ndays 1)
       (org-agenda-overriding-header "Today's priority #A and #B tasks: ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'regexp "\\=.*\\[#C\\]"))))
     ("r" "Uncategorized items" tags "CATEGORY=\"Inbox\"&LEVEL=2"
      ((org-agenda-overriding-header "Uncategorized items")))
     ("W" "Waiting/delegated tasks" tags "W-TODO=\"DONE\"|TODO={WAITING\\|DELEGATED}"
      ((org-agenda-overriding-header "Waiting/delegated tasks:")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'scheduled))
       (org-agenda-sorting-strategy
        '(todo-state-up priority-down category-up))))
     ("D" "Deadlined tasks" tags "TODO<>\"\"&TODO<>{DONE\\|CANCELED\\|NOTE\\|PROJECT}"
      ((org-agenda-overriding-header "Deadlined tasks: ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'notdeadline))
       (org-agenda-sorting-strategy
        '(category-up))))
     ("S" "Scheduled tasks" tags "TODO<>\"\"&TODO<>{APPT\\|DONE\\|CANCELED\\|NOTE\\|PROJECT}&STYLE<>\"habit\""
      ((org-agenda-overriding-header "Scheduled tasks: ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'notscheduled))
       (org-agenda-sorting-strategy
        '(category-up))))
     ("d" "Unscheduled open source tasks (by date)" tags "TODO<>\"\"&TODO<>{DONE\\|CANCELED\\|NOTE\\|PROJECT}"
      ((org-agenda-overriding-header "Unscheduled Open Source tasks (by date): ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'scheduled 'deadline 'timestamp 'regexp "\\* \\(DEFERRED\\|SOMEDAY\\)"))
       (org-agenda-sorting-strategy
        '(user-defined-up))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")
       (org-agenda-files
        '("~/doc/org/OSS.org"))))
     ("o" "Unscheduled open source tasks (by project)" tags "TODO<>\"\"&TODO<>{DONE\\|CANCELED\\|NOTE\\|PROJECT}"
      ((org-agenda-overriding-header "Unscheduled Open Source tasks (by project): ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'scheduled 'deadline 'timestamp 'regexp "\\* \\(DEFERRED\\|SOMEDAY\\)"))
       (org-agenda-sorting-strategy
        '(category-up))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")
       (org-agenda-files
        '("~/doc/org/OSS.org"))))
     ("u" "Unscheduled tasks" tags "TODO<>\"\"&TODO<>{DONE\\|CANCELED\\|NOTE\\|PROJECT\\|DEFERRED\\|SOMEDAY}"
      ((org-agenda-overriding-header "Unscheduled tasks: ")
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'scheduled 'deadline 'timestamp))
       (org-agenda-sorting-strategy
        '(user-defined-up))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")
       (org-agenda-files
        '("~/doc/org/todo.org"))))
     ("U" "Deferred tasks" tags "TODO=\"DEFERRED\""
      ((org-agenda-overriding-header "Deferred tasks:")
       (org-agenda-sorting-strategy
        '(user-defined-up))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")))
     ("Y" "Someday tasks" tags "TODO=\"SOMEDAY\""
      ((org-agenda-overriding-header "Someday tasks:")
       (org-agenda-sorting-strategy
        '(user-defined-up))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")))
     ("w" "Unscheduled work-related tasks" tags "TODO<>\"\"&TODO<>{DONE\\|DEFERRED\\|CANCELED\\|NOTE\\|PROJECT}"
      ((org-agenda-overriding-header "Unscheduled work-related tasks")
       (org-agenda-files
        '("~/kadena/docs/kadena.org"))
       (org-agenda-sorting-strategy
        '(category-up user-defined-up))
       (org-agenda-skip-function
        '(org-agenda-skip-entry-if 'scheduled 'deadline 'timestamp))
       (org-agenda-prefix-format "%-11c%5(org-todo-age) ")))
     ("c" "Appointment Calendar" agenda ""
      ((org-agenda-overriding-header "Appointment Calendar")
       (org-agenda-sorting-strategy
        '(time-up))
       (org-agenda-span 14)
       (org-agenda-ndays 14)
       (org-agenda-regexp-filter-preset
        '("+APPT"))))))
  (org-agenda-deadline-leaders '("!D!: " "D%02d: "))
  (org-agenda-default-appointment-duration 60)
  (org-agenda-files
   '("~/doc/org/todo.org" "~/doc/org/habits.org" "~/kadena/docs/kadena.org" "~/doc/org/OSS.org"))
  (org-agenda-fontify-priorities t)
  (org-agenda-include-diary t)
  (org-agenda-inhibit-startup t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-ndays 1)
  (org-agenda-persistent-filter t)
  (org-agenda-prefix-format
   '((agenda . "  %-11c%?-12t% s")
     (timeline . "  % s")
     (todo . "  %-11c%5(org-todo-age) ")
     (tags . "  %-11c")))
  (org-agenda-scheduled-leaders '("" "S%d: "))
  (org-agenda-scheduled-relative-text "S%d: ")
  (org-agenda-scheduled-text "")
  (org-agenda-show-all-dates t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-sorting-strategy
   '((agenda habit-down time-up todo-state-up priority-down)
     (todo priority-down category-keep)
     (tags priority-down category-keep)
     (search category-keep)))
  (org-agenda-span 'day)
  (org-agenda-start-on-weekday nil)
  (org-agenda-tags-column -100)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-todo-ignore-scheduled 'past)
  (org-agenda-use-time-grid nil)
  (org-agenda-window-frame-fractions '(0.5 . 0.75))
  (org-archive-location "TODO-archive::")
  (org-archive-save-context-info '(time category itags))
  (org-attach-file-list-property "ATTACHED")
  (org-attach-method 'mv)
  (org-attach-store-link-p 'file)
  (org-author-transforms '(("^Howard Reubenstein$" . "Howard")))
  (org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (haskell . t)
     (calc . t)
     (ditaa . t)
     (plantuml . t)
     (sql . t)
     (dot . t)
     (restclient . t)))
  (org-beamer-frame-default-options "fragile")
  (org-capture-templates
   '(("a" "Add Task" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* TODO %?
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:END:" :prepend t)
     ("n" "Note" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* NOTE %?
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:END:" :prepend t)
     ("c" "Calendar" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* APPT %?
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:END:" :prepend t)
     ("t" "Add Task" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* TODO %?
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:END:" :prepend t)
     ("p" "Protocol" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* NOTE %?
,#+BEGIN_QUOTE
%i
,#+END_QUOTE
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:URL:      %c
:END:")
     ("L" "Protocol Link" entry
      (file+headline "~/doc/org/todo.org" "Inbox")
      "* NOTE %?
[[%:link][%:description]]
,#+BEGIN_QUOTE
%i
,#+END_QUOTE
:PROPERTIES:
:ID:       %(shell-command-to-string \"uuidgen\"):CREATED:  %U
:URL:      %c
:END:")
     ("j" "Journal entry" entry
      (file+datetree "~/kadena/docs/kadena.org")
      "* %?")))
  (org-clock-clocked-in-display nil)
  (org-clock-idle-time 10)
  (org-clock-in-resume t)
  (org-clock-in-switch-to-state "STARTED")
  (org-clock-into-drawer "LOGBOOK")
  (org-clock-mode-line-total 'current)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-out-switch-to-state nil)
  (org-clock-persist t)
  (org-clock-persist-file (user-data "org-clock-save.el"))
  (org-clock-resolve-expert t)
  (org-completion-use-ido t)
  (org-confirm-babel-evaluate nil)
  (org-crypt-disable-auto-save t)
  (org-crypt-key "0xAB37611BDDE48EBD")
  (org-cycle-global-at-bob t)
  (org-deadline-warning-days 14)
  (org-default-notes-file "~/doc/org/todo.org")
  (org-depend-tag-blocked nil)
  (org-directory "~/doc/org/")
  (org-ditaa-jar-path "~/.nix-profile/lib/ditaa.jar")
  (org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "OUT"))
  (org-edit-src-content-indentation 0)
  (org-enforce-todo-dependencies t)
  (org-export-backends '(ascii html icalendar latex md))
  (org-export-latex-classes
   '(("article" "\\documentclass[11pt]{article}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("linalg" "\\documentclass{article}
\\usepackage{linalgjh}
[DEFAULT-PACKAGES]
[EXTRA]
[PACKAGES]"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("report" "\\documentclass[11pt]{report}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
     ("book" "\\documentclass[11pt]{book}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
     ("beamer" "\\documentclass{beamer}" org-beamer-sectioning)))
  (org-export-use-babel nil)
  (org-extend-today-until 4)
  (org-fast-tag-selection-single-key 'expert)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-whole-heading-line t)
  (org-footnote-section nil)
  (org-gcal-dir (user-data "org-gcal/"))
  (org-habit-preceding-days 42)
  (org-habit-today-glyph 45)
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t)
  (org-icalendar-combined-agenda-file "~/doc/org/org.ics")
  (org-icalendar-timezone "America/Los_Angeles")
  (org-id-locations-file (user-data "org-id-locations"))
  (org-image-actual-width nil)
  (org-imenu-depth 4)
  (org-insert-heading-respect-content t)
  (org-irc-link-to-logs t t)
  (org-latex-default-packages-alist
   '(("T1" "fontenc" t)
     ("" "fixltx2e" nil)
     ("" "graphicx" t)
     ("" "longtable" nil)
     ("" "float" nil)
     ("" "wrapfig" nil)
     ("" "rotating" nil)
     ("normalem" "ulem" t)
     ("" "amsmath" t)
     ("" "textcomp" t)
     ("" "marvosym" t)
     ("" "wasysym" t)
     ("" "amssymb" t)
     ("" "hyperref" nil)
     "\\tolerance=1000"))
  (org-latex-minted-options
   '(("fontsize" "\\footnotesize")
     ("linenos" "true")
     ("xleftmargin" "0em")))
  (org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (org-latex-src-block-backend 'minted)
  (org-link-elisp-confirm-function nil)
  (org-link-shell-confirm-function nil)
  (org-mime-preserve-breaks nil)
  (org-mobile-agendas '("Z"))
  (org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (org-mobile-files '("~/doc/org/todo.org"))
  (org-mobile-files-exclude-regexp "\\(TODO\\(-.*\\)?\\)\\'")
  (org-mobile-inbox-for-pull "~/doc/org/from-mobile.org")
  (org-mode-hook
   '(org-babel-result-hide-spec org-babel-hide-all-hashes abbrev-mode))
  (org-msg-default-alternatives
   '((new text html)
     (reply-to-html text html)
     (reply-to-text text)))
  (org-plantuml-jar-path "~/.nix-profile/lib/plantuml.jar")
  (org-pretty-entities t)
  (org-priority-faces
   '((65 :foreground "White" :weight bold)
     (66 . "White")
     (67 :foreground "dark gray" :slant italic)))
  (org-refile-target-verify-function 'org-refile-heading-p)
  (org-refile-targets '((org-agenda-files :todo . "PROJECT")))
  (org-return-follows-link t)
  (org-reverse-note-order t)
  (org-roam-capture-templates
   '(("d" "default" plain "%?" :target
      (file+head "%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}
")
      :unnarrowed t)))
  (org-roam-db-location (user-data "org-roam.db"))
  (org-smart-capture-use-lastname t)
  (org-agenda-show-outline-path nil)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-stuck-projects '("TODO=\"PROJECT\"" ("TODO" "DEFERRED") nil ""))
  (org-subject-transforms
   '(("\\`\\(Re\\|Fwd\\): " . "")
     ("\\`{ledger} " . "")
     ("([Ww]as: .+)\\'" . "")
     ("\\`\\[[a-z-]+\\] " . "")
     ("\\`bug#\\([0-9]+\\):" . "[[x-debbugs-gnu:\\1][#\\1]]")))
  (org-tags-column -97)
  (org-time-clocksum-use-fractional t)
  (org-todo-keyword-faces
   '(("TODO" :foreground "medium blue" :weight bold)
     ("EPIC" :foreground "deep sky blue" :weight bold)
     ("STORY" :foreground "royal blue" :weight bold)
     ("RECUR" :foreground "cornflowerblue" :weight bold)
     ("APPT" :foreground "medium blue" :weight bold)
     ("NOTE" :foreground "brown" :weight bold)
     ("STARTED" :foreground "dark orange" :weight bold)
     ("WAITING" :foreground "red" :weight bold)
     ("DELEGATED" :foreground "dark violet" :weight bold)
     ("DEFERRED" :foreground "dark blue" :weight bold)
     ("SOMEDAY" :foreground "dark blue" :weight bold)
     ("PROJECT" :foreground "#088e8e" :weight bold)))
  (org-todo-repeat-to-state "TODO")
  (org-use-property-inheritance '("AREA"))
  (org-use-speed-commands t)
  (org-use-tag-inheritance nil)
  (org-x-backends '(ox-org ox-redmine))
  (org-x-redmine-title-prefix-function 'org-x-redmine-title-prefix)
  (org-x-redmine-title-prefix-match-function 'org-x-redmine-title-prefix-match)
  :custom-face
  (org-agenda-clocking ((t (:background "red2"))))
  (org-agenda-done ((t (:foreground "ForestGreen"))))
  (org-done ((t (:foreground "ForestGreen" :weight bold))))
  (org-habit-alert-face ((((background light)) (:background "#f5f946"))))
  (org-habit-alert-future-face ((((background light)) (:background "#fafca9"))))
  (org-habit-clear-face ((((background light)) (:background "#8270f9"))))
  (org-habit-clear-future-face ((((background light)) (:background "#d6e4fc"))))
  (org-habit-overdue-face ((((background light)) (:background "#f9372d"))))
  (org-habit-overdue-future-face ((((background light)) (:background "#fc9590"))))
  (org-habit-ready-face ((((background light)) (:background "#4df946"))))
  (org-habit-ready-future-face ((((background light)) (:background "#acfca9"))))
  (org-headline-done ((t (:foreground "grey75" :strike-through t :slant italic))))
  (org-level-4 ((t (:foreground "green"))))
  (org-scheduled ((((class color) (min-colors 88) (background light)) nil)))
  (org-upcoming-deadline
   ((((class color) (min-colors 88) (background light)) (:foreground "Brown")))))
#+end_src

#+begin_src emacs-lisp
(require 'org-agenda)
(require 'org-habit)

(add-hook 'org-capture-mode-hook #'(lambda () (setq-local fill-column (- 78 2))))

(unless window-system
  (setq org-agenda-files
        '("~/doc/org/todo.org")))

(unbind-key "C-," org-mode-map)
(unbind-key "C-'" org-mode-map)

(defconst my-org-soft-red    "#fcebeb")
(defconst my-org-soft-orange "#fcf5eb")
(defconst my-org-soft-yellow "#fcfceb")
(defconst my-org-soft-green  "#e9f9e8")
(defconst my-org-soft-blue   "#e8eff9")
(defconst my-org-soft-purple "#f3e8f9")

(add-hook 'org-mode-hook #'(lambda () (abbrev-mode 1)))

(defun org-fit-agenda-window ()
  "Fit the window to the buffer size."
  (and (memq org-agenda-window-setup '(reorganize-frame))
       (fboundp 'fit-window-to-buffer)
       (fit-window-to-buffer)))

(defun my-org-startup ()
  (org-agenda-list)
  (org-fit-agenda-window)
  (org-agenda-to-appt)
  (call-interactively #'org-resolve-clocks))

(defadvice org-refile-get-location (before clear-refile-history activate)
  "Fit the Org Agenda to its buffer."
  (setq org-refile-history nil))

(defun org-linkify ()
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward " \\(\\(VER\\|SDK\\|IC\\|ICSUP\\|NNS1\\|IDX\\)-\\([0-9]+\\)\\) " nil t)
    (replace-match (format " [[%s:\\3][\\2-\\3]] " (downcase (match-string 2))) t)
    (goto-char (match-end 0)))
  (while (re-search-forward " \\(\\(quill\\)#\\([0-9]+\\)\\) " nil t)
    (replace-match (format " [[%s:\\3][\\2#\\3]] " (downcase (match-string 2))) t)
    (goto-char (match-end 0))))

(defun jump-to-org-agenda ()
  (interactive)
  (push-window-configuration)
  (cl-flet ((prep-window (wind)
                         (with-selected-window wind
                           (org-fit-window-to-buffer wind)
                           (ignore-errors
                             (window-resize
                              wind
                              (- 100 (window-width wind)) t)))))
    (aif (or (get-buffer "*Org Agenda*")
             (get-buffer "*Org Agenda(a)*"))
        (let ((buf it))
          (aif (get-buffer-window it)
              (when (called-interactively-p 'any)
                (funcall #'prep-window it))
            (if (called-interactively-p 'any)
                (funcall #'prep-window (display-buffer buf t t))
              (funcall #'prep-window (display-buffer buf)))))
      (call-interactively 'org-agenda-list)
      (funcall #'prep-window (selected-window)))))

(defun org-get-global-property (name)
  (save-excursion
    (goto-char (point-min))
    (and (re-search-forward (concat "#\\+PROPERTY: " name " \\(.*\\)") nil t)
         (match-string 1))))

(defun org-agenda-add-overlays (&optional line)
  "Add overlays found in OVERLAY properties to agenda items.
Note that habitual items are excluded, as they already
extensively use text properties to draw the habits graph.

For example, for work tasks I like to use a subtle, yellow
background color; for tasks involving other people, green; and
for tasks concerning only myself, blue.  This way I know at a
glance how different responsibilities are divided for any given
day.

To achieve this, I have the following in my todo file:

  ,* Work
    :PROPERTIES:
    :CATEGORY: Work
    :OVERLAY:  (face (:background \"#fdfdeb\"))
    :END:
  ,** TODO Task
  ,* Family
    :PROPERTIES:
    :CATEGORY: Personal
    :OVERLAY:  (face (:background \"#e8f9e8\"))
    :END:
  ,** TODO Task
  ,* Personal
    :PROPERTIES:
    :CATEGORY: Personal
    :OVERLAY:  (face (:background \"#e8eff9\"))
    :END:
  ,** TODO Task

The colors (which only work well for white backgrounds) are:

  Yellow: #fdfdeb
  Green:  #e8f9e8
  Blue:   #e8eff9

To use this function, add it to `org-agenda-finalize-hook':

  (add-hook 'org-finalize-agenda-hook 'org-agenda-add-overlays)"
  (let ((inhibit-read-only t) l c
        (buffer-invisibility-spec '(org-link)))
    (save-excursion
      (goto-char (if line (point-at-bol) (point-min)))
      (while (not (eobp))
        (let ((org-marker (get-text-property (point) 'org-marker)))
          (when (and org-marker
                     (null (overlays-at (point)))
                     (not (get-text-property (point) 'org-habit-p))
                     (get-text-property (point) 'type)
                     (string-match "\\(sched\\|dead\\|todo\\)"
                                   (get-text-property (point) 'type)))
            (let ((overlays
                   (or (org-entry-get org-marker "OVERLAY" t)
                       (with-current-buffer (marker-buffer org-marker)
                         (org-get-global-property "OVERLAY")))))
              (when overlays
                (goto-char (line-end-position))
                (let ((rest (- (window-width) (current-column))))
                  (if (> rest 0)
                      (insert (make-string rest ? ))))
                (let ((ol (make-overlay (line-beginning-position)
                                        (line-end-position)))
                      (proplist (read overlays)))
                  (while proplist
                    (overlay-put ol (car proplist) (cadr proplist))
                    (setq proplist (cddr proplist))))))))
        (forward-line)))))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-agenda-finalize-hook 'org-agenda-add-overlays)

(autoload 'gnus-string-remove-all-properties "gnus-util")

(defun gnus-summary-mark-read-and-unread-as-read (&optional new-mark)
  "Intended to be used by `gnus-mark-article-hook'."
  (let ((mark (gnus-summary-article-mark)))
    (when (or (gnus-unread-mark-p mark)
	      (gnus-read-mark-p mark))
      (ignore-errors
        (gnus-summary-mark-article gnus-current-article
                                   (or new-mark gnus-read-mark))))))

(defun org-todo-age-time (&optional pos)
  (let ((stamp (org-entry-get (or pos (point)) "CREATED" t)))
    (when stamp
      (time-subtract (current-time)
                     (org-time-string-to-time
                      (org-entry-get (or pos (point)) "CREATED" t))))))

(defun org-todo-age (&optional pos)
  (let ((days (time-to-number-of-days (org-todo-age-time pos))))
    (cond
     ((< days 1)   "today")
     ((< days 7)   (format "%dd" days))
     ((< days 30)  (format "%.1fw" (/ days 7.0)))
     ((< days 358) (format "%.1fM" (/ days 30.0)))
     (t            (format "%.1fY" (/ days 365.0))))))

(defun org-compare-todo-age (a b)
  (let ((time-a (org-todo-age-time (get-text-property 0 'org-hd-marker a)))
        (time-b (org-todo-age-time (get-text-property 0 'org-hd-marker b))))
    (if (time-less-p time-a time-b)
        -1
      (if (equal time-a time-b)
          0
        1))))

(defun org-my-message-open (message-id)
  (if (get-buffer "*Group*")
      (gnus-goto-article
       (gnus-string-remove-all-properties (substring message-id 2)))
    (error "Gnus is not running")))

(org-link-set-parameters "message"
			 :follow #'org-my-message-open
			 :store #'org-gnus-store-link)

(defun save-org-mode-files ()
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (eq major-mode 'org-mode)
        (if (and (buffer-modified-p) (buffer-file-name))
            (save-buffer))))))

(run-with-idle-timer 25 t 'save-org-mode-files)

(defun my-org-push-mobile ()
  (interactive)
  (with-current-buffer (find-file-noselect "~/doc/org/todo.org")
    (org-mobile-push)))

(eval-when-compile
  (defvar org-clock-current-task)
  (defvar org-mobile-directory)
  (defvar org-mobile-capture-file))

(defun org-my-auto-exclude-function (tag)
  (and (cond
        ((string= tag "call")
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 8) (> hour 21))))
        ((string= tag "errand")
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 12) (> hour 17))))
        ((or (string= tag "home") (string= tag "nasim"))
         (with-temp-buffer
           (call-process "ifconfig" nil t nil "en0" "inet")
           (call-process "ifconfig" nil t nil "en1" "inet")
           (call-process "ifconfig" nil t nil "bond0" "inet")
           (goto-char (point-min))
           (not (re-search-forward "inet 192\\.168\\.1\\." nil t))))
        ((string= tag "net")
         (not (quickping "imap.fastmail.com")))
        ((string= tag "fun")
         org-clock-current-task))
       (concat "-" tag)))

(defun my-mobileorg-convert ()
  (interactive)
  (while (re-search-forward "^\\* " nil t)
    (goto-char (match-beginning 0))
    (insert ?*)
    (forward-char 2)
    (insert "TODO ")
    (goto-char (line-beginning-position))
    (forward-line)
    (re-search-forward "^\\[")
    (goto-char (match-beginning 0))
    (let ((uuid
           (save-excursion
             (re-search-forward "^\\*\\* Note ID: \\(.+\\)")
             (prog1
                 (match-string 1)
               (delete-region (match-beginning 0)
                              (match-end 0))))))
      ;; (insert (format "SCHEDULED: %s\n:PROPERTIES:\n"
      ;;                 (format-time-string (org-time-stamp-format))))
      (insert ":PROPERTIES:\n")
      (insert (format ":ID:       %s\n:CREATED:  " uuid)))
    (forward-line)
    (insert ":END:")))

(defun my-org-convert-incoming-items ()
  (interactive)
  (with-current-buffer
      (find-file-noselect (expand-file-name org-mobile-capture-file
                                            org-mobile-directory))
    (goto-char (point-min))
    (unless (eobp)
      (my-mobileorg-convert)
      (goto-char (point-max))
      (if (bolp)
          (delete-char -1))
      (let ((tasks (buffer-string)))
        (set-buffer-modified-p nil)
        (kill-buffer (current-buffer))
        (with-current-buffer (find-file-noselect "~/doc/org/todo.org")
          (save-excursion
            (goto-char (point-min))
            (re-search-forward "^\\* Inbox$")
            (re-search-forward "^:END:")
            (forward-line)
            (goto-char (line-beginning-position))
            (if (and tasks (> (length tasks) 0))
                (insert tasks ?\n))))))))

(defun my-org-mobile-pre-pull-function ()
  (my-org-convert-incoming-items))

(add-hook 'org-mobile-pre-pull-hook 'my-org-mobile-pre-pull-function)

(defun org-my-state-after-clock-out (state)
  (if (string= state "STARTED") "TODO" state))

(defvar org-my-archive-expiry-days 9
  "The number of days after which a completed task should be auto-archived.
This can be 0 for immediate, or a floating point value.")

(defconst org-my-ts-regexp
  "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [^]>\r\n]*?\\)[]>]"
  "Regular expression for fast inactive time stamp matching.")

(defun org-my-closing-time ()
  (let* ((state-regexp
          (concat "- State \"\\(?:" (regexp-opt org-done-keywords)
                  "\\)\"\\s-*\\[\\([^]\n]+\\)\\]"))
         (regexp (concat "\\(" state-regexp "\\|" org-my-ts-regexp "\\)"))
         (end (save-excursion
                (outline-next-heading)
                (point)))
         begin
         end-time)
    (goto-char (line-beginning-position))
    (while (re-search-forward regexp end t)
      (let ((moment (org-parse-time-string (match-string 1))))
        (if (or (not end-time)
                (time-less-p (apply #'encode-time end-time)
                             (apply #'encode-time moment)))
            (setq end-time moment))))
    (goto-char end)
    end-time))

(defun org-archive-expired-tasks ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((done-regexp
           (concat "^\\*\\* \\(" (regexp-opt org-done-keywords) "\\) ")))
      (while (re-search-forward done-regexp nil t)
        (if (>= (time-to-number-of-days
                 (time-subtract (current-time)
                                (apply #'encode-time (org-my-closing-time))))
                org-my-archive-expiry-days)
            (org-archive-subtree))))
    (save-buffer)))

(defalias 'archive-expired-tasks 'org-archive-expired-tasks)

(defun org-archive-done-tasks ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "\* \\(DONE\\|CANCELED\\) " nil t)
      (if (save-restriction
            (save-excursion
              (org-narrow-to-subtree)
              (search-forward ":LOGBOOK:" nil t)))
          (forward-line)
        (org-archive-subtree)
        (goto-char (line-beginning-position))))))

(defalias 'archive-done-tasks 'org-archive-done-tasks)

(defun org-get-inactive-time ()
  (float-time (org-time-string-to-time
               (or (org-entry-get (point) "TIMESTAMP")
                   (org-entry-get (point) "TIMESTAMP_IA")
                   (org-entry-get (point) "CREATED")
                   (debug)))))

(defun org-get-completed-time ()
  (let ((begin (point)))
    (save-excursion
      (outline-next-heading)
      (and (re-search-backward
            (concat "\\(- State \"\\(DONE\\|DEFERRED\\|CANCELED\\)\""
                    "\\s-+\\[\\(.+?\\)\\]\\|CLOSED: \\[\\(.+?\\)\\]\\)")
            begin t)
           (float-time (org-time-string-to-time (or (match-string 3)
                                                    (match-string 4))))))))

(defun org-sort-done-tasks ()
  (interactive)
  (goto-char (point-min))
  (org-sort-entries t ?F #'org-get-inactive-time #'<)
  (goto-char (point-min))
  (while (re-search-forward "


+" nil t)
    (delete-region (match-beginning 0) (match-end 0))
    (insert "
"))
  (let (after-save-hook)
    (save-buffer))
  (org-overview))

(defalias 'sort-done-tasks 'org-sort-done-tasks)

(defun org-sort-all ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^\* " nil t)
      (goto-char (match-beginning 0))
      (condition-case err
          (progn
            (org-sort-entries t ?p)
            (org-sort-entries t ?o))
        (error nil))
      (forward-line))
    (goto-char (point-min))
    (while (re-search-forward "\* PROJECT " nil t)
      (goto-char (line-beginning-position))
      (ignore-errors
        (org-sort-entries t ?p)
        (org-sort-entries t ?o))
      (forward-line))))

(defun org-cleanup ()
  (interactive)
  (org-archive-expired-tasks)
  (org-sort-all))

(defvar my-org-wrap-region-history nil)

(defun my-org-wrap-region (&optional arg)
  (interactive "P")
  (save-excursion
    (goto-char (region-end))
    (if arg
        (insert "#+end_src\n")
      (insert ":END:\n"))
    (goto-char (region-beginning))
    (if arg
        (insert "#+begin_src "
                (read-string "Language: " nil 'my-org-wrap-region-history)
                ?\n)
      (insert ":OUTPUT:\n"))))

(defun org-get-message-link (&optional title)
  (let (message-id subject)
    (with-current-buffer gnus-original-article-buffer
      (setq message-id (substring (message-field-value "message-id") 1 -1)
            subject (or title (message-field-value "subject"))))
    (org-make-link-string (concat "message://" message-id)
                          (rfc2047-decode-string subject))))

(defun org-insert-message-link (&optional arg)
  (interactive "P")
  (insert (org-get-message-link (if arg "writes"))))

(defun org-set-message-link ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "Message" (org-get-message-link)))

(defun org-get-message-sender ()
  (let (message-id subject)
    (with-current-buffer gnus-original-article-buffer
      (message-field-value "from"))))

(defun org-set-message-sender ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "Submitter" (org-get-message-sender)))

(defun org-get-safari-link ()
  (let ((subject (substring (do-applescript
                             (string-to-multibyte "tell application \"Safari\"
        name of document of front window
end tell")) 1 -1))
        (url (substring (do-applescript
                         (string-to-multibyte "tell application \"Safari\"
        URL of document of front window
end tell")) 1 -1)))
    (org-make-link-string url subject)))

(defun org-get-chrome-link ()
  (let ((subject (do-applescript
                  (string-to-multibyte "tell application \"Google Chrome\"
        title of active tab of front window
end tell")))
        (url (do-applescript
              (string-to-multibyte "tell application \"Google Chrome\"
        URL of active tab of front window
end tell"))))
    (org-make-link-string (substring url 1 -1) (substring subject 1 -1))))

(defun org-insert-url-link ()
  (interactive)
  (insert (org-get-safari-link)))

(defun org-set-url-link ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "URL" (org-get-safari-link)))

(defun org-set-url-from-clipboard ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "URL" (gui--selection-value-internal 'CLIPBOARD)))

(defun org-get-file-link ()
  (let* ((subject (do-applescript "tell application \"Path Finder\"
     set theItems to the selection
     name of beginning of theItems
end tell"))
         (path (do-applescript "tell application \"Path Finder\"
     set theItems to the selection
     (POSIX path of beginning of theItems) as text
end tell"))
         (short-path
          (replace-regexp-in-string abbreviated-home-dir "~/"
                                    (substring path 1 -1))))
    (org-make-link-string (concat "file:" short-path)
                          (substring subject 1 -1))))

(defun org-insert-file-link ()
  (interactive)
  (insert (org-get-file-link)))

(defun org-set-file-link ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "File" (org-get-file-link)))

(defun org-set-dtp-link ()
  "Set a property for the current headline."
  (interactive)
  (org-set-property "Document" (org-get-dtp-link)))

(defun org-dtp-message-open ()
  "Visit the message with the given MESSAGE-ID.
This will use the command `open' with the message URL."
  (interactive)
  (re-search-backward "\\[\\[message://\\(.+?\\)\\]\\[")
  (do-applescript
   (format "tell application \"DEVONthink Pro\"
        set searchResults to search \"%%3C%s%%3E\" within URLs
        open window for record (get beginning of searchResults)
end tell" (shell-quote-argument (match-string 1)))))

(defun org-message-reply ()
  (interactive)
  (let* ((org-marker (get-text-property (point) 'org-marker))
         (author (org-entry-get (or org-marker (point)) "Author"))
         (subject (if org-marker
                      (with-current-buffer (marker-buffer org-marker)
                        (goto-char org-marker)
                        (nth 4 (org-heading-components)))
                    (nth 4 (org-heading-components)))))
    (setq subject (replace-regexp-in-string "\\`(.*?) " "" subject))
    (compose-mail-other-window author (concat "Re: " subject))))

;;;_  . keybindings

(defvar org-mode-completion-keys
  '((?d . "DONE")
    (?g . "DELEGATED")
    (?n . "NOTE")
    (?r . "DEFERRED")
    (?s . "STARTED")
    (?t . "TODO")
    (?e . "EPIC")
    (?o . "STORY")
    (?w . "WAITING")
    (?x . "CANCELED")
    (?y . "SOMEDAY")
    ))

(eval-and-compile
  (defvar org-todo-state-map nil)
  (define-prefix-command 'org-todo-state-map))

(dolist (ckey org-mode-completion-keys)
  (let* ((key (car ckey))
         (label (cdr ckey))
         (org-sym (intern (concat "my-org-todo-" (downcase label))))
         (org-sym-no-logging
          (intern (concat "my-org-todo-" (downcase label) "-no-logging")))
         (org-agenda-sym
          (intern (concat "my-org-agenda-todo-" (downcase label))))
         (org-agenda-sym-no-logging
          (intern (concat "my-org-agenda-todo-"
                          (downcase label) "-no-logging"))))
    (eval
     `(progn
        (defun ,org-sym ()
          (interactive)
          (org-todo ,label))
        (bind-key (concat "C-c x " (char-to-string ,key)) ',org-sym
                  org-mode-map)

        (defun ,org-sym-no-logging ()
          (interactive)
          (let ((org-inhibit-logging t))
            (org-todo ,label)))
        (bind-key (concat "C-c x " (char-to-string  ,(upcase key)))
                  ',org-sym-no-logging org-mode-map)

        (defun ,org-agenda-sym ()
          (interactive)
          (let ((org-inhibit-logging
                 (let ((style (org-entry-get
                               (get-text-property (point) 'org-marker)
                               "STYLE")))
                   (and style (stringp style)
                        (string= style "habit")))))
            (org-agenda-todo ,label)))
        (define-key org-todo-state-map [,key] ',org-agenda-sym)

        (defun ,org-agenda-sym-no-logging ()
          (interactive)
          (let ((org-inhibit-logging t))
            (org-agenda-todo ,label)))
        (define-key org-todo-state-map [,(upcase key)]
          ',org-agenda-sym-no-logging)))))

(defun org-wrap-quote-block (beg end)
  (interactive "r")
  (save-excursion
    (goto-char end)
    (insert "#+END_QUOTE\n")
    (goto-char beg)
    (insert "#+BEGIN_QUOTE\n")))

(defun org-wrap-verse-block (beg end)
  (interactive "r")
  (save-excursion
    (goto-char end)
    (insert "#+END_VERSE\n")
    (goto-char beg)
    (insert "#+BEGIN_VERSE\n")))

(defun org-wrap-output-block (beg end)
  (interactive "r")
  (save-excursion
    (goto-char end)
    (insert ":OUTPUT:\n")
    (goto-char beg)
    (insert ":END:\n")))

(bind-keys :map org-mode-map
           ("C-c x l" . org-insert-dtp-link)
           ("C-c x L" . org-set-dtp-link)
           ("C-c x i" . org-id-get-create)
           ("C-c x m" . org-insert-message-link)
           ("C-c x M" . org-set-message-link)
           ("C-c x u" . org-set-url-from-clipboard)
           ("C-c x U" . org-insert-url-link)
           ("C-c x f" . org-insert-file-link)
           ("C-c x F" . org-set-file-link)
           ("C-c x Q" . org-wrap-quote-block)
           ("C-c x V" . org-wrap-verse-block)
           ("C-c x O" . org-wrap-output-block)

           ("C-c C-x @" . visible-mode)
           ("C-c M-m"   . my-org-wrap-region)

           ("C-c #"     . org-priority)
           ("C-c ,"     . org-priority)

           ([return]                . org-return-indent)
           ([(control return)]      . other-window)
           ([(control meta return)] . org-insert-heading-after-current))

(remove-hook 'kill-emacs-hook 'org-babel-remove-temporary-directory)

;;;_  . org-agenda-mode

(defun my-org-publish-ical ()
  (interactive)
  (async-shell-command "make -C ~/doc/org"))

(bind-keys :map org-agenda-mode-map
           ("C-c C-x C-p" . my-org-publish-ical)
           ("C-n" . next-line)
           ("C-p" . previous-line)
           ("M-n" . org-agenda-later)
           ("M-p" . org-agenda-earlier)
           (" "   . org-agenda-tree-to-indirect-buffer)
           (">"   . org-agenda-filter-by-top-headline)
           ("g"   . org-agenda-redo)
           ("f"   . org-agenda-date-later)
           ("b"   . org-agenda-date-earlier)
           ("r"   . org-agenda-refile)
           ("F"   . org-agenda-follow-mode)
           ("q"   . delete-window)
           ("x"   . org-todo-state-map)
           ("z"   . pop-window-configuration))

(unbind-key "M-m" org-agenda-keymap)

(defadvice org-agenda-redo (after fit-windows-for-agenda-redo activate)
  "Fit the Org Agenda to its buffer."
  (org-fit-agenda-window))

(defadvice org-agenda (around fit-windows-for-agenda activate)
  "Fit the Org Agenda to its buffer."
  (let ((notes
         (ignore-errors
           (directory-files
            "~/Library/Mobile Documents/iCloud~com~agiletortoise~Drafts5/Documents"
            t "[0-9].*\\.txt\\'" nil))))
    (when notes
      (with-current-buffer (find-file-noselect "~/doc/org/todo.org")
        (save-excursion
          (goto-char (point-min))
          (re-search-forward "^\\* Inbox$")
          (re-search-forward "^:END:")
          (forward-line 1)
          (dolist (note notes)
            (insert
             "** TODO "
             (with-temp-buffer
               (insert-file-contents note)
               (goto-char (point-min))
               (forward-line)
               (unless (bolp))
               (insert ?\n)
               ;; (insert (format "SCHEDULED: %s\n"
               ;;                 (format-time-string (org-time-stamp-format))))
               (goto-char (point-max))
               (unless (bolp)
                 (insert ?\n))
               (let ((uuid (substring (shell-command-to-string "uuidgen") 0 -1))
                     (file (file-name-nondirectory note)))
                 (string-match
                  (concat "\\`\\([0-9]\\{4\\}\\)"
                          "-\\([0-9]\\{2\\}\\)"
                          "-\\([0-9]\\{2\\}\\)"
                          "-\\([0-9]\\{2\\}\\)"
                          "-\\([0-9]\\{2\\}\\)"
                          "-\\([0-9]\\{2\\}\\)"
                          "\\.txt\\'") file)
                 (let* ((year (string-to-number (match-string 1 file)))
                        (mon (string-to-number (match-string 2 file)))
                        (day (string-to-number (match-string 3 file)))
                        (hour (string-to-number (match-string 4 file)))
                        (min (string-to-number (match-string 5 file)))
                        (sec (string-to-number (match-string 6 file)))
                        (date (format "%04d-%02d-%02d %s"
                                      year mon day
                                      (calendar-day-name (list mon day year) t))))
                   (insert (format (concat ;; "SCHEDULED: <%s>\n"
                                    ":PROPERTIES:\n"
                                    ":ID:       %s\n"
                                    ":CREATED:  ")
                                   uuid))
                   (insert (format "[%s %02d:%02d]\n:END:\n" date hour min))))
               (buffer-string)))
            (delete-file note t)))
        (when (buffer-modified-p)
          (save-buffer)))))
  ad-do-it
  (org-fit-agenda-window))

(defun org-refile-heading-p ()
  (let ((heading (org-get-heading)))
    (not (string-match "Colophon" heading))))

(defadvice org-archive-subtree (before set-billcode-before-archiving activate)
  "Before archiving a task, set its BILLCODE and TASKCODE."
  (let ((billcode (org-entry-get (point) "BILLCODE" t))
        (taskcode (org-entry-get (point) "TASKCODE" t))
        (project  (org-entry-get (point) "PROJECT" t)))
    (if billcode (org-entry-put (point) "BILLCODE" billcode))
    (if taskcode (org-entry-put (point) "TASKCODE" taskcode))
    (if project (org-entry-put (point) "PROJECT" project))))

(font-lock-add-keywords
 'org-mode
 '(("^ *\\(-\\) "
    (0 (ignore (compose-region (match-beginning 1) (match-end 1) "•"))))))

(defconst first-year-in-list 172)

(defconst naw-ruz
  '((3 21 2015)
    (3 20 2016)
    (3 20 2017)
    (3 21 2018)
    (3 21 2019)
    (3 20 2020)
    (3 20 2021)
    (3 21 2022)
    (3 21 2023)
    (3 20 2024)
    (3 20 2025)
    (3 21 2026)
    (3 21 2027)
    (3 20 2028)
    (3 20 2029)
    (3 20 2030)
    (3 21 2031)
    (3 20 2032)
    (3 20 2033)
    (3 20 2034)
    (3 21 2035)
    (3 20 2036)
    (3 20 2037)
    (3 20 2038)
    (3 21 2039)
    (3 20 2040)
    (3 20 2041)
    (3 20 2042)
    (3 21 2043)
    (3 20 2044)
    (3 20 2045)
    (3 20 2046)
    (3 21 2047)
    (3 20 2048)
    (3 20 2049)
    (3 20 2050)
    (3 21 2051)
    (3 20 2052)
    (3 20 2053)
    (3 20 2054)
    (3 21 2055)
    (3 20 2056)
    (3 20 2057)
    (3 20 2058)
    (3 20 2059)
    (3 20 2060)
    (3 20 2061)
    (3 20 2062)
    (3 20 2063)
    (3 20 2064))
  "The days when Naw-Rúz begins, for the next fifty years.")

(defconst days-of-há
  '(4 4 5 4 4 4 5 4 4 4 5 4 4 4 4 5 4 4 4 5 4 4 4 5 4
      4 4 5 4 4 4 5 4 4 4 5 4 4 4 5 4 4 4 4 5 4 4 4 5 4)
  "The days when Naw-Rúz begins, for the next fifty years.")

(defconst bahai-months
  '("Bahá"      ; 1
    "Jalál"     ; 2
    "Jamál"     ; 3
    "‘Aẓamat"   ; 4
    "Núr"       ; 5
    "Raḥmat"    ; 6
    "Kalimát"   ; 7
    "Kamál"     ; 8
    "Asmá’"     ; 9
    "‘Izzat"    ; 10
    "Mashíyyat" ; 11
    "‘Ilm"      ; 12
    "Qudrat"    ; 13
    "Qawl"      ; 14
    "Masá’il"   ; 15
    "Sharaf"    ; 16
    "Sulṭán"    ; 17
    "Mulk"      ; 18
    "‘Alá’"     ; 19
    ))

(eval-and-compile
  (require 'cal-julian)
  (require 'diary-lib))

(defun bahai-date (month day &optional bahai-year)
  (let* ((greg-year (if bahai-year
                        (+ 1844 (1- bahai-year))
                      (nth 2 (calendar-current-date))))
         (year (1+ (- greg-year 1844)))
         (first-day (cl-find-if #'(lambda (x) (= greg-year (nth 2 x)))
                                naw-ruz))
         (greg-base (calendar-julian-to-absolute first-day))
         (hdays (nth (- year first-year-in-list) days-of-há))
         (offset (+ (1- day) (* 19 (1- month))
                    (if (= month 19)
                        hdays
                      0)))
         (greg-date (calendar-julian-from-absolute (+ greg-base offset))))
    (apply #'diary-date greg-date)))

(defun org-current-is-todo ()
  (member (org-get-todo-state) '("TODO" "EPIC" "STORY" "STARTED")))

(defun my-org-agenda-should-skip-p ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (when (or (org-get-scheduled-time (point))
              (org-get-deadline-time (point)))
      (setq should-skip-entry t))
    (when (/= (point)
              (save-excursion
                (org-goto-first-child)
                (point)))
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (and (org-current-is-todo)
                   (not (org-get-scheduled-time (point)))
                   (not (org-get-deadline-time (point))))
          (setq should-skip-entry t))))
    should-skip-entry))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (when (my-org-agenda-should-skip-p)
    (or (outline-next-heading)
        (goto-char (point-max)))))

(defun my-org-current-tags (depth)
  (save-excursion
    (ignore-errors
      (let (should-skip)
        (while (and (> depth 0)
                    (not should-skip)
                    (prog1
                        (setq depth (1- depth))
                      (not (org-up-element))))
          (if (looking-at "^\*+\\s-+")
              (setq should-skip (org-get-local-tags))))
        should-skip))))

(defun my-org-agenda-skip-all-siblings-but-first-hot ()
  "Skip all but the first non-done entry."
  (when (or (my-org-agenda-should-skip-p)
            (not (member "HOT" (my-org-current-tags 1))))
    (or (outline-next-heading)
        (goto-char (point-max)))))

(unless (fboundp 'org-link-set-parameters)
  (defun org-link-set-parameters (type &rest parameters)
    (with-no-warnings
      (org-add-link-type type
                         (plist-get parameters :follow)
                         (plist-get parameters :export))
      (add-hook 'org-store-link-functions
                (plist-get parameters :store)))))
#+end_src

*** calfw

#+begin_src emacs-lisp
(use-package calfw
  :disabled t
  :bind (("C-c A" . my-calendar)
         :map cfw:calendar-mode-map
         ("M-n" . cfw:navi-next-month-command)
         ("M-p" . cfw:navi-previous-month-command)
         ("j"   . cfw:navi-goto-date-command)
         ("g"   . cfw:refresh-calendar-buffer))
  :commands cfw:open-calendar-buffer
  :functions (cfw:open-calendar-buffer
              cfw:refresh-calendar-buffer
              cfw:org-create-source
              cfw:cal-create-source)
  :custom
  (cfw:read-date-command
   (lambda nil
     (interactive)
     (let
         ((xs
           (decode-time
            (org-time-string-to-time
             (org-read-date)))))
       (list
        (nth 4 xs)
        (nth 3 xs)
        (nth 5 xs)))))
  :preface
  (defun my-calendar ()
    (interactive)
    (let ((buf (get-buffer "*cfw-calendar*"))
          (org-agenda-files
           (cons "~/doc/org/Nasim.org"
                 org-agenda-files)))
      (if buf
          (pop-to-buffer buf nil)
        (cfw:open-calendar-buffer
         :contents-sources
         (list (cfw:org-create-source "Dark Blue")
               (cfw:cal-create-source "Dark Orange"))
         :view 'two-weeks)
        (setq-local org-agenda-files org-agenda-files))))

  :config
  (require 'calfw-cal)
  (use-package calfw-org
    :config
    (setq cfw:org-agenda-schedule-args '(:deadline :timestamp :sexp)))

  (setq cfw:fchar-junction         ?╋
        cfw:fchar-vertical-line    ?┃
        cfw:fchar-horizontal-line  ?━
        cfw:fchar-left-junction    ?┣
        cfw:fchar-right-junction   ?┫
        cfw:fchar-top-junction     ?┯
        cfw:fchar-top-left-corner  ?┏
        cfw:fchar-top-right-corner ?┓))
#+end_src

*** ob-restclient

#+begin_src emacs-lisp
(use-package ob-restclient
  :disabled t)
#+end_src

*** ob-verb

#+begin_src emacs-lisp
(use-package ob-verb)
#+end_src

*** org-attach

#+begin_src emacs-lisp
(use-package org-attach
  :init
  (defun my-org-attach-visit-headline-from-dired ()
    "Go to the headline corresponding to this org-attach directory."
    (interactive)
    (let* ((id-parts (last (split-string default-directory "/" t) 2))
           (id (apply #'concat id-parts)))
      (let ((m (org-id-find id 'marker)))
        (unless m (user-error "Cannot find entry with ID \"%s\"" id))
        (pop-to-buffer (marker-buffer m))
        (goto-char m)
        (move-marker m nil)))))
#+end_src

*** org-attach-git

#+begin_src emacs-lisp
(use-package org-attach-git)
#+end_src

*** org-babel

#+begin_src emacs-lisp
(use-package org-babel
  :no-require
  :after ob-restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python     . t)
     (emacs-lisp . t)
     ;; (coq        . t)
     (haskell    . t)
     (calc       . t)
     ;; (ledger     . t)
     (ditaa      . t)
     (plantuml   . t)
     ;; (sh         . t)
     (sql        . t)
     (dot        . t)
     ;; (verb       . t)
     (restclient . t)))

  (defun org-babel-sh-strip-weird-long-prompt (string)
    "Remove prompt cruft from a string of shell output."
    (while (string-match "^.+?;C;" string)
      (setq string (substring string (match-end 0))))
    string))
#+end_src

*** org-bookmark-heading

#+begin_src emacs-lisp
(use-package org-bookmark-heading)
#+end_src

*** org-crypt

#+begin_src emacs-lisp
(use-package org-crypt
  :bind (:map org-mode-map
              ("C-c C-x C-/" . org-decrypt-entry)))
#+end_src

*** org-devonthink

#+begin_src emacs-lisp
(use-package org-devonthink)
#+end_src

*** org-download

#+begin_src emacs-lisp
(use-package org-download
  :bind (:map org-mode-map
              ("C-, i" . org-download-clipboard)
              ("C-, y" . org-download-yank))
  :custom
  (org-download-method 'attach))
#+end_src

*** org-mime

#+begin_src emacs-lisp
(use-package org-mime
  :defer 5
  :config
  (add-hook 'message-mode-hook
            #'(lambda ()
                (local-set-key "\C-c\M-o" 'org-mime-htmlize)))

  (add-hook 'org-mode-hook
            #'(lambda ()
                (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))

  (add-hook 'org-mime-html-hook
            #'(lambda ()
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;")
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323")))))
#+end_src

*** org-noter

#+begin_src emacs-lisp
(use-package org-noter
  :after pdf-tools
  :commands org-noter)
#+end_src

*** org-protocol

#+begin_src emacs-lisp
(use-package org-protocol)
#+end_src

*** org-ql

#+begin_src emacs-lisp
(use-package org-ql
  :commands org-ql-search)
#+end_src

*** org-rich-yank

#+begin_src emacs-lisp
(use-package org-rich-yank
  :defer 5
  :bind (:map org-mode-map
              ("C-M-y" . org-rich-yank)))
#+end_src

*** org-smart-capture

#+begin_src emacs-lisp
(use-package org-smart-capture)
#+end_src

*** org-super-agenda

#+begin_src emacs-lisp
(use-package org-super-agenda
  :disabled t
  :preface
  (defun super-jump-to-org-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "Today"
                    :time-grid t
                    :todo "TODAY")
             (:name "Important"
                    :tag "bills"
                    :priority "A")
             (:order-multi
              (2 (:name "Shopping in town"
                        :and (:tag "shopping" :tag "@town"))
                 (:name "Food-related"
                        :tag ("food" "dinner"))
                 (:name "Personal"
                        :habit t
                        :tag "personal")
                 (:name "Space-related (non-moon-or-planet-related)"
                        :and (:regexp ("space" "NASA")
                                      :not (:regexp "moon" :tag "planet")))))
             (:todo "WAITING" :order 8)
             (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                    :order 9)
             (:priority<= "B" :order 1))))
      (org-agenda nil "a")))
  :config
  (org-super-agenda-mode))
#+end_src

*** org-web-tools

#+begin_src emacs-lisp
(use-package org-web-tools
  :bind (("C-c x C-y" . my-org-insert-url)
         ("C-c x C-M-y" . org-web-tools-insert-web-page-as-entry))
  :functions (org-web-tools--org-link-for-url
              org-web-tools--get-first-url)
  :preface
  (declare-function org-web-tools--org-link-for-url "org-web-tools")
  (declare-function org-web-tools--get-first-url "org-web-tools")

  (defun my-org-insert-url (&optional arg)
    (interactive "P")
    (require' org-web-tools)
    (let ((link (org-web-tools--org-link-for-url
                 (org-web-tools--get-first-url))))
      (if arg
          (progn
            (org-set-property "URL" link)
            (message "Added pasteboard link to URL property"))
        (insert link)))))
#+end_src

*** orgnav

#+begin_src emacs-lisp
(use-package orgnav
  :disabled t)
#+end_src

*** ox-gfm

#+begin_src emacs-lisp
(use-package ox-gfm)
#+end_src

*** ox-md

#+begin_src emacs-lisp
(use-package ox-md)
#+end_src

*** ox-texinfo-plus

#+begin_src emacs-lisp
(use-package ox-texinfo-plus
  :disabled t
  :defer t)
#+end_src

*** org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :demand t  ;; Ensure org-roam is loaded by default
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/doc/org/roam/")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n h" . helm-org-roam)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n p" . my/org-roam-find-project)
         ("C-c n t" . org-roam-tag-add)
         ("C-c n T" . org-roam-tag-remove)
         ("C-c n b" . my/org-roam-capture-inbox)
         ("C-c n w" . my-org-prepare-note)
         ("C-c n x" . xeft)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow)
         )
  :bind-keymap ("C-c n d" . org-roam-dailies-map)
  :config
  (use-package org-roam-dailies
    :demand t
    :custom
    (org-roam-dailies-directory "~/doc/org/roam/journal/"))
  (org-roam-db-autosync-mode))
#+end_src

*** xeft

#+begin_src emacs-lisp
(use-package xeft
  :commands xeft
  :custom
  (xeft-database (user-daat "xeft.db"))
  (xeft-default-extension "org")
  (xeft-directory "~/doc/org/roam")
  (xeft-file-filter 'my-xeft-file-filter)
  (xeft-recursive t)
  (xeft-title-function 'my-xeft-get-title)
  :custom-face
  (xeft-excerpt-body ((t (:inherit default :foreground "grey80"))))
  (xeft-excerpt-title ((t (:inherit (bold underline) :foreground "green"))))
  (xeft-inline-highlight ((t (:inherit underline :extend t :foreground "orange")))))
#+end_src

#+begin_src emacs-lisp
(defun my-org-export-each-headline (&optional scope)
  "Export each headline to a markdown file with the title as filename.
If SCOPE is nil headlines in the current buffer are exported.
For other valid values for SCOPE see `org-map-entries'.
Already existing files are overwritten."
  (interactive)
  (while (not (eobp))
    (let* ((title (subst-char-in-string ?/ ?: (car (last (org-get-outline-path t))) t))
           (dir (file-name-directory buffer-file-name))
           (filename (concat dir title ".org"))
           (beg (point)))
      (call-interactively #'org-forward-heading-same-level)
      (write-region beg (point) filename))))

(defun my-org-current-entry-and-skip ()
  (let* ((title (subst-char-in-string ?/ ?: (car (last (org-get-outline-path t))) t))
         (beg (point)))
    (call-interactively #'org-forward-heading-same-level)
    (list beg (if (= beg (point))
                  (point-max)
                (point))
          title)))

(defun my-org-created-time (end)
  (save-excursion
    (re-search-forward ":CREATED: +\\[\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) ... \\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\]" end)
    (list (string-to-number (match-string 1))
          (string-to-number (match-string 2))
          (string-to-number (match-string 3))
          (string-to-number (match-string 4))
          (string-to-number (match-string 5)))))

(defun my-org-headline ()
  (looking-at "\\(\\*+\\(:? NOTE\\)? +\\)\\(.+\\)\n")
  (list (match-beginning 1) (match-end 1)
        (match-string 2)))

(defun my-org-property-drawer (end)
  (save-excursion
    (re-search-forward org-property-drawer-re end)
    (list (match-beginning 0) (1+ (match-end 0)))))

(defun my-org-simplify-title (title)
  (replace-regexp-in-string
   "[^A-Za-z0-9_:]" "#"
   (replace-regexp-in-string
    "[']" ""
    (replace-regexp-in-string
     "/" ":"
     (replace-regexp-in-string
      " " "_"
      title)))))

(defun my-org-prepare-dated-note ()
  (interactive)
  (save-excursion
    (forward-line)
    (insert "#+filetags: :thoughts:\n"))
  (delete-blank-lines)
  (let ((id (org-id-get-create))
        (title (save-excursion
                 (cl-destructuring-bind (beg end title)
                     (my-org-current-entry-and-skip)
                   title))))
    (org-entry-put (point) "CREATED" title)
    (goto-char (line-end-position))
    (backward-kill-sexp)))

(defun my-org-prepare-note ()
  (interactive)
  (save-excursion
    (cl-destructuring-bind (beg end title) (my-org-current-entry-and-skip)
      (let ((text (buffer-substring beg end)))
        (with-temp-buffer
          (insert text)
          (goto-char (point-min))
          (cl-destructuring-bind (beg end title2) (my-org-headline)
            (goto-char beg)
            (delete-region beg end)
            (insert "#+title: ")
            (goto-char (line-end-position))
            (insert ?\n)
            (cl-destructuring-bind (beg end) (my-org-property-drawer (point-max))
              (let ((properties (buffer-substring beg end)))
                (delete-region beg end)
                (goto-char (point-min))
                (insert properties)))
            (goto-char (point-max))
            (delete-blank-lines)
            (whitespace-cleanup)
            (goto-char (point-min))
            (cl-destructuring-bind (year mon day hour min)
                (my-org-created-time (point-max))
              (write-region (point-min) (point-max)
                            (expand-file-name (format "%04d%02d%02d%02d%02d-%s.org"
                                                      year mon day hour min
                                                      (my-org-simplify-title title))
                                              org-roam-directory)
                            nil nil nil t))))
        (delete-region beg end)))))
#+end_src

*** deft

#+begin_src emacs-lisp
(use-package deft
  :bind ("C-, C-," . deft)
  :custom
  (deft-directory "~/doc/org/roam/tech")
  (deft-extensions '("org" "md"))
  (deft-recursive t)
  (deft-strip-summary-regexp ":PROPERTIES:
\\(.+
\\)+:END:
")
  (deft-text-mode 'org-mode)

  :config
  (defun my-deft-parse-title-skip-properties (orig-func title contents)
    (funcall orig-func title
             (with-temp-buffer
               (insert contents)
               (goto-char (point-min))
               (when (looking-at org-property-drawer-re)
                 (goto-char (1+ (match-end 0))))
               (buffer-substring (point) (point-max)))))

  (advice-add 'deft-parse-title :around #'my-deft-parse-title-skip-properties)

  (defun my-deft-parse-summary-skip-properties (orig-func contents title)
    (funcall orig-func (with-temp-buffer
                         (insert contents)
                         (goto-char (point-min))
                         (when (looking-at org-property-drawer-re)
                           (goto-char (1+ (match-end 0))))
                         (when (looking-at "#\\+title: ")
                           (forward-line))
                         (buffer-substring (point) (point-max)))
             title))

  (advice-add 'deft-parse-summary :around #'my-deft-parse-summary-skip-properties))
#+end_src

#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t))))

(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                   :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))

(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
         '(("t" "tasks" entry "%?"
            :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(defun my-org-roam-get-all-tags ()
  "Save all roam tags to a buffer visting the file ~/Test."
  (interactive)
  (save-excursion
    (let ((buf (find-file-noselect "~/Test")))
      (set-buffer buf)
      (erase-buffer)
      (mapcar (lambda (n) (insert (car n) "\n"))
              (org-roam-db-query
               [:select :distinct [tag] :from tags ])))))

(defun my-org-roam-find-in-thoughts (node)
  (interactive)
  (let ((tags (org-roam-node-tags node)))
    (member "thoughts" tags)))

(defun helm-org-roam (&optional input candidates)
  (interactive)
  (require 'org-roam)
  (helm
   :input input
   :sources (list
             (helm-build-sync-source "Roam: "
               :must-match nil
               :fuzzy-match t
               :candidates (or candidates (org-roam--get-titles))
               :action
               '(("Find File" . (lambda (x)
                                  (--> x
                                       org-roam-node-from-title-or-alias
                                       (org-roam-node-visit it t))))
                 ("Insert link" . (lambda (x)
                                    (--> x
                                         org-roam-node-from-title-or-alias
                                         (insert
                                          (format
                                           "[[id:%s][%s]]"
                                           (org-roam-node-id it)
                                           (org-roam-node-title it))))))
                 ("Follow backlinks" . (lambda (x)
                                         (let ((candidates
                                                (--> x
                                                     org-roam-node-from-title-or-alias
                                                     org-roam-backlinks-get
                                                     (--map
                                                      (org-roam-node-title
                                                       (org-roam-backlink-source-node it))
                                                      it))))
                                           (helm-org-roam nil (or candidates (list x))))))))
             (helm-build-dummy-source
                 "Create note"
               :action '(("Capture note" . (lambda (candidate)
                                             (org-roam-capture-
                                              :node (org-roam-node-create :title candidate)
                                              :props '(:finalize find-file)))))))))

(defun my-xeft-get-title (file)
  "Return the title of FILE.
Return the first line as title, recognize Org Mode’s #+TITLE:
cookie, if the first line is empty, return the file name as the
title."
  (re-search-forward (rx "#+title:" (* whitespace)) nil t)
  (let ((bol (point)))
    (goto-char (line-end-position))
    (let ((title (buffer-substring-no-properties bol (point))))
      (if (string= title "")
          (file-name-base file)
        title))))

(defun my-xeft-file-filter (file)
  "Return nil if FILE should be ignored.
FILE is an absolute path. This default implementation ignores
directories, dot files, and files matched by
‘xeft-ignore-extension’."
  (and (file-regular-p file)
       (not (string-prefix-p
             "." (file-name-base file)))
       (not (string-suffix-p
             "~" file))))
#+end_src

** add-journal-entry

#+begin_src emacs-lisp
(defun add-journal-entry (title)
  (interactive "sTitle: ")
  (let* ((moniker
          (replace-regexp-in-string
           "[,!]" ""
           (replace-regexp-in-string " " "-" (downcase title))))
         (most-recent
          (split-string
           (car (last (directory-files "~/doc/johnwiegley/posts"))) "-"))
         (year (nth 0 most-recent))
         (month (nth 1 most-recent))
         (day (nth 2 most-recent))
         (date (calendar-gregorian-from-absolute
                (+ 7 (calendar-absolute-from-gregorian
                      (list (string-to-number month)
                            (string-to-number day)
                            (string-to-number year))))))
         (path (expand-file-name (format "%02d-%02d-%02d-%s.md"
                                         (nth 2 date)
                                         (nth 0 date)
                                         (nth 1 date)
                                         moniker)
                                 "~/doc/johnwiegley/posts")))
    (switch-to-buffer (find-file path))
    (insert (format "---
title: %s
tags: journal
---

%s" title (current-kill 0)))))

(bind-key "C-c J" #'add-journal-entry)
#+end_src

* Layout

#+begin_src emacs-lisp
(defconst display-name
  (pcase (display-pixel-width)
    (`3840 'dell-wide)
    (`4480 'imac)
    (`2560 'imac)
    (`1920 'macbook-pro-vga)
    (`1792 'macbook-pro-16)
    (`1680 'macbook-pro-15)
    ))

(defsubst bookerly-font (height)
  (format "-*-Bookerly-normal-normal-normal-*-%d-*-*-*-p-0-iso10646-1" height))

(defsubst dejavu-sans-mono-font (height)
  (format "-*-DejaVu Sans Mono-normal-normal-normal-*-%d-*-*-*-m-0-iso10646-1" height))

(defun emacs-min-font ()
  (pcase display-name
    ((guard alternate-emacs) (bookerly-font 18))
    (`imac (dejavu-sans-mono-font 18))
    (_     (dejavu-sans-mono-font 18))))

(defun emacs-min-font-height ()
  (aref (font-info (emacs-min-font)) 3))

(defun emacs-min-left ()
  (pcase display-name
    ((guard alternate-emacs)    0)
    (`dell-wide              1000)
    (`imac              (pcase (emacs-min-font-height)
                          (28  20)
                          (24 116)
                          (21 318)
                          (_    0)))
    (`macbook-pro-vga         700)
    (`macbook-pro-16          672)
    (`macbook-pro-15          464)
    (`macbook-pro-13          464)))

(defun emacs-min-height ()
  (pcase display-name
    ((guard alternate-emacs)   58)
    (`dell-wide                64)
    (`imac               (pcase (emacs-min-font-height)
                           (28 50)
                           (24 58)
                           (21 67)
                           (_  40)))
    (`macbook-pro-vga          55)
    (`macbook-pro-16           51)
    (`macbook-pro-15           47)
    (`macbook-pro-13           47)))

(defun emacs-min-width ()
  (pcase display-name
    ((guard alternate-emacs)   80)
    (`dell-wide               202)
    (`imac              (pcase (emacs-min-font-height)
                          (28 180)
                          (24 202)
                          (21 202)
                          (_  100)))
    (`macbook-pro-vga         100)
    (`macbook-pro-16          100)
    (`macbook-pro-15          100)
    (`macbook-pro-13          100)))

(defun emacs-min ()
  (interactive)
  (cl-flet ((set-param (p v) (set-frame-parameter (selected-frame) p v)))
    (set-param 'fullscreen nil)
    (set-param 'vertical-scroll-bars nil)
    (set-param 'horizontal-scroll-bars nil))
  (message "display-name:     %S" display-name)
  (message "Font name:        %s" (emacs-min-font))
  (message "Font height:      %s" (aref (font-info (emacs-min-font)) 3))
  (message "emacs-min-left:   %s" (emacs-min-left))
  (message "emacs-min-height: %s" (emacs-min-height))
  (message "emacs-min-width:  %s" (emacs-min-width))
  (and (emacs-min-left)
       (set-frame-position (selected-frame) (emacs-min-left) 0))
  (and (emacs-min-height)
       (set-frame-height (selected-frame) (emacs-min-height)))
  (and (emacs-min-width)
       (set-frame-width (selected-frame) (emacs-min-width)))
  (and (emacs-min-font)
       (set-frame-font (emacs-min-font)))
  (message "Emacs is ready"))

(defun emacs-max ()
  (interactive)
  (cl-flet ((set-param (p v) (set-frame-parameter (selected-frame) p v)))
    (set-param 'fullscreen 'fullboth)
    (set-param 'vertical-scroll-bars nil)
    (set-param 'horizontal-scroll-bars nil))
  (and (emacs-min-font)
       (set-frame-font (emacs-min-font))))

(defun emacs-toggle-size ()
  (interactive)
  (if (alist-get 'fullscreen (frame-parameters))
      (emacs-min)
    (emacs-max)))

(add-hook 'emacs-startup-hook #'emacs-min t)
#+end_src

** color-theme

#+begin_src emacs-lisp
(use-package color-theme
  :config
  (load "color-theme-library")
  (color-theme-midnight))
#+end_src

* Finalization

#+begin_src emacs-lisp
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading %s...done (%.3fs)" load-file-name elapsed))

(add-hook 'after-init-hook
          `(lambda ()
             (let ((elapsed
                    (float-time
                     (time-subtract (current-time) emacs-start-time))))
               (message "Loading %s...done (%.3fs) [after-init]"
                        ,load-file-name elapsed))) t)
#+end_src

* Startup

#+begin_src emacs-lisp
(defun startup ()
  (interactive)
  (eshell-toggle nil)
  (switch-to-gnus)
  ;; (switch-to-fetchmail)
  (jump-to-org-agenda)
  (org-resolve-clocks)
  (unless (eq display-name 'imac)
    (display-battery-mode 1)))
#+end_src

* emacs.org ends here
